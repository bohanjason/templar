objc[99431]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/bin/java (0x10389d4c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x1039654e0). One of the two will be used. Which one is undefined.
Connecting to database: <jdbc:mysql://localhost:3306/imdb>
Database connected!
00:00  INFO: ===== FOLD 0 =====
Original log size: 94
Trimming log to 100.0%...
Final log size: 94
00:00  INFO: ===== Parsing Results =====
00:00  INFO: Total Queries: 94
00:00  INFO: Correctly Parsed: 94/94

== QUERY ID: 10 ==
Cands for 'born': 81
Pruned candidates for born: 4
 - actor.birth_year (0.745)
 - producer.birth_year (0.745)
 - director.birth_year (0.745)
 - writer.birth_year (0.745)
Cands for 'Kevin Spacey': 93
Pruned candidates for Kevin Spacey: 4
 - producer.name = 'Kevin Spacey' (1.0)
 - writer.name = 'Kevin Spacey' (1.0)
 - director.name = 'Kevin Spacey' (1.0)
 - actor.name = 'Kevin Spacey' (1.0)
KW TIME: 11448 ms
TOTAL INTERPS COUNT: 16
INTERP TIME: 530 ms
TOTAL SCORE: 0.7705070600652827, TIES: 0
--
born :: actor.birth_year; producer.birth_year; director.birth_year; writer.birth_year : actor.birth_year (0.745)
Kevin Spacey :: actor.name = 'Kevin Spacey'; producer.name = 'Kevin Spacey'; director.name = 'Kevin Spacey'; writer.name = 'Kevin Spacey' : actor.name = 'Kevin Spacey' (1.0)
actor
QUERY TIME: 12002 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 40 ==
Cands for 'movies': 81
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Cands for 'Autism': 174
Pruned candidates for Autism: 2
 - movie.title = 'Autism' (1.0)
 - keyword.keyword = 'autism' (1.0)
KW TIME: 10813 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 22 ms
TOTAL SCORE: 0.8447213195499949, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Autism :: keyword.keyword = 'autism' : keyword.keyword = 'autism' (1.0)
keyword(tags(movie))
QUERY TIME: 10836 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 53 ==
Cands for 'tv series': 81
Pruned candidates for tv series: 1
 - tv_series.title (1.0)
Cands for 'Netflix': 105
Pruned candidates for Netflix: 2
 - company.name = 'Netflix' (1.0)
 - keyword.keyword = 'netflix' (1.0)
KW TIME: 13134 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 8 ms
TOTAL SCORE: 0.81, TIES: 0
--
tv series :: tv_series.title : tv_series.title (1.0)
Netflix :: company.name = 'Netflix' : keyword.keyword = 'netflix' (1.0)
keyword(tags(tv_series))
QUERY TIME: 13142 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 2)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 59 ==
Cands for 'female': 4958
Pruned candidates for female: 7
 - producer.gender = 'female' (1.0)
 - keyword.keyword = 'female' (1.0)
 - writer.gender = 'female' (1.0)
 - actor.gender = 'female' (1.0)
 - director.gender = 'female' (1.0)
 - movie.title = 'Female' (1.0)
 - cast.role = 'Female' (1.0)
Cands for 'actors': 81
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Cands for 'Austin': 4014
Pruned candidates for Austin: 9
 - director.birth_city = 'Austin' (1.0)
 - producer.name = 'Austin' (1.0)
 - actor.name = 'Austin' (1.0)
 - producer.birth_city = 'Austin' (1.0)
 - writer.birth_city = 'Austin' (1.0)
 - actor.birth_city = 'Austin' (1.0)
 - movie.title = 'Austin' (1.0)
 - writer.name = 'Austin' (1.0)
 - director.name = 'Austin' (1.0)
KW TIME: 51323 ms
TOTAL INTERPS COUNT: 63
INTERP TIME: 496 ms
TOTAL SCORE: 0.9101921227782879, TIES: 0
--
female :: actor.gender = 'female' : actor.gender = 'female' (1.0)
actors :: actor.name : actor.name (0.9999999)
Austin :: actor.birth_city = 'Austin' : actor.birth_city = 'Austin' (1.0)
actor
QUERY TIME: 51820 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 72 ==
Cands for 'Sci Fi': 4350
Pruned candidates for Sci-Fi: 4
 - company.name = 'Sci Fi' (1.0)
 - cast.role = 'Sci-Fi' (1.0)
 - genre.genre = 'Sci-Fi' (1.0)
 - cast.role = 'Sci Fi' (1.0)
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Cands for '= 2010': 24
Pruned candidates for released 2010: 2
 - movie.release_year = 2010 (0.8921717295453829)
 - tv_series.release_year = 2010 (0.8921717295453829)
KW TIME: 13328 ms
TOTAL INTERPS COUNT: 8
INTERP TIME: 29 ms
TOTAL SCORE: 0.8069115332047632, TIES: 0
--
Sci-Fi :: genre.genre = 'Sci-Fi' : genre.genre = 'Sci-Fi' (1.0)
movies :: movie.title : movie.title (0.9999999)
released 2010 :: movie.release_year = 2010 : movie.release_year = 2010 (0.8921717295453829)
classification(genre,movie)
QUERY TIME: 13357 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 32 ==
Cands for 'company': 81
Pruned candidates for company: 1
 - company.name (1.0)
Cands for 'movie Juno': 108
Pruned candidates for movie Juno: 1
 - movie.title = 'Juno' (1.0)
KW TIME: 9147 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 3 ms
TOTAL SCORE: 0.8276385399196283, TIES: 0
--
company :: company.name : company.name (1.0)
movie Juno :: movie.title = 'Juno' : movie.title = 'Juno' (1.0)
company(copyright(movie))
QUERY TIME: 9150 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 50 ==
Cands for 'producers': 81
Pruned candidates for producers: 1
 - producer.name (0.9999999)
Cands for 'movies': 16
Pruned candidates for movies: 1
 - movie (0.9999999)
Cands for 'Kate Winslet': 85
Pruned candidates for Kate Winslet: 1
 - actor.name = 'Kate Winslet' (1.0)
Cands for 'actor': 16
Pruned candidates for actor: 1
 - actor (1.0)
KW TIME: 9060 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 7 ms
TOTAL SCORE: 0.8074470916703096, TIES: 0
--
producers :: producer.name : producer.name (0.9999999)
Kate Winslet :: actor.name = 'Kate Winslet' : actor.name = 'Kate Winslet' (1.0)
actor(cast(movie(made_by(producer))))
QUERY TIME: 9067 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 4)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 37 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Cands for 'Walt Disney': 269
Pruned candidates for Walt Disney: 5
 - company.name = 'Walt Disney' (1.0)
 - director.name = 'Walt Disney' (1.0)
 - writer.name = 'Walt Disney' (1.0)
 - actor.name = 'Walt Disney' (1.0)
 - producer.name = 'Walt Disney' (1.0)
Cands for '> 2010': 24
Pruned candidates for after 2010: 1
 - movie.mid > 2010 (0.7953217839340251)
KW TIME: 11173 ms
TOTAL INTERPS COUNT: 5
INTERP TIME: 22 ms
TOTAL SCORE: 0.7625100738225852, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Walt Disney :: company.name = 'Walt Disney' : actor.name = 'Walt Disney' (1.0)
after 2010 :: movie.release_year > 2010 : movie.mid > 2010 (0.7953217839340251)
actor(cast(movie))
QUERY TIME: 11195 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 104 ==
Cands for 'movies': 65
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Cands for 'Brad Pitt': 101
Pruned candidates for Brad Pitt: 2
 - producer.name = 'Brad Pitt' (1.0)
 - actor.name = 'Brad Pitt' (1.0)
KW TIME: 10010 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 6 ms
TOTAL SCORE: 0.8793852319532497, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Brad Pitt :: actor.name = 'Brad Pitt' : actor.name = 'Brad Pitt' (1.0)
actor(cast(movie))
QUERY TIME: 10016 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 33 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for Netflix: 2
 - company.name = 'Netflix' (1.0)
 - keyword.keyword = 'netflix' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 6 ms
TOTAL SCORE: 0.8447213195499949, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Netflix :: company.name = 'Netflix' : keyword.keyword = 'netflix' (1.0)
keyword(tags(movie))
QUERY TIME: 6 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 2)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 69 ==
Cands for 'directors': 81
Pruned candidates for directors: 1
 - director.name (0.9999999)
Cands for 'Afghanistan': 235
Pruned candidates for Afghanistan: 7
 - actor.birth_city = 'Afghanistan' (1.0)
 - writer.nationality = 'Afghanistan' (1.0)
 - movie.title = 'Afghanistan' (1.0)
 - actor.nationality = 'Afghanistan' (1.0)
 - producer.nationality = 'Afghanistan' (1.0)
 - keyword.keyword = 'afghanistan' (1.0)
 - director.nationality = 'Afghanistan' (1.0)
KW TIME: 9537 ms
TOTAL INTERPS COUNT: 7
INTERP TIME: 33 ms
TOTAL SCORE: 0.8522179589630289, TIES: 0
--
directors :: director.name : director.name (0.9999999)
Afghanistan :: director.nationality = 'Afghanistan' : movie.title = 'Afghanistan' (1.0)
directed_by(director,movie)
QUERY TIME: 9570 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 2)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 94 ==
Cands for 'actors': 65
Pruned candidates for actors: 1
 - count(actor.name) (0.9999999)
Cands for 'Los Angeles': 1061
Pruned candidates for Los Angeles: 5
 - writer.birth_city = 'Los Angeles' (1.0)
 - movie.title = 'Los Angeles' (1.0)
 - director.birth_city = 'Los Angeles' (1.0)
 - actor.birth_city = 'Los Angeles' (1.0)
 - producer.birth_city = 'Los Angeles' (1.0)
Cands for '> 2000': 24
Pruned candidates for after 2000: 1
 - movie.mid > 2000 (0.7953217839340251)
KW TIME: 11663 ms
TOTAL INTERPS COUNT: 5
INTERP TIME: 41 ms
TOTAL SCORE: 0.7621092691322817, TIES: 0
--
actors :: count(actor.name) : count(actor.name) (0.9999999)
Los Angeles :: actor.birth_city = 'Los Angeles' : actor.birth_city = 'Los Angeles' (1.0)
after 2000 :: actor.birth_year > 2000 : movie.mid > 2000 (0.7953217839340251)
actor(cast(movie))
QUERY TIME: 11704 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 84 ==
Cands for 'male': 6189
Pruned candidates for male: 10
 - producer.gender = 'male' (1.0)
 - actor.gender = 'male' (1.0)
 - writer.gender = 'male' (1.0)
 - writer.name = 'Male' (1.0)
 - actor.name = 'Male' (1.0)
 - director.birth_city = 'Male' (1.0)
 - director.gender = 'male' (1.0)
 - producer.birth_city = 'Male' (1.0)
 - movie.title = 'Male' (1.0)
 - writer.birth_city = 'Male' (1.0)
Pruned candidates for directors: 1
 - director.name (0.9999999)
Cands for 'NBCUniversal company': 86
Pruned candidates for NBCUniversal company: 1
 - company.name = 'NBCUniversal' (1.0)
KW TIME: 63550 ms
TOTAL INTERPS COUNT: 10
INTERP TIME: 56 ms
TOTAL SCORE: 0.8112173808894318, TIES: 0
--
male :: director.gender = 'male' : director.gender = 'male' (1.0)
directors :: director.name : director.name (0.9999999)
NBCUniversal company :: company.name = 'NBCUniversal' : company.name = 'NBCUniversal' (1.0)
company(copyright(tv_series(directed_by(director))))
QUERY TIME: 63606 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 52 ==
Pruned candidates for company: 1
 - company.name (1.0)
Cands for 'series Scandal': 101
Pruned candidates for series Scandal: 1
 - tv_series.title = 'Scandal' (0.93405)
KW TIME: 10358 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 3 ms
TOTAL SCORE: 0.8192267163617812, TIES: 0
--
company :: company.name : company.name (1.0)
series Scandal :: tv_series.title = 'Scandal' : tv_series.title = 'Scandal' (0.93405)
company(copyright(tv_series))
QUERY TIME: 10361 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 25 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Cands for 'written by': 16
Pruned candidates for written by: 1
 - written_by (1.0)
Cands for 'Matt Damon': 104
Pruned candidates for Matt Damon: 4
 - actor.name = 'Matt Damon' (1.0)
 - writer.name = 'Matt Damon' (1.0)
 - director.name = 'Matt Damon' (1.0)
 - producer.name = 'Matt Damon' (1.0)
KW TIME: 10352 ms
TOTAL INTERPS COUNT: 4
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
INTERP TIME: 18 ms
TOTAL SCORE: 0.8099999733333325, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Matt Damon :: writer.name = 'Matt Damon' : writer.name = 'Matt Damon' (1.0)
movie(written_by(writer))
QUERY TIME: 10371 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 87 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Cands for 'Jennifer Aniston': 97
Pruned candidates for Jennifer Aniston: 3
 - producer.name = 'Jennifer Aniston' (1.0)
 - director.name = 'Jennifer Aniston' (1.0)
 - actor.name = 'Jennifer Aniston' (1.0)
Cands for 'acted': 16
Pruned candidates for acted: 1
 - written_by (0.652)
Pruned candidates for after 2010: 1
 - movie.mid > 2010 (0.7953217839340251)
KW TIME: 10285 ms
TOTAL INTERPS COUNT: 3
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
INTERP TIME: 20 ms
TOTAL SCORE: 0.0, TIES: 2
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Jennifer Aniston :: actor.name = 'Jennifer Aniston' : producer.name = 'Jennifer Aniston' (1.0)
after 2010 :: movie.release_year > 2010 : movie.mid > 2010 (0.7953217839340251)
made_by(movie,producer)
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Jennifer Aniston :: actor.name = 'Jennifer Aniston' : director.name = 'Jennifer Aniston' (1.0)
after 2010 :: movie.release_year > 2010 : movie.mid > 2010 (0.7953217839340251)
directed_by(director,movie)
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Jennifer Aniston :: actor.name = 'Jennifer Aniston' : actor.name = 'Jennifer Aniston' (1.0)
after 2010 :: movie.release_year > 2010 : movie.mid > 2010 (0.7953217839340251)
actor(cast(movie))
QUERY TIME: 10306 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 4)> [Ties0: 1] [Ties1: 2] [Ties1/t: 1.33]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 29 ==
Cands for 'actor': 81
Pruned candidates for actor: 1
 - actor.name (1.0)
Cands for 'played': 16
Pruned candidates for played: 1
 - cast (0.6295)
Cands for 'Vinny Gambini': 83
Pruned candidates for Vinny Gambini: 1
 - cast.role = 'Vinny Gambini' (1.0)
Cands for 'movie My Cousin Vinny': 83
Pruned candidates for movie My Cousin Vinny: 1
 - movie.title = 'My Cousin Vinny' (1.0)
KW TIME: 21587 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 6 ms
TOTAL SCORE: 0.7682732629748, TIES: 0
--
actor :: actor.name : actor.name (1.0)
Vinny Gambini :: cast.role = 'Vinny Gambini' : cast.role = 'Vinny Gambini' (1.0)
movie My Cousin Vinny :: movie.title = 'My Cousin Vinny' : movie.title = 'My Cousin Vinny' (1.0)
actor(cast(movie))
QUERY TIME: 21593 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 4)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 98 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Cands for 'Iraq war': 115
Pruned candidates for Iraq war: 1
 - keyword.keyword = 'iraq-war' (1.0)
Cands for '= 2015': 24
Pruned candidates for 2015: 5
 - tags.id = 2015 (0.9999)
 - movie.release_year = 2015 (0.9999)
 - keyword.id = 2015 (0.9999)
 - company.id = 2015 (0.9999)
 - tv_series.release_year = 2015 (0.9999)
KW TIME: 11402 ms
TOTAL INTERPS COUNT: 5
INTERP TIME: 20 ms
TOTAL SCORE: 0.8456577016093947, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Iraq war :: keyword.keyword = 'iraq-war' : keyword.keyword = 'iraq-war' (1.0)
2015 :: movie.release_year = 2015 : movie.release_year = 2015 (0.9999)
keyword(tags(movie))
QUERY TIME: 11422 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 117 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for Matt Damon: 4
 - actor.name = 'Matt Damon' (1.0)
 - writer.name = 'Matt Damon' (1.0)
 - director.name = 'Matt Damon' (1.0)
 - producer.name = 'Matt Damon' (1.0)
Cands for 'Ben Affleck': 101
Pruned candidates for Ben Affleck: 4
 - writer.name = 'Ben Affleck' (1.0)
 - producer.name = 'Ben Affleck' (1.0)
 - director.name = 'Ben Affleck' (1.0)
 - actor.name = 'Ben Affleck' (1.0)
KW TIME: 9624 ms
TOTAL INTERPS COUNT: 16
INTERP TIME: 113 ms
TOTAL SCORE: 0.8395504387194272, TIES: 1
--
movies :: movie.title : movie.title (0.9999999)
Matt Damon :: actor.name = 'Matt Damon' : actor.name = 'Matt Damon' (1.0)
Ben Affleck :: actor.name = 'Ben Affleck' : director.name = 'Ben Affleck' (1.0)
actor(cast(movie(directed_by(director))))
--
movies :: movie.title : movie.title (0.9999999)
Matt Damon :: actor.name = 'Matt Damon' : director.name = 'Matt Damon' (1.0)
Ben Affleck :: actor.name = 'Ben Affleck' : actor.name = 'Ben Affleck' (1.0)
actor(cast(movie(directed_by(director))))
QUERY TIME: 9738 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 1] [Ties1: 3] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 71 ==
Cands for 'writer': 81
Pruned candidates for writer: 1
 - writer.name (1.0)
Cands for 'The Truman Show': 85
Pruned candidates for The Truman Show: 1
 - movie.title = 'The Truman Show' (1.0)
KW TIME: 9994 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 3 ms
TOTAL SCORE: 0.8294883912309795, TIES: 0
--
writer :: writer.name : writer.name (1.0)
The Truman Show :: movie.title = 'The Truman Show' : movie.title = 'The Truman Show' (1.0)
movie(written_by(writer))
QUERY TIME: 9997 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 109 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Cands for 'Shahab Hosseini': 86
Pruned candidates for Shahab Hosseini: 2
 - writer.name = 'Shahab Hosseini' (1.0)
 - actor.name = 'Shahab Hosseini' (1.0)
Cands for 'act': 16
Pruned candidates for act: 1
 - directed_by (0.61295)
KW TIME: 9783 ms
TOTAL INTERPS COUNT: 2
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 8 ms
TOTAL SCORE: 0.0, TIES: 1
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Shahab Hosseini :: actor.name = 'Shahab Hosseini' : writer.name = 'Shahab Hosseini' (1.0)
movie(written_by(writer))
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Shahab Hosseini :: actor.name = 'Shahab Hosseini' : actor.name = 'Shahab Hosseini' (1.0)
actor(cast(movie))
QUERY TIME: 9792 ms
QUERY > [Ties0: N] [Ties1: Y] [Ties1/t: 0.50]
FRAGMENT (Total: 3)> [Ties0: 1] [Ties1: 2] [Ties1/t: 1.50]
JOIN PATH > [Ties0: N] [Ties1: Y] [Ties1/t: 0.50]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 44 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Cands for 'directed by': 16
Pruned candidates for directed by: 1
 - directed_by (1.0)
Cands for 'Quentin Tarantino': 94
Pruned candidates for Quentin Tarantino: 4
 - director.name = 'Quentin Tarantino' (1.0)
 - actor.name = 'Quentin Tarantino' (1.0)
 - producer.name = 'Quentin Tarantino' (1.0)
 - writer.name = 'Quentin Tarantino' (1.0)
Cands for 'Christoph Waltz': 89
Pruned candidates for Christoph Waltz: 4
 - director.name = 'Christoph Waltz' (1.0)
 - writer.name = 'Christoph Waltz' (1.0)
 - producer.name = 'Christoph Waltz' (1.0)
 - actor.name = 'Christoph Waltz' (1.0)
KW TIME: 19009 ms
TOTAL INTERPS COUNT: 16
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 131 ms
TOTAL SCORE: 0.8366258099269358, TIES: 1
--
movies :: movie.title : movie.title (0.9999999)
Quentin Tarantino :: director.name = 'Quentin Tarantino' : actor.name = 'Quentin Tarantino' (1.0)
Christoph Waltz :: actor.name = 'Christoph Waltz' : director.name = 'Christoph Waltz' (1.0)
actor(cast(movie,tv_series(directed_by(director))))
--
movies :: movie.title : movie.title (0.9999999)
Quentin Tarantino :: director.name = 'Quentin Tarantino' : director.name = 'Quentin Tarantino' (1.0)
Christoph Waltz :: actor.name = 'Christoph Waltz' : actor.name = 'Christoph Waltz' (1.0)
actor(cast(movie,tv_series(directed_by(director))))
QUERY TIME: 19141 ms
QUERY > [Ties0: N] [Ties1: Y] [Ties1/t: 0.50]
FRAGMENT (Total: 4)> [Ties0: 1] [Ties1: 3] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 21 ==
Pruned candidates for actor: 1
 - actor.name (1.0)
Pruned candidates for played: 1
 - cast (0.6295)
Cands for 'Captain Miller': 86
Pruned candidates for Captain Miller: 1
 - cast.role = 'Captain Miller' (1.0)
Cands for 'movie Saving Private Ryan': 94
Pruned candidates for movie Saving Private Ryan: 1
 - movie.title = 'Saving Private Ryan' (1.0)
KW TIME: 20292 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 6 ms
TOTAL SCORE: 0.7682732629748, TIES: 0
--
actor :: actor.name : actor.name (1.0)
Captain Miller :: cast.role = 'Captain Miller' : cast.role = 'Captain Miller' (1.0)
movie Saving Private Ryan :: movie.title = 'Saving Private Ryan' : movie.title = 'Saving Private Ryan' (1.0)
actor(cast(movie))
QUERY TIME: 20299 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 4)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 103 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Pruned candidates for Quentin Tarantino: 4
 - director.name = 'Quentin Tarantino' (1.0)
 - actor.name = 'Quentin Tarantino' (1.0)
 - producer.name = 'Quentin Tarantino' (1.0)
 - writer.name = 'Quentin Tarantino' (1.0)
Cands for 'direct': 16
Pruned candidates for direct: 1
 - directed_by (0.668)
Cands for '< 2002': 24
Pruned candidates for before 2002: 4
 - producer.birth_year < 2002 (0.7510283549906754)
 - writer.birth_year < 2002 (0.7510283549906754)
 - director.birth_year < 2002 (0.7510283549906754)
 - actor.birth_year < 2002 (0.7510283549906754)
Pruned candidates for after 2010: 1
 - movie.mid > 2010 (0.7953217839340251)
KW TIME: 162 ms
TOTAL INTERPS COUNT: 16
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 175 ms
TOTAL SCORE: 0.6796655174429101, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Quentin Tarantino :: director.name = 'Quentin Tarantino' : director.name = 'Quentin Tarantino' (1.0)
before 2002 :: movie.release_year < 2002 : director.birth_year < 2002 (0.7510283549906754)
after 2010 :: movie.release_year > 2010 : movie.mid > 2010 (0.7953217839340251)
directed_by(director,movie)
QUERY TIME: 337 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 5)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 41 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for directed by: 1
 - directed_by (1.0)
Cands for 'Woody Allen': 149
Pruned candidates for Woody Allen: 4
 - producer.name = 'Woody Allen' (1.0)
 - writer.name = 'Woody Allen' (1.0)
 - director.name = 'Woody Allen' (1.0)
 - actor.name = 'Woody Allen' (1.0)
Cands for 'Scarlett Johansson': 89
Pruned candidates for Scarlett Johansson: 4
 - writer.name = 'Scarlett Johansson' (1.0)
 - director.name = 'Scarlett Johansson' (1.0)
 - actor.name = 'Scarlett Johansson' (1.0)
 - producer.name = 'Scarlett Johansson' (1.0)
KW TIME: 21099 ms
TOTAL INTERPS COUNT: 16
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 111 ms
TOTAL SCORE: 0.8366258099269358, TIES: 1
--
movies :: movie.title : movie.title (0.9999999)
Woody Allen :: director.name = 'Woody Allen' : actor.name = 'Woody Allen' (1.0)
Scarlett Johansson :: actor.name = 'Scarlett Johansson' : director.name = 'Scarlett Johansson' (1.0)
actor(cast(movie,tv_series(directed_by(director))))
--
movies :: movie.title : movie.title (0.9999999)
Woody Allen :: director.name = 'Woody Allen' : director.name = 'Woody Allen' (1.0)
Scarlett Johansson :: actor.name = 'Scarlett Johansson' : actor.name = 'Scarlett Johansson' (1.0)
actor(cast(movie,tv_series(directed_by(director))))
QUERY TIME: 21211 ms
QUERY > [Ties0: N] [Ties1: Y] [Ties1/t: 0.50]
FRAGMENT (Total: 4)> [Ties0: 1] [Ties1: 3] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 79 ==
Cands for 'acted': 81
Pruned candidates for acted: 2
 - directed_by.did (0.63595)
 - director.did (0.63595)
Cands for 'role Mr Bean': 462
Pruned candidates for role Mr. Bean: 1
 - cast.role = 'Mr. Bean' (0.99999999)
KW TIME: 11215 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 8 ms
TOTAL SCORE: 0.6512887149728482, TIES: 0
--
acted :: actor.name : directed_by.did (0.63595)
role Mr. Bean :: cast.role = 'Mr. Bean' : cast.role = 'Mr. Bean' (0.99999999)
cast(tv_series(directed_by))
QUERY TIME: 11223 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 2)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 115 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Cands for 'director': 16
Pruned candidates for director: 1
 - director (1.0)
Cands for 'movie Revolutionary Road': 83
Pruned candidates for movie Revolutionary Road: 1
 - movie.title = 'Revolutionary Road' (1.0)
KW TIME: 11503 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 10 ms
TOTAL SCORE: 0.8102790967083334, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
movie Revolutionary Road :: movie.title = 'Revolutionary Road' : movie.title = 'Revolutionary Road' (1.0)
directed_by(director(directed_by#1(movie#1)),movie)
QUERY TIME: 11513 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 101 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Pruned candidates for Quentin Tarantino: 4
 - director.name = 'Quentin Tarantino' (1.0)
 - actor.name = 'Quentin Tarantino' (1.0)
 - producer.name = 'Quentin Tarantino' (1.0)
 - writer.name = 'Quentin Tarantino' (1.0)
Pruned candidates for direct: 1
 - directed_by (0.668)
Pruned candidates for after 2010: 1
 - movie.mid > 2010 (0.7953217839340251)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 4
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 34 ms
TOTAL SCORE: 0.7019452588398709, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Quentin Tarantino :: director.name = 'Quentin Tarantino' : director.name = 'Quentin Tarantino' (1.0)
after 2010 :: movie.release_year > 2010 : movie.mid > 2010 (0.7953217839340251)
directed_by(director,movie)
QUERY TIME: 34 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 4)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 102 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Pruned candidates for Quentin Tarantino: 4
 - director.name = 'Quentin Tarantino' (1.0)
 - actor.name = 'Quentin Tarantino' (1.0)
 - producer.name = 'Quentin Tarantino' (1.0)
 - writer.name = 'Quentin Tarantino' (1.0)
Pruned candidates for direct: 1
 - directed_by (0.668)
Cands for '< 2010': 24
Pruned candidates for before 2010: 4
 - writer.birth_year < 2010 (0.7510283549906754)
 - director.birth_year < 2010 (0.7510283549906754)
 - actor.birth_year < 2010 (0.7510283549906754)
 - producer.birth_year < 2010 (0.7510283549906754)
KW TIME: 153 ms
TOTAL INTERPS COUNT: 16
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 139 ms
TOTAL SCORE: 0.6922304783191676, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Quentin Tarantino :: director.name = 'Quentin Tarantino' : director.name = 'Quentin Tarantino' (1.0)
before 2010 :: movie.release_year < 2010 : director.birth_year < 2010 (0.7510283549906754)
directed_by(director,movie)
QUERY TIME: 292 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 4)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 51 ==
Cands for 'series': 81
Pruned candidates for series: 1
 - tv_series.title (0.8351)
Cands for 'Scott Foley': 96
Pruned candidates for Scott Foley: 4
 - producer.name = 'Scott Foley' (1.0)
 - director.name = 'Scott Foley' (1.0)
 - writer.name = 'Scott Foley' (1.0)
 - actor.name = 'Scott Foley' (1.0)
Pruned candidates for actor: 1
 - actor (1.0)
KW TIME: 11382 ms
TOTAL INTERPS COUNT: 4
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
INTERP TIME: 27 ms
TOTAL SCORE: 0.7833047927332125, TIES: 0
--
series :: tv_series.title : tv_series.title (0.8351)
Scott Foley :: actor.name = 'Scott Foley' : actor.name = 'Scott Foley' (1.0)
actor(cast(tv_series))
QUERY TIME: 11409 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 122 ==
Cands for 'movie': 81
Pruned candidates for movie: 1
 - movie.title (1.0)
Cands for 'actors': 10
Pruned candidates for actors: 1
 - count(actor.name) = max(count(actor.name)) (0.9999999)
Cands for 'China': 1767
Pruned candidates for China: 10
 - writer.name = 'China' (1.0)
 - producer.nationality = 'China' (1.0)
 - movie.title = 'China' (1.0)
 - director.name = 'China' (1.0)
 - company.name = 'China' (1.0)
 - director.nationality = 'China' (1.0)
 - producer.name = 'China' (1.0)
 - writer.nationality = 'China' (1.0)
 - actor.nationality = 'China' (1.0)
 - actor.name = 'China' (1.0)
KW TIME: 12954 ms
TOTAL INTERPS COUNT: 10
INTERP TIME: 90 ms
TOTAL SCORE: 0.8187403016864585, TIES: 0
--
movie :: movie.title : movie.title (1.0)
actors :: count(actor.name) = max(count(actor.name)) : count(actor.name) = max(count(actor.name)) (0.9999999)
China :: actor.nationality = 'China' : actor.name = 'China' (1.0)
actor(cast(movie,tv_series(cast#1(actor#1))))
QUERY TIME: 13045 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 96 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Pruned candidates for Brad Pitt: 2
 - producer.name = 'Brad Pitt' (1.0)
 - actor.name = 'Brad Pitt' (1.0)
Cands for 'acts': 16
Pruned candidates for acts: 1
 - genre (0.5885)
Cands for 'year': 81
Pruned candidates for year: 2
 - tv_series.release_year (0.83155)
 - movie.release_year (0.83155)
KW TIME: 250 ms
TOTAL INTERPS COUNT: 4
Returning 0.0 because Steiner tree doesn't contain genre
Returning 0.0 because Steiner tree doesn't contain genre
Returning 0.0 because Steiner tree doesn't contain genre
Returning 0.0 because Steiner tree doesn't contain genre
INTERP TIME: 30 ms
TOTAL SCORE: 0.0, TIES: 3
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Brad Pitt :: actor.name = 'Brad Pitt' : producer.name = 'Brad Pitt' (1.0)
year :: movie.release_year : tv_series.release_year (0.83155)
classification(movie,tv_series(made_by(producer)))
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Brad Pitt :: actor.name = 'Brad Pitt' : actor.name = 'Brad Pitt' (1.0)
year :: movie.release_year : tv_series.release_year (0.83155)
actor(cast(movie,tv_series))
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Brad Pitt :: actor.name = 'Brad Pitt' : producer.name = 'Brad Pitt' (1.0)
year :: movie.release_year : movie.release_year (0.83155)
made_by(movie,producer)
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Brad Pitt :: actor.name = 'Brad Pitt' : actor.name = 'Brad Pitt' (1.0)
year :: movie.release_year : movie.release_year (0.83155)
actor(cast(movie))
QUERY TIME: 281 ms
QUERY > [Ties0: N] [Ties1: Y] [Ties1/t: 0.25]
FRAGMENT (Total: 4)> [Ties0: 1] [Ties1: 3] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: Y] [Ties1/t: 0.25]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
==== FOLD RESULTS ====
32,16,20,17.750,16,18,16.750,82,59,69,63.833
CUMULATIVE TOTAL TIME: 427836 ms
CUMULATIVE KW TIME: 425590 ms
CUMULATIVE I TIME: 2211 ms
CUMULATIVE INTERP COUNT: 247
07:08  INFO: ===== FOLD 1 =====
Original log size: 94
Trimming log to 100.0%...
Final log size: 94
07:08  INFO: ===== Parsing Results =====
07:08  INFO: Total Queries: 94
07:08  INFO: Correctly Parsed: 94/94

Loading cache from: <data/imdb/imdb.cands.cache>
Cache loaded!
== QUERY ID: 36 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Cands for 'New York City': 648
Pruned candidates for New York City: 7
 - actor.birth_city = 'New York City' (1.0)
 - writer.birth_city = 'New York City' (1.0)
 - producer.birth_city = 'New York City' (1.0)
 - movie.title = 'New York City' (1.0)
 - director.birth_city = 'New York City' (1.0)
 - keyword.keyword = 'new-york-city' (1.0)
 - cast.role = 'New York City' (1.0)
Cands for '> 1990': 24
Pruned candidates for after 1990: 1
 - movie.mid > 1990 (0.7953217839340251)
KW TIME: 12495 ms
TOTAL INTERPS COUNT: 7
INTERP TIME: 79 ms
TOTAL SCORE: 0.7614132118242939, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
New York City :: actor.birth_city = 'New York City' : actor.birth_city = 'New York City' (1.0)
after 1990 :: actor.birth_year > 1990 : movie.mid > 1990 (0.7953217839340251)
actor(cast(movie))
QUERY TIME: 12575 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 34 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Pruned candidates for New York City: 7
 - actor.birth_city = 'New York City' (1.0)
 - writer.birth_city = 'New York City' (1.0)
 - producer.birth_city = 'New York City' (1.0)
 - movie.title = 'New York City' (1.0)
 - director.birth_city = 'New York City' (1.0)
 - keyword.keyword = 'new-york-city' (1.0)
 - cast.role = 'New York City' (1.0)
Cands for '= 1984': 24
Pruned candidates for 1984: 9
 - writer.birth_year = 1984 (0.9999)
 - company.id = 1984 (0.9999)
 - director.birth_year = 1984 (0.9999)
 - producer.birth_year = 1984 (0.9999)
 - keyword.id = 1984 (0.9999)
 - tv_series.release_year = 1984 (0.9999)
 - actor.birth_year = 1984 (0.9999)
 - tags.id = 1984 (0.9999)
 - movie.release_year = 1984 (0.9999)
KW TIME: 200 ms
TOTAL INTERPS COUNT: 63
INTERP TIME: 775 ms
TOTAL SCORE: 0.9423719010824503, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
New York City :: actor.birth_city = 'New York City' : actor.birth_city = 'New York City' (1.0)
1984 :: actor.birth_year = 1984 : actor.birth_year = 1984 (0.9999)
actor
QUERY TIME: 977 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 112 ==
Pruned candidates for actors: 1
 - count(actor.name) (0.9999999)
Pruned candidates for China: 10
 - writer.name = 'China' (1.0)
 - producer.nationality = 'China' (1.0)
 - movie.title = 'China' (1.0)
 - director.name = 'China' (1.0)
 - company.name = 'China' (1.0)
 - director.nationality = 'China' (1.0)
 - producer.name = 'China' (1.0)
 - writer.nationality = 'China' (1.0)
 - actor.nationality = 'China' (1.0)
 - actor.name = 'China' (1.0)
Pruned candidates for acted: 1
 - written_by (0.652)
Cands for '= 3': 24
Pruned candidates for Rush Hour 3: 2
 - tags.id = 3 (0.7393884804350146)
 - company.id = 3 (0.7393884804350146)
KW TIME: 2226 ms
TOTAL INTERPS COUNT: 20
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
INTERP TIME: 172 ms
TOTAL SCORE: 0.6736137594615984, TIES: 1
--
actors :: count(actor.name) : count(actor.name) (0.9999999)
China :: actor.nationality = 'China' : writer.name = 'China' (1.0)
Rush Hour 3 :: movie.title = 'Rush Hour 3' : tags.id = 3 (0.7393884804350146)
actor(cast(tv_series(tags,written_by(writer))))
--
actors :: count(actor.name) : count(actor.name) (0.9999999)
China :: actor.nationality = 'China' : writer.nationality = 'China' (1.0)
Rush Hour 3 :: movie.title = 'Rush Hour 3' : tags.id = 3 (0.7393884804350146)
actor(cast(tv_series(tags,written_by(writer))))
QUERY TIME: 2398 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 4)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 126 ==
Cands for 'directed': 81
Pruned candidates for directed: 1
 - director.name (0.6349)
Cands for 'latest': 65
Pruned candidates for latest: 2
 - movie.release_year = max(movie.release_year) (0.6627000000000001)
 - tv_series.release_year = max(tv_series.release_year) (0.6627000000000001)
Cands for 'movie': 16
Pruned candidates for movie: 1
 - movie (1.0)
Cands for 'NBCUniversal': 86
Pruned candidates for NBCUniversal: 1
 - company.name = 'NBCUniversal' (1.0)
KW TIME: 10332 ms
TOTAL INTERPS COUNT: 2
Returning 0.0 because Steiner tree doesn't contain movie
INTERP TIME: 16 ms
TOTAL SCORE: 0.6513291744170426, TIES: 0
--
directed :: director.name : director.name (0.6349)
latest :: movie.release_year = max(movie.release_year) : movie.release_year = max(movie.release_year) (0.6627000000000001)
NBCUniversal :: company.name = 'NBCUniversal' : company.name = 'NBCUniversal' (1.0)
company(copyright(movie(directed_by(director))))
QUERY TIME: 10349 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 4)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 119 ==
Pruned candidates for actor: 1
 - actor.name (1.0)
Cands for 'films': 10
Pruned candidates for films: 1
 - count(movie.title) = max(count(movie.title)) (0.86815)
KW TIME: 18 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 7 ms
TOTAL SCORE: 0.7752563510801259, TIES: 0
--
actor :: actor.name : actor.name (1.0)
films :: count(movie.title) = max(count(movie.title)) : count(movie.title) = max(count(movie.title)) (0.86815)
actor(cast(movie))
QUERY TIME: 25 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 11 ==
Cands for 'year born': 81
Pruned candidates for year born: 4
 - director.birth_year (0.84765)
 - writer.birth_year (0.84765)
 - actor.birth_year (0.84765)
 - producer.birth_year (0.84765)
Pruned candidates for Kevin Spacey: 4
 - producer.name = 'Kevin Spacey' (1.0)
 - writer.name = 'Kevin Spacey' (1.0)
 - director.name = 'Kevin Spacey' (1.0)
 - actor.name = 'Kevin Spacey' (1.0)
KW TIME: 244 ms
TOTAL INTERPS COUNT: 16
INTERP TIME: 91 ms
TOTAL SCORE: 0.7920132973733962, TIES: 0
--
year born :: actor.birth_year; producer.birth_year; director.birth_year; writer.birth_year : actor.birth_year (0.84765)
Kevin Spacey :: actor.name = 'Kevin Spacey'; producer.name = 'Kevin Spacey'; director.name = 'Kevin Spacey'; writer.name = 'Kevin Spacey' : actor.name = 'Kevin Spacey' (1.0)
actor
QUERY TIME: 335 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 86 ==
Pruned candidates for directors: 1
 - director.name (0.9999999)
Pruned candidates for movies: 1
 - movie (0.9999999)
Cands for 'nuclear weapons': 92
Pruned candidates for nuclear weapons: 1
 - keyword.keyword = 'nuclear-weapons' (1.0)
KW TIME: 10022 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 5 ms
TOTAL SCORE: 0.8072007696648968, TIES: 0
--
directors :: director.name : director.name (0.9999999)
nuclear weapons :: keyword.keyword = 'nuclear-weapons' : keyword.keyword = 'nuclear-weapons' (1.0)
directed_by(director,movie(tags(keyword)))
QUERY TIME: 10027 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 5 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Pruned candidates for Los Angeles: 5
 - writer.birth_city = 'Los Angeles' (1.0)
 - movie.title = 'Los Angeles' (1.0)
 - director.birth_city = 'Los Angeles' (1.0)
 - actor.birth_city = 'Los Angeles' (1.0)
 - producer.birth_city = 'Los Angeles' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 5
INTERP TIME: 20 ms
TOTAL SCORE: 0.9322875255532286, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
Los Angeles :: actor.birth_city = 'Los Angeles' : actor.birth_city = 'Los Angeles' (1.0)
actor
QUERY TIME: 20 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 78 ==
Cands for 'where from': 81
Pruned candidates for where from: 1
 - movie.mid (0.61765)
Pruned candidates for director: 1
 - director (1.0)
Cands for 'The Past': 4593
Pruned candidates for The Past: 3
 - cast.role = 'The Past' (1.0)
 - movie.title = 'The Past' (1.0)
 - keyword.keyword = 'the-past' (1.0)
KW TIME: 16795 ms
TOTAL INTERPS COUNT: 3
Returning 0.0 because Steiner tree doesn't contain director
Returning 0.0 because Steiner tree doesn't contain director
Returning 0.0 because Steiner tree doesn't contain director
INTERP TIME: 28 ms
TOTAL SCORE: 0.0, TIES: 2
--
where from :: director.birth_city; director.nationality : movie.mid (0.61765)
The Past :: movie.title = 'The Past' : cast.role = 'The Past' (1.0)
cast(movie)
--
where from :: director.birth_city; director.nationality : movie.mid (0.61765)
The Past :: movie.title = 'The Past' : movie.title = 'The Past' (1.0)
movie
--
where from :: director.birth_city; director.nationality : movie.mid (0.61765)
The Past :: movie.title = 'The Past' : keyword.keyword = 'the-past' (1.0)
keyword(tags(movie))
QUERY TIME: 16823 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 0] [Ties1: 1] [Ties1/t: 0.33]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 124 ==
Cands for 'name': 81
Pruned candidates for name: 5
 - writer.name (1.0)
 - company.name (1.0)
 - director.name (1.0)
 - producer.name (1.0)
 - actor.name (1.0)
Cands for 'budget': 81
Pruned candidates for budget: 2
 - movie.budget (1.0)
 - tv_series.budget (1.0)
Pruned candidates for latest: 2
 - movie.release_year = max(movie.release_year) (0.6627000000000001)
 - tv_series.release_year = max(tv_series.release_year) (0.6627000000000001)
Pruned candidates for movie: 1
 - movie (1.0)
Pruned candidates for Quentin Tarantino: 4
 - director.name = 'Quentin Tarantino' (1.0)
 - actor.name = 'Quentin Tarantino' (1.0)
 - producer.name = 'Quentin Tarantino' (1.0)
 - writer.name = 'Quentin Tarantino' (1.0)
KW TIME: 457 ms
TOTAL INTERPS COUNT: 80
Returning 0.0 because Steiner tree doesn't contain movie
Returning 0.0 because Steiner tree doesn't contain movie
Returning 0.0 because Steiner tree doesn't contain movie
Returning 0.0 because Steiner tree doesn't contain movie
Returning 0.0 because Steiner tree doesn't contain movie
Returning 0.0 because Steiner tree doesn't contain movie
INTERP TIME: 1098 ms
TOTAL SCORE: 0.7506367565839048, TIES: 0
--
name :: movie.title : actor.name (1.0)
budget :: movie.budget : tv_series.budget (1.0)
latest :: movie.release_year = max(movie.release_year) : movie.release_year = max(movie.release_year) (0.6627000000000001)
Quentin Tarantino :: director.name = 'Quentin Tarantino' : actor.name = 'Quentin Tarantino' (1.0)
actor(cast(tv_series(cast#1(actor#1),copyright(movie))))
QUERY TIME: 1555 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 5)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 48 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Cands for 'Kerry Washington': 85
Pruned candidates for Kerry Washington: 2
 - actor.name = 'Kerry Washington' (1.0)
 - producer.name = 'Kerry Washington' (1.0)
KW TIME: 9514 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 12 ms
TOTAL SCORE: 0.874965516829411, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Kerry Washington :: actor.name = 'Kerry Washington' : actor.name = 'Kerry Washington' (1.0)
actor(cast(movie))
QUERY TIME: 9527 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 82 ==
Pruned candidates for company: 1
 - company.name (1.0)
Cands for 'Mickey Mouse series': 86
Pruned candidates for Mickey Mouse series: 1
 - tv_series.title = 'Mickey Mouse' (0.9581)
KW TIME: 10354 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 3 ms
TOTAL SCORE: 0.829470209851774, TIES: 0
--
company :: company.name : company.name (1.0)
Mickey Mouse series :: tv_series.title = 'Mickey Mouse' : tv_series.title = 'Mickey Mouse' (0.9581)
company(copyright(tv_series))
QUERY TIME: 10357 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 8 ==
Pruned candidates for year born: 4
 - director.birth_year (0.84765)
 - writer.birth_year (0.84765)
 - actor.birth_year (0.84765)
 - producer.birth_year (0.84765)
Cands for 'Benedict Cumberbatch': 85
Pruned candidates for Benedict Cumberbatch: 2
 - producer.name = 'Benedict Cumberbatch' (1.0)
 - actor.name = 'Benedict Cumberbatch' (1.0)
KW TIME: 11310 ms
TOTAL INTERPS COUNT: 8
INTERP TIME: 39 ms
TOTAL SCORE: 0.7920132973733962, TIES: 0
--
year born :: actor.birth_year; producer.birth_year : actor.birth_year (0.84765)
Benedict Cumberbatch :: actor.name = 'Benedict Cumberbatch'; producer.name = 'Benedict Cumberbatch' : actor.name = 'Benedict Cumberbatch' (1.0)
actor
QUERY TIME: 11349 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 77 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for directed by: 1
 - directed_by (1.0)
Cands for 'Asghar Farhadi': 89
Pruned candidates for Asghar Farhadi: 5
 - director.name = 'Asghar Farhadi' (1.0)
 - actor.name = 'Asghar Farhadi' (1.0)
 - producer.name = 'Asghar Farhadi' (1.0)
 - company.name = 'Asghar Farhadi' (1.0)
 - writer.name = 'Asghar Farhadi' (1.0)
Cands for 'Taraneh Alidoosti': 82
Pruned candidates for Taraneh Alidoosti: 1
 - actor.name = 'Taraneh Alidoosti' (1.0)
Pruned candidates for played: 1
 - cast (0.6295)
KW TIME: 19317 ms
TOTAL INTERPS COUNT: 5
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 42 ms
TOTAL SCORE: 0.7674232789339116, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Asghar Farhadi :: director.name = 'Asghar Farhadi' : director.name = 'Asghar Farhadi' (1.0)
Taraneh Alidoosti :: actor.name = 'Taraneh Alidoosti' : actor.name = 'Taraneh Alidoosti' (1.0)
actor(cast(movie,tv_series(directed_by(director))))
QUERY TIME: 19359 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 5)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 97 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Cands for 'Tom Cruise': 114
Pruned candidates for Tom Cruise: 4
 - producer.name = 'Tom Cruise' (1.0)
 - director.name = 'Tom Cruise' (1.0)
 - actor.name = 'Tom Cruise' (1.0)
 - writer.name = 'Tom Cruise' (1.0)
Pruned candidates for acted: 1
 - written_by (0.652)
KW TIME: 11793 ms
TOTAL INTERPS COUNT: 4
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
INTERP TIME: 22 ms
TOTAL SCORE: 0.7155230827231686, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Tom Cruise :: actor.name = 'Tom Cruise' : writer.name = 'Tom Cruise' (1.0)
movie(written_by(writer))
QUERY TIME: 11815 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 6 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Cands for 'Canada': 1227
Pruned candidates for Canada: 10
 - actor.name = 'Canada' (1.0)
 - producer.nationality = 'Canada' (1.0)
 - director.name = 'CANADA' (1.0)
 - actor.nationality = 'Canada' (1.0)
 - producer.name = 'CANADA' (1.0)
 - writer.nationality = 'Canada' (1.0)
 - director.nationality = 'Canada' (1.0)
 - company.name = 'Canada' (1.0)
 - movie.title = 'Canada' (1.0)
 - writer.name = 'CANADA' (1.0)
KW TIME: 16025 ms
TOTAL INTERPS COUNT: 10
INTERP TIME: 47 ms
TOTAL SCORE: 0.913592326849412, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
Canada :: actor.nationality = 'Canada' : actor.nationality = 'Canada' (1.0)
actor
QUERY TIME: 16072 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 54 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for Netflix: 2
 - company.name = 'Netflix' (1.0)
 - keyword.keyword = 'netflix' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 8 ms
TOTAL SCORE: 0.8466252004120147, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Netflix :: company.name = 'Netflix' : keyword.keyword = 'netflix' (1.0)
keyword(tags(movie))
QUERY TIME: 8 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 2)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 111 ==
Cands for 'companies': 65
Pruned candidates for companies: 1
 - count(company.name) (0.9999999)
Cands for 'Camp X Ray': 101
Pruned candidates for Camp X-Ray: 2
 - movie.title = 'Camp X-Ray' (1.0)
 - keyword.keyword = 'camp-x-ray' (1.0)
KW TIME: 12218 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 21 ms
TOTAL SCORE: 0.8279144863119532, TIES: 0
--
companies :: count(company.name) : count(company.name) (0.9999999)
Camp X-Ray :: movie.title = 'Camp X-Ray' : movie.title = 'Camp X-Ray' (1.0)
company(copyright(movie))
QUERY TIME: 12240 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 39 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Cands for 'Alfred Hitchcock': 130
Pruned candidates for Alfred Hitchcock: 4
 - producer.name = 'Alfred Hitchcock' (1.0)
 - director.name = 'Alfred Hitchcock' (1.0)
 - actor.name = 'Alfred Hitchcock' (1.0)
 - writer.name = 'Alfred Hitchcock' (1.0)
Pruned candidates for direct: 1
 - directed_by (0.668)
KW TIME: 12821 ms
TOTAL INTERPS COUNT: 4
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 19 ms
TOTAL SCORE: 0.7654292282594678, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Alfred Hitchcock :: director.name = 'Alfred Hitchcock' : director.name = 'Alfred Hitchcock' (1.0)
directed_by(director,movie)
QUERY TIME: 12840 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 42 ==
Pruned candidates for tv series: 1
 - tv_series.title (1.0)
Cands for 'created by': 16
Pruned candidates for created by: 1
 - made_by (0.77155)
Cands for 'Shonda Rhimes': 85
Pruned candidates for Shonda Rhimes: 4
 - producer.name = 'Shonda Rhimes' (1.0)
 - director.name = 'Shonda Rhimes' (1.0)
 - writer.name = 'Shonda Rhimes' (1.0)
 - actor.name = 'Shonda Rhimes' (1.0)
KW TIME: 10473 ms
TOTAL INTERPS COUNT: 4
Returning 0.0 because Steiner tree doesn't contain made_by
Returning 0.0 because Steiner tree doesn't contain made_by
INTERP TIME: 17 ms
TOTAL SCORE: 0.7437441958432517, TIES: 0
--
tv series :: tv_series.title : tv_series.title (1.0)
Shonda Rhimes :: producer.name = 'Shonda Rhimes' : producer.name = 'Shonda Rhimes' (1.0)
made_by(producer,tv_series)
QUERY TIME: 10490 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 43 ==
Cands for 'acts': 81
Pruned candidates for acts: 1
 - genre.genre (0.5885)
Cands for 'Olivia Pope': 83
Pruned candidates for Olivia Pope: 2
 - cast.role = 'Olivia Pope' (1.0)
 - actor.name = 'Olivia Pope' (1.0)
Pruned candidates for series Scandal: 1
 - tv_series.title = 'Scandal' (0.93405)
KW TIME: 9549 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 11 ms
TOTAL SCORE: 0.6645445446970117, TIES: 0
--
acts :: actor.name : genre.genre (0.5885)
Olivia Pope :: cast.role = 'Olivia Pope' : cast.role = 'Olivia Pope' (1.0)
series Scandal :: tv_series.title = 'Scandal' : tv_series.title = 'Scandal' (0.93405)
cast(tv_series(classification(genre)))
QUERY TIME: 9560 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 93 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Cands for 'Ronald Reagan': 131
Pruned candidates for Ronald Reagan: 2
 - producer.name = 'Ronald Reagan' (1.0)
 - actor.name = 'Ronald Reagan' (1.0)
Pruned candidates for act: 1
 - directed_by (0.61295)
KW TIME: 9866 ms
TOTAL INTERPS COUNT: 2
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 12 ms
TOTAL SCORE: 0.0, TIES: 1
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Ronald Reagan :: actor.name = 'Ronald Reagan' : producer.name = 'Ronald Reagan' (1.0)
made_by(movie,producer)
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Ronald Reagan :: actor.name = 'Ronald Reagan' : actor.name = 'Ronald Reagan' (1.0)
actor(cast(movie))
QUERY TIME: 9878 ms
QUERY > [Ties0: N] [Ties1: Y] [Ties1/t: 0.50]
FRAGMENT (Total: 3)> [Ties0: 1] [Ties1: 2] [Ties1/t: 1.50]
JOIN PATH > [Ties0: N] [Ties1: Y] [Ties1/t: 0.50]
== QUERY ID: 4 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for 2015: 5
 - tags.id = 2015 (0.9999)
 - movie.release_year = 2015 (0.9999)
 - keyword.id = 2015 (0.9999)
 - company.id = 2015 (0.9999)
 - tv_series.release_year = 2015 (0.9999)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 5
INTERP TIME: 19 ms
TOTAL SCORE: 0.9332932923352825, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
2015 :: movie.release_year = 2015 : movie.release_year = 2015 (0.9999)
movie
QUERY TIME: 19 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 7 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Cands for '= 1984': 24
Pruned candidates for born 1984: 4
 - director.birth_year = 1984 (0.8630906673113782)
 - actor.birth_year = 1984 (0.8630906673113782)
 - producer.birth_year = 1984 (0.8630906673113782)
 - writer.birth_year = 1984 (0.8630906673113782)
KW TIME: 138 ms
TOTAL INTERPS COUNT: 4
INTERP TIME: 21 ms
TOTAL SCORE: 0.8676555511783012, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
born 1984 :: actor.birth_year = 1984 : actor.birth_year = 1984 (0.8630906673113782)
actor
QUERY TIME: 159 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 118 ==
Cands for 'movies': 65
Pruned candidates for movies: 1
 - max(count(movie.title)) (0.9999999)
Pruned candidates for Brad Pitt: 2
 - producer.name = 'Brad Pitt' (1.0)
 - actor.name = 'Brad Pitt' (1.0)
Pruned candidates for act: 1
 - directed_by (0.61295)
Pruned candidates for year: 2
 - tv_series.release_year (0.83155)
 - movie.release_year (0.83155)
KW TIME: 117 ms
TOTAL INTERPS COUNT: 4
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 35 ms
TOTAL SCORE: 0.6843861498098194, TIES: 0
--
movies :: max(count(movie.title)) : max(count(movie.title)) (0.9999999)
Brad Pitt :: actor.name = 'Brad Pitt' : producer.name = 'Brad Pitt' (1.0)
year :: movie.release_year : tv_series.release_year (0.83155)
directed_by(movie(made_by(producer)),tv_series)
QUERY TIME: 152 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 4)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 23 ==
Cands for 'director': 81
Pruned candidates for director: 1
 - director.name (1.0)
Cands for 'movie Joy': 634
Pruned candidates for movie Joy: 1
 - movie.title = 'Joy' (1.0)
Pruned candidates for 2015: 5
 - tags.id = 2015 (0.9999)
 - movie.release_year = 2015 (0.9999)
 - keyword.id = 2015 (0.9999)
 - company.id = 2015 (0.9999)
 - tv_series.release_year = 2015 (0.9999)
KW TIME: 13293 ms
TOTAL INTERPS COUNT: 5
INTERP TIME: 42 ms
TOTAL SCORE: 0.8158812408269468, TIES: 0
--
director :: director.name : director.name (1.0)
movie Joy :: movie.title = 'Joy' : movie.title = 'Joy' (1.0)
2015 :: movie.release_year = 2015 : tags.id = 2015 (0.9999)
directed_by(director,movie(tags))
QUERY TIME: 13335 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 125 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Cands for 'Jason Robards': 92
Pruned candidates for Jason Robards: 1
 - actor.name = 'Jason Robards' (1.0)
Cands for 'Woody Strode': 88
Pruned candidates for Woody Strode: 1
 - actor.name = 'Woody Strode' (1.0)
KW TIME: 19377 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 9 ms
TOTAL SCORE: 0.8095874230421546, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Jason Robards :: actor.name = 'Jason Robards' : actor.name = 'Jason Robards' (1.0)
Woody Strode :: actor.name = 'Woody Strode' : actor.name = 'Woody Strode' (1.0)
actor(cast(movie,tv_series(cast#1(actor#1))))
QUERY TIME: 19386 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 18 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Cands for 'Tehran': 241
Pruned candidates for Tehran: 7
 - director.birth_city = 'Tehran' (1.0)
 - keyword.keyword = 'tehran' (1.0)
 - producer.birth_city = 'Tehran' (1.0)
 - writer.birth_city = 'Tehran' (1.0)
 - cast.role = 'Tehran' (1.0)
 - actor.birth_city = 'Tehran' (1.0)
 - movie.title = 'Tehran' (1.0)
KW TIME: 10379 ms
TOTAL INTERPS COUNT: 7
INTERP TIME: 27 ms
TOTAL SCORE: 0.9322875255532286, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
Tehran :: actor.birth_city = 'Tehran' : actor.birth_city = 'Tehran' (1.0)
actor
QUERY TIME: 10406 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 90 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Cands for '= 2012': 24
Pruned candidates for year 2012: 2
 - movie.release_year = 2012 (0.9118480383265624)
 - tv_series.release_year = 2012 (0.9118480383265624)
KW TIME: 1207 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 6 ms
TOTAL SCORE: 0.8972591714686365, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
year 2012 :: movie.release_year = 2012 : movie.release_year = 2012 (0.9118480383265624)
movie
QUERY TIME: 1213 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 1 ==
Cands for 'year': 81
Pruned candidates for year: 2
 - movie.release_year (0.83155)
 - tv_series.release_year (0.83155)
Cands for 'movie Dead Poets Society': 84
Pruned candidates for movie Dead Poets Society: 1
 - movie.title = 'Dead Poets Society' (1.0)
KW TIME: 9993 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 6 ms
TOTAL SCORE: 0.7872499342375177, TIES: 0
--
year :: movie.release_year : movie.release_year (0.83155)
movie Dead Poets Society :: movie.title = 'Dead Poets Society' : movie.title = 'Dead Poets Society' (1.0)
movie
QUERY TIME: 9999 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 68 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for Iraq war: 1
 - keyword.keyword = 'iraq-war' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 4 ms
TOTAL SCORE: 0.8466252004120147, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Iraq war :: keyword.keyword = 'iraq-war' : keyword.keyword = 'iraq-war' (1.0)
keyword(tags(movie))
QUERY TIME: 4 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 24 ==
Pruned candidates for acted: 2
 - directed_by.did (0.63595)
 - director.did (0.63595)
Cands for 'John Nash': 105
Pruned candidates for John Nash: 4
 - actor.name = 'John Nash' (1.0)
 - director.name = 'John Nash' (1.0)
 - writer.name = 'John Nash' (1.0)
 - cast.role = 'John Nash' (1.0)
Cands for 'movie A Beautiful Mind': 109
Pruned candidates for movie A Beautiful Mind: 1
 - movie.title = 'A Beautiful Mind' (1.0)
KW TIME: 18242 ms
TOTAL INTERPS COUNT: 8
INTERP TIME: 47 ms
TOTAL SCORE: 0.7126887161018541, TIES: 0
--
acted :: actor.name : directed_by.did (0.63595)
John Nash :: cast.role = 'John Nash' : cast.role = 'John Nash' (1.0)
movie A Beautiful Mind :: movie.title = 'A Beautiful Mind' : movie.title = 'A Beautiful Mind' (1.0)
cast(movie(directed_by))
QUERY TIME: 18289 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
==== FOLD RESULTS ====
32,21,22,21.500,19,20,19.500,76,60,62,60.833
CUMULATIVE TOTAL TIME: 261541 ms
CUMULATIVE KW TIME: 258775 ms
CUMULATIVE I TIME: 2760 ms
CUMULATIVE INTERP COUNT: 283
11:30  INFO: ===== FOLD 2 =====
Original log size: 95
Trimming log to 100.0%...
Final log size: 95
11:30  INFO: ===== Parsing Results =====
11:30  INFO: Total Queries: 95
11:30  INFO: Correctly Parsed: 95/95

Loading cache from: <data/imdb/imdb.cands.cache>
Cache loaded!
== QUERY ID: 26 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for Kate Winslet: 1
 - actor.name = 'Kate Winslet' (1.0)
KW TIME: 1 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 5 ms
TOTAL SCORE: 0.8798220290635786, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Kate Winslet :: actor.name = 'Kate Winslet' : actor.name = 'Kate Winslet' (1.0)
actor(cast(movie))
QUERY TIME: 6 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 128 ==
Pruned candidates for latest: 2
 - movie.release_year = max(movie.release_year) (0.6627000000000001)
 - tv_series.release_year = max(tv_series.release_year) (0.6627000000000001)
Pruned candidates for movie: 1
 - movie.title (1.0)
Cands for 'Gabriele Ferzetti': 83
Pruned candidates for Gabriele Ferzetti: 1
 - actor.name = 'Gabriele Ferzetti' (1.0)
Pruned candidates for acted: 1
 - written_by (0.652)
KW TIME: 8344 ms
TOTAL INTERPS COUNT: 2
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
INTERP TIME: 13 ms
TOTAL SCORE: 0.0, TIES: 1
--
latest :: movie.release_year = max(movie.release_year) : movie.release_year = max(movie.release_year) (0.6627000000000001)
movie :: movie.title : movie.title (1.0)
Gabriele Ferzetti :: actor.name = 'Gabriele Ferzetti' : actor.name = 'Gabriele Ferzetti' (1.0)
actor(cast(movie))
--
latest :: movie.release_year = max(movie.release_year) : tv_series.release_year = max(tv_series.release_year) (0.6627000000000001)
movie :: movie.title : movie.title (1.0)
Gabriele Ferzetti :: actor.name = 'Gabriele Ferzetti' : actor.name = 'Gabriele Ferzetti' (1.0)
actor(cast(movie,tv_series))
QUERY TIME: 8357 ms
QUERY > [Ties0: N] [Ties1: Y] [Ties1/t: 0.50]
FRAGMENT (Total: 4)> [Ties0: 2] [Ties1: 3] [Ties1/t: 2.50]
JOIN PATH > [Ties0: N] [Ties1: Y] [Ties1/t: 0.50]
== QUERY ID: 70 ==
Pruned candidates for name: 5
 - writer.name (1.0)
 - company.name (1.0)
 - director.name (1.0)
 - producer.name (1.0)
 - actor.name (1.0)
Cands for 'actors': 16
Pruned candidates for actors: 1
 - actor (0.9999999)
Pruned candidates for Afghanistan: 7
 - actor.birth_city = 'Afghanistan' (1.0)
 - writer.nationality = 'Afghanistan' (1.0)
 - movie.title = 'Afghanistan' (1.0)
 - actor.nationality = 'Afghanistan' (1.0)
 - producer.nationality = 'Afghanistan' (1.0)
 - keyword.keyword = 'afghanistan' (1.0)
 - director.nationality = 'Afghanistan' (1.0)
KW TIME: 17 ms
TOTAL INTERPS COUNT: 35
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
INTERP TIME: 173 ms
TOTAL SCORE: 0.952400125733561, TIES: 0
--
name :: actor.name : actor.name (1.0)
Afghanistan :: actor.nationality = 'Afghanistan' : actor.birth_city = 'Afghanistan' (1.0)
actor
QUERY TIME: 190 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 107 ==
Pruned candidates for female: 7
 - producer.gender = 'female' (1.0)
 - keyword.keyword = 'female' (1.0)
 - writer.gender = 'female' (1.0)
 - actor.gender = 'female' (1.0)
 - director.gender = 'female' (1.0)
 - movie.title = 'Female' (1.0)
 - cast.role = 'Female' (1.0)
Pruned candidates for actors: 1
 - count(actor.name) (0.9999999)
Pruned candidates for New York City: 7
 - actor.birth_city = 'New York City' (1.0)
 - writer.birth_city = 'New York City' (1.0)
 - producer.birth_city = 'New York City' (1.0)
 - movie.title = 'New York City' (1.0)
 - director.birth_city = 'New York City' (1.0)
 - keyword.keyword = 'new-york-city' (1.0)
 - cast.role = 'New York City' (1.0)
Cands for '> 1980': 24
Pruned candidates for after 1980: 1
 - movie.mid > 1980 (0.7953217839340251)
KW TIME: 154 ms
TOTAL INTERPS COUNT: 49
INTERP TIME: 356 ms
TOTAL SCORE: 0.7810030710991324, TIES: 1
--
female :: actor.gender = 'female' : cast.role = 'Female' (1.0)
actors :: count(actor.name) : count(actor.name) (0.9999999)
New York City :: actor.birth_city = 'New York City' : movie.title = 'New York City' (1.0)
after 1980 :: actor.birth_year > 1980 : movie.mid > 1980 (0.7953217839340251)
actor(cast(movie))
--
female :: actor.gender = 'female' : movie.title = 'Female' (1.0)
actors :: count(actor.name) : count(actor.name) (0.9999999)
New York City :: actor.birth_city = 'New York City' : cast.role = 'New York City' (1.0)
after 1980 :: actor.birth_year > 1980 : movie.mid > 1980 (0.7953217839340251)
actor(cast(movie))
QUERY TIME: 510 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 4)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 66 ==
Pruned candidates for actor: 1
 - actor.name (1.0)
Cands for 'Alan Turing': 113
Pruned candidates for Alan Turing: 1
 - cast.role = 'Alan Turing' (1.0)
Cands for 'The Imitation Game': 84
Pruned candidates for The Imitation Game: 1
 - movie.title = 'The Imitation Game' (1.0)
KW TIME: 17887 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 7 ms
TOTAL SCORE: 0.8596821182733879, TIES: 0
--
actor :: actor.name : actor.name (1.0)
Alan Turing :: cast.role = 'Alan Turing' : cast.role = 'Alan Turing' (1.0)
The Imitation Game :: movie.title = 'The Imitation Game' : movie.title = 'The Imitation Game' (1.0)
actor(cast(movie))
QUERY TIME: 17895 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 88 ==
Pruned candidates for actors: 1
 - count(actor.name) (0.9999999)
Cands for 'movie Grumpier Old Men': 84
Pruned candidates for movie Grumpier Old Men: 1
 - movie.title = 'Grumpier Old Men' (1.0)
KW TIME: 10063 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 3 ms
TOTAL SCORE: 0.8597613904667187, TIES: 0
--
actors :: count(actor.name) : count(actor.name) (0.9999999)
movie Grumpier Old Men :: movie.title = 'Grumpier Old Men' : movie.title = 'Grumpier Old Men' (1.0)
actor(cast(movie))
QUERY TIME: 10066 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 13 ==
Cands for 'city born': 81
Pruned candidates for city born: 4
 - actor.birth_city (0.8615999999999999)
 - producer.birth_city (0.8615999999999999)
 - director.birth_city (0.8615999999999999)
 - writer.birth_city (0.8615999999999999)
Pruned candidates for Kevin Spacey: 4
 - producer.name = 'Kevin Spacey' (1.0)
 - writer.name = 'Kevin Spacey' (1.0)
 - director.name = 'Kevin Spacey' (1.0)
 - actor.name = 'Kevin Spacey' (1.0)
KW TIME: 119 ms
TOTAL INTERPS COUNT: 16
INTERP TIME: 81 ms
TOTAL SCORE: 0.7625792886958268, TIES: 3
--
city born :: actor.birth_city; producer.birth_city; director.birth_city; writer.birth_city : producer.birth_city (0.8615999999999999)
Kevin Spacey :: actor.name = 'Kevin Spacey'; producer.name = 'Kevin Spacey'; director.name = 'Kevin Spacey'; writer.name = 'Kevin Spacey' : producer.name = 'Kevin Spacey' (1.0)
producer
--
city born :: actor.birth_city; producer.birth_city; director.birth_city; writer.birth_city : writer.birth_city (0.8615999999999999)
Kevin Spacey :: actor.name = 'Kevin Spacey'; producer.name = 'Kevin Spacey'; director.name = 'Kevin Spacey'; writer.name = 'Kevin Spacey' : writer.name = 'Kevin Spacey' (1.0)
writer
--
city born :: actor.birth_city; producer.birth_city; director.birth_city; writer.birth_city : director.birth_city (0.8615999999999999)
Kevin Spacey :: actor.name = 'Kevin Spacey'; producer.name = 'Kevin Spacey'; director.name = 'Kevin Spacey'; writer.name = 'Kevin Spacey' : director.name = 'Kevin Spacey' (1.0)
director
--
city born :: actor.birth_city; producer.birth_city; director.birth_city; writer.birth_city : actor.birth_city (0.8615999999999999)
Kevin Spacey :: actor.name = 'Kevin Spacey'; producer.name = 'Kevin Spacey'; director.name = 'Kevin Spacey'; writer.name = 'Kevin Spacey' : actor.name = 'Kevin Spacey' (1.0)
actor
QUERY TIME: 201 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 9 ==
Cands for 'nationality': 81
Pruned candidates for nationality: 4
 - writer.nationality (1.0)
 - producer.nationality (1.0)
 - actor.nationality (1.0)
 - director.nationality (1.0)
Cands for 'actor Christoph Waltz': 83
Pruned candidates for actor Christoph Waltz: 1
 - actor.name = 'Christoph Waltz' (1.0)
KW TIME: 10470 ms
TOTAL INTERPS COUNT: 4
INTERP TIME: 14 ms
TOTAL SCORE: 0.8200000000000001, TIES: 0
--
nationality :: actor.nationality : actor.nationality (1.0)
actor Christoph Waltz :: actor.name = 'Christoph Waltz' : actor.name = 'Christoph Waltz' (1.0)
actor
QUERY TIME: 10485 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 80 ==
Cands for 'genres': 81
Pruned candidates for genres: 1
 - genre.genre (0.9999999)
Pruned candidates for movies: 1
 - movie (0.9999999)
Pruned candidates for directed by: 1
 - directed_by (1.0)
Pruned candidates for Asghar Farhadi: 5
 - director.name = 'Asghar Farhadi' (1.0)
 - actor.name = 'Asghar Farhadi' (1.0)
 - producer.name = 'Asghar Farhadi' (1.0)
 - company.name = 'Asghar Farhadi' (1.0)
 - writer.name = 'Asghar Farhadi' (1.0)
KW TIME: 123 ms
TOTAL INTERPS COUNT: 5
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 28 ms
TOTAL SCORE: 0.8070503353238944, TIES: 0
--
genres :: genre.genre : genre.genre (0.9999999)
Asghar Farhadi :: director.name = 'Asghar Farhadi' : director.name = 'Asghar Farhadi' (1.0)
classification(genre,movie(directed_by(director)))
QUERY TIME: 151 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 4)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 49 ==
Pruned candidates for directors: 1
 - director.name (0.9999999)
Pruned candidates for movies: 1
 - movie (0.9999999)
Pruned candidates for Kate Winslet: 1
 - actor.name = 'Kate Winslet' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 4 ms
TOTAL SCORE: 0.8074764611218294, TIES: 0
--
directors :: director.name : director.name (0.9999999)
Kate Winslet :: actor.name = 'Kate Winslet' : actor.name = 'Kate Winslet' (1.0)
actor(cast(movie(directed_by(director))))
QUERY TIME: 4 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 31 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Cands for 'directors': 16
Pruned candidates for directors: 1
 - director (0.9999999)
Pruned candidates for Los Angeles: 5
 - writer.birth_city = 'Los Angeles' (1.0)
 - movie.title = 'Los Angeles' (1.0)
 - director.birth_city = 'Los Angeles' (1.0)
 - actor.birth_city = 'Los Angeles' (1.0)
 - producer.birth_city = 'Los Angeles' (1.0)
KW TIME: 108 ms
TOTAL INTERPS COUNT: 5
Returning 0.0 because Steiner tree doesn't contain director
Returning 0.0 because Steiner tree doesn't contain director
Returning 0.0 because Steiner tree doesn't contain director
INTERP TIME: 32 ms
TOTAL SCORE: 0.8182178041666666, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Los Angeles :: director.birth_city = 'Los Angeles' : movie.title = 'Los Angeles' (1.0)
directed_by(director(directed_by#1(movie#1)),movie)
QUERY TIME: 141 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 63 ==
Pruned candidates for female: 7
 - producer.gender = 'female' (1.0)
 - keyword.keyword = 'female' (1.0)
 - writer.gender = 'female' (1.0)
 - actor.gender = 'female' (1.0)
 - director.gender = 'female' (1.0)
 - movie.title = 'Female' (1.0)
 - cast.role = 'Female' (1.0)
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Pruned candidates for New York City: 7
 - actor.birth_city = 'New York City' (1.0)
 - writer.birth_city = 'New York City' (1.0)
 - producer.birth_city = 'New York City' (1.0)
 - movie.title = 'New York City' (1.0)
 - director.birth_city = 'New York City' (1.0)
 - keyword.keyword = 'new-york-city' (1.0)
 - cast.role = 'New York City' (1.0)
Pruned candidates for after 1980: 1
 - movie.mid > 1980 (0.7953217839340251)
KW TIME: 1 ms
TOTAL INTERPS COUNT: 49
INTERP TIME: 364 ms
TOTAL SCORE: 0.7810030710991324, TIES: 1
--
female :: actor.gender = 'female' : cast.role = 'Female' (1.0)
actors :: actor.name : actor.name (0.9999999)
New York City :: actor.birth_city = 'New York City' : movie.title = 'New York City' (1.0)
after 1980 :: actor.birth_year > 1980 : movie.mid > 1980 (0.7953217839340251)
actor(cast(movie))
--
female :: actor.gender = 'female' : movie.title = 'Female' (1.0)
actors :: actor.name : actor.name (0.9999999)
New York City :: actor.birth_city = 'New York City' : cast.role = 'New York City' (1.0)
after 1980 :: actor.birth_year > 1980 : movie.mid > 1980 (0.7953217839340251)
actor(cast(movie))
QUERY TIME: 365 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 4)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 120 ==
Pruned candidates for acted: 2
 - directed_by.did (0.63595)
 - director.did (0.63595)
Cands for 'movies': 10
Pruned candidates for movies: 1
 - count(movie.title) = max(count(movie.title)) (0.9999999)
Pruned candidates for directed by: 1
 - directed_by (1.0)
Cands for 'Jim Jarmusch': 90
Pruned candidates for Jim Jarmusch: 4
 - writer.name = 'Jim Jarmusch' (1.0)
 - producer.name = 'Jim Jarmusch' (1.0)
 - actor.name = 'Jim Jarmusch' (1.0)
 - director.name = 'Jim Jarmusch' (1.0)
KW TIME: 9695 ms
TOTAL INTERPS COUNT: 8
INTERP TIME: 50 ms
TOTAL SCORE: 0.7246317764180421, TIES: 1
--
acted :: actor.name : directed_by.did (0.63595)
movies :: count(movie.title) = max(count(movie.title)) : count(movie.title) = max(count(movie.title)) (0.9999999)
Jim Jarmusch :: director.name = 'Jim Jarmusch' : director.name = 'Jim Jarmusch' (1.0)
directed_by(director,movie)
--
acted :: actor.name : director.did (0.63595)
movies :: count(movie.title) = max(count(movie.title)) : count(movie.title) = max(count(movie.title)) (0.9999999)
Jim Jarmusch :: director.name = 'Jim Jarmusch' : director.name = 'Jim Jarmusch' (1.0)
directed_by(director,movie)
QUERY TIME: 9745 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 4)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 20 ==
Pruned candidates for director: 1
 - director.name (1.0)
Cands for 'movie Catch Me If You Can': 112
Pruned candidates for movie Catch Me If You Can: 1
 - movie.title = 'Catch Me If You Can' (1.0)
KW TIME: 9552 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 4 ms
TOTAL SCORE: 0.840104757927104, TIES: 0
--
director :: director.name : director.name (1.0)
movie Catch Me If You Can :: movie.title = 'Catch Me If You Can' : movie.title = 'Catch Me If You Can' (1.0)
directed_by(director,movie)
QUERY TIME: 9556 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 28 ==
Cands for 'comedies': 3468
Pruned candidates for comedies: 4
 - cast.role = 'Comedy',cast.role (0.9999999)
 - movie.title = 'Comedy',movie.title (0.9999999)
 - genre.genre = 'Comedy',movie.title (0.9999999)
 - cast.role = 'Comediant',cast.role (0.9999999)
Cands for '= 2015': 24
Pruned candidates for year 2015: 2
 - tv_series.release_year = 2015 (0.9118480383265624)
 - movie.release_year = 2015 (0.9118480383265624)
KW TIME: 17840 ms
TOTAL INTERPS COUNT: 8
INTERP TIME: 40 ms
TOTAL SCORE: 0.8324257128558813, TIES: 0
--
comedies :: genre.genre = 'Comedy',movie.title : movie.title = 'Comedy',movie.title (0.9999999)
year 2015 :: movie.release_year = 2015 : movie.release_year = 2015 (0.9118480383265624)
movie
QUERY TIME: 17880 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 2)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 89 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Pruned candidates for Alfred Hitchcock: 4
 - producer.name = 'Alfred Hitchcock' (1.0)
 - director.name = 'Alfred Hitchcock' (1.0)
 - actor.name = 'Alfred Hitchcock' (1.0)
 - writer.name = 'Alfred Hitchcock' (1.0)
Pruned candidates for direct: 1
 - directed_by (0.668)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 4
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 23 ms
TOTAL SCORE: 0.765102425390927, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Alfred Hitchcock :: director.name = 'Alfred Hitchcock' : director.name = 'Alfred Hitchcock' (1.0)
directed_by(director,movie)
QUERY TIME: 24 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 62 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Cands for 'Italy': 3508
Pruned candidates for Italy: 4
 - director.nationality = 'Italy' (1.0)
 - actor.nationality = 'Italy' (1.0)
 - producer.nationality = 'Italy' (1.0)
 - writer.nationality = 'Italy' (1.0)
Cands for '> 1980': 24
Pruned candidates for born after 1980: 4
 - writer.birth_year > 1980 (0.8680003744238824)
 - director.birth_year > 1980 (0.8680003744238824)
 - producer.birth_year > 1980 (0.8680003744238824)
 - actor.birth_year > 1980 (0.8680003744238824)
KW TIME: 15587 ms
TOTAL INTERPS COUNT: 16
INTERP TIME: 94 ms
TOTAL SCORE: 0.7831266319320701, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
Italy :: actor.nationality = 'Italy' : actor.nationality = 'Italy' (1.0)
born after 1980 :: actor.birth_year > 1980 : actor.birth_year > 1980 (0.8680003744238824)
actor
QUERY TIME: 15681 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 123 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Pruned candidates for played: 1
 - cast (0.6295)
Pruned candidates for latest: 2
 - movie.release_year = max(movie.release_year) (0.6627000000000001)
 - tv_series.release_year = max(tv_series.release_year) (0.6627000000000001)
Pruned candidates for movie: 1
 - movie (1.0)
Pruned candidates for Quentin Tarantino: 4
 - director.name = 'Quentin Tarantino' (1.0)
 - actor.name = 'Quentin Tarantino' (1.0)
 - producer.name = 'Quentin Tarantino' (1.0)
 - writer.name = 'Quentin Tarantino' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 8
Returning 0.0 because Steiner tree doesn't contain movie
Returning 0.0 because Steiner tree doesn't contain movie
Returning 0.0 because Steiner tree doesn't contain movie
INTERP TIME: 85 ms
TOTAL SCORE: 0.6812194762457676, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
latest :: movie.release_year = max(movie.release_year) : movie.release_year = max(movie.release_year) (0.6627000000000001)
Quentin Tarantino :: director.name = 'Quentin Tarantino' : actor.name = 'Quentin Tarantino' (1.0)
actor(cast(movie,tv_series(cast#1(actor#1))))
QUERY TIME: 86 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 5)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 105 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Cands for 'Steven Spielberg': 104
Pruned candidates for Steven Spielberg: 4
 - writer.name = 'Steven Spielberg' (1.0)
 - director.name = 'Steven Spielberg' (1.0)
 - actor.name = 'Steven Spielberg' (1.0)
 - producer.name = 'Steven Spielberg' (1.0)
Pruned candidates for direct: 1
 - directed_by (0.668)
KW TIME: 9554 ms
TOTAL INTERPS COUNT: 4
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 19 ms
TOTAL SCORE: 0.765102425390927, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Steven Spielberg :: director.name = 'Steven Spielberg' : director.name = 'Steven Spielberg' (1.0)
directed_by(director,movie)
QUERY TIME: 9573 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 108 ==
Pruned candidates for actors: 1
 - count(actor.name) (0.9999999)
Pruned candidates for movie Saving Private Ryan: 1
 - movie.title = 'Saving Private Ryan' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 3 ms
TOTAL SCORE: 0.8597613904667187, TIES: 0
--
actors :: count(actor.name) : count(actor.name) (0.9999999)
movie Saving Private Ryan :: movie.title = 'Saving Private Ryan' : movie.title = 'Saving Private Ryan' (1.0)
actor(cast(movie))
QUERY TIME: 3 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 12 ==
Cands for 'birthplace': 81
Pruned candidates for birthplace: 4
 - actor.birth_city (0.7039)
 - writer.birth_city (0.7039)
 - producer.birth_city (0.7039)
 - director.birth_city (0.7039)
Pruned candidates for Kevin Spacey: 4
 - producer.name = 'Kevin Spacey' (1.0)
 - writer.name = 'Kevin Spacey' (1.0)
 - director.name = 'Kevin Spacey' (1.0)
 - actor.name = 'Kevin Spacey' (1.0)
KW TIME: 226 ms
TOTAL INTERPS COUNT: 16
INTERP TIME: 88 ms
TOTAL SCORE: 0.6911899880063767, TIES: 3
--
birthplace :: actor.birth_city; producer.birth_city; director.birth_city; writer.birth_city : producer.birth_city (0.7039)
Kevin Spacey :: actor.name = 'Kevin Spacey'; producer.name = 'Kevin Spacey'; director.name = 'Kevin Spacey'; writer.name = 'Kevin Spacey' : producer.name = 'Kevin Spacey' (1.0)
producer
--
birthplace :: actor.birth_city; producer.birth_city; director.birth_city; writer.birth_city : writer.birth_city (0.7039)
Kevin Spacey :: actor.name = 'Kevin Spacey'; producer.name = 'Kevin Spacey'; director.name = 'Kevin Spacey'; writer.name = 'Kevin Spacey' : writer.name = 'Kevin Spacey' (1.0)
writer
--
birthplace :: actor.birth_city; producer.birth_city; director.birth_city; writer.birth_city : director.birth_city (0.7039)
Kevin Spacey :: actor.name = 'Kevin Spacey'; producer.name = 'Kevin Spacey'; director.name = 'Kevin Spacey'; writer.name = 'Kevin Spacey' : director.name = 'Kevin Spacey' (1.0)
director
--
birthplace :: actor.birth_city; producer.birth_city; director.birth_city; writer.birth_city : actor.birth_city (0.7039)
Kevin Spacey :: actor.name = 'Kevin Spacey'; producer.name = 'Kevin Spacey'; director.name = 'Kevin Spacey'; writer.name = 'Kevin Spacey' : actor.name = 'Kevin Spacey' (1.0)
actor
QUERY TIME: 315 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 110 ==
Pruned candidates for actors: 1
 - count(actor.name) (0.9999999)
Cands for 'Iran': 760
Pruned candidates for Iran: 6
 - writer.nationality = 'Iran' (1.0)
 - actor.name = 'Iran' (1.0)
 - actor.nationality = 'Iran' (1.0)
 - director.nationality = 'Iran' (1.0)
 - producer.nationality = 'Iran' (1.0)
 - movie.title = 'Iran' (1.0)
Pruned candidates for played: 1
 - cast (0.6295)
Pruned candidates for Jim Jarmusch: 4
 - writer.name = 'Jim Jarmusch' (1.0)
 - producer.name = 'Jim Jarmusch' (1.0)
 - actor.name = 'Jim Jarmusch' (1.0)
 - director.name = 'Jim Jarmusch' (1.0)
Pruned candidates for movies: 1
 - movie (0.9999999)
KW TIME: 11832 ms
TOTAL INTERPS COUNT: 24
Returning 0.0 because Steiner tree doesn't contain movie
Returning 0.0 because Steiner tree doesn't contain movie
Returning 0.0 because Steiner tree doesn't contain movie
Returning 0.0 because Steiner tree doesn't contain movie
Returning 0.0 because Steiner tree doesn't contain movie
Returning 0.0 because Steiner tree doesn't contain movie
INTERP TIME: 212 ms
TOTAL SCORE: 0.7388260735907993, TIES: 0
--
actors :: count(actor.name) : count(actor.name) (0.9999999)
Iran :: actor.nationality = 'Iran' : movie.title = 'Iran' (1.0)
Jim Jarmusch :: director.name = 'Jim Jarmusch'; writer.name = 'Jim Jarmusch'; producer.name = 'Jim Jarmusch' : actor.name = 'Jim Jarmusch' (1.0)
actor(cast(movie,tv_series(cast#1(actor#1))))
QUERY TIME: 12045 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 5)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 3 ==
Pruned candidates for nationality: 4
 - writer.nationality (1.0)
 - producer.nationality (1.0)
 - actor.nationality (1.0)
 - director.nationality (1.0)
Cands for 'actress Ellen Page': 81
Pruned candidates for actress Ellen Page: 1
 - tv_series.num_of_episodes (0.6619495)
KW TIME: 9569 ms
TOTAL INTERPS COUNT: 4
INTERP TIME: 14 ms
TOTAL SCORE: 0.6611492304154742, TIES: 0
--
nationality :: actor.nationality : actor.nationality (1.0)
actress Ellen Page :: actor.name = 'Ellen Page' : tv_series.num_of_episodes (0.6619495)
actor(cast(tv_series))
QUERY TIME: 9583 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 2)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 2 ==
Pruned candidates for year born: 4
 - director.birth_year (0.84765)
 - writer.birth_year (0.84765)
 - actor.birth_year (0.84765)
 - producer.birth_year (0.84765)
Cands for 'Ellen Page': 88
Pruned candidates for Ellen Page: 2
 - actor.name = 'Ellen Page' (1.0)
 - producer.name = 'Ellen Page' (1.0)
KW TIME: 9075 ms
TOTAL INTERPS COUNT: 8
INTERP TIME: 30 ms
TOTAL SCORE: 0.8275150429803416, TIES: 0
--
year born :: actor.birth_year : actor.birth_year (0.84765)
Ellen Page :: actor.name = 'Ellen Page' : actor.name = 'Ellen Page' (1.0)
actor
QUERY TIME: 9106 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 76 ==
Cands for 'films': 81
Pruned candidates for films: 1
 - movie.title (0.86815)
Cands for 'Rowan Atkinson': 94
Pruned candidates for Rowan Atkinson: 4
 - writer.name = 'Rowan Atkinson' (1.0)
 - director.name = 'Rowan Atkinson' (1.0)
 - actor.name = 'Rowan Atkinson' (1.0)
 - producer.name = 'Rowan Atkinson' (1.0)
Cands for 'Mr Bean': 1274
Pruned candidates for Mr. Bean: 1
 - keyword.keyword = 'mr-bean' (1.0)
KW TIME: 20420 ms
TOTAL INTERPS COUNT: 4
INTERP TIME: 23 ms
TOTAL SCORE: 0.770570632710794, TIES: 0
--
films :: movie.title : movie.title (0.86815)
Rowan Atkinson :: actor.name = 'Rowan Atkinson' : actor.name = 'Rowan Atkinson' (1.0)
Mr. Bean :: cast.role = 'Mr. Bean' : keyword.keyword = 'mr-bean' (1.0)
actor(cast(movie(tags(keyword))))
QUERY TIME: 20443 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 106 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Pruned candidates for Netflix: 2
 - company.name = 'Netflix' (1.0)
 - keyword.keyword = 'netflix' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 8 ms
TOTAL SCORE: 0.8480384061415251, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Netflix :: company.name = 'Netflix' : keyword.keyword = 'netflix' (1.0)
keyword(tags(movie))
QUERY TIME: 8 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 2)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 45 ==
Pruned candidates for directed: 1
 - director.name (0.6349)
Cands for 'movie Inglourious Basterds': 84
Pruned candidates for movie Inglourious Basterds: 1
 - movie.title = 'Inglourious Basterds' (1.0)
KW TIME: 9489 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 6 ms
TOTAL SCORE: 0.6775496575066676, TIES: 0
--
directed :: director.name : director.name (0.6349)
movie Inglourious Basterds :: movie.title = 'Inglourious Basterds' : movie.title = 'Inglourious Basterds' (1.0)
directed_by(director,movie)
QUERY TIME: 9496 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 73 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Pruned candidates for played: 1
 - cast (0.6295)
Cands for 'movie Camp X Ray': 84
Pruned candidates for movie Camp X-Ray: 1
 - movie.title = 'Camp X-Ray' (1.0)
KW TIME: 9104 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 3 ms
TOTAL SCORE: 0.7453894390912501, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
movie Camp X-Ray :: movie.title = 'Camp X-Ray' : movie.title = 'Camp X-Ray' (1.0)
actor(cast(movie))
QUERY TIME: 9107 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 22 ==
Cands for 'genre': 81
Pruned candidates for genre: 1
 - genre.genre (1.0)
Cands for 'movie Jurassic Park': 120
Pruned candidates for movie Jurassic Park: 1
 - movie.title = 'Jurassic Park' (1.0)
KW TIME: 9471 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 3 ms
TOTAL SCORE: 0.8097100831245523, TIES: 0
--
genre :: genre.genre : genre.genre (1.0)
movie Jurassic Park :: movie.title = 'Jurassic Park' : movie.title = 'Jurassic Park' (1.0)
classification(genre,movie)
QUERY TIME: 9474 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 55 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for Kevin Spacey: 4
 - producer.name = 'Kevin Spacey' (1.0)
 - writer.name = 'Kevin Spacey' (1.0)
 - director.name = 'Kevin Spacey' (1.0)
 - actor.name = 'Kevin Spacey' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 4
INTERP TIME: 14 ms
TOTAL SCORE: 0.8798220290635786, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Kevin Spacey :: actor.name = 'Kevin Spacey' : actor.name = 'Kevin Spacey' (1.0)
actor(cast(movie))
QUERY TIME: 14 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 19 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for directed by: 1
 - directed_by (1.0)
Pruned candidates for Steven Spielberg: 4
 - writer.name = 'Steven Spielberg' (1.0)
 - director.name = 'Steven Spielberg' (1.0)
 - actor.name = 'Steven Spielberg' (1.0)
 - producer.name = 'Steven Spielberg' (1.0)
Cands for '> 2006': 24
Pruned candidates for after 2006: 1
 - movie.mid > 2006 (0.7953217839340251)
KW TIME: 643 ms
TOTAL INTERPS COUNT: 4
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 26 ms
TOTAL SCORE: 0.7745006195964245, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Steven Spielberg :: director.name = 'Steven Spielberg' : director.name = 'Steven Spielberg' (1.0)
after 2006 :: movie.release_year > 2006 : movie.mid > 2006 (0.7953217839340251)
directed_by(director,movie)
QUERY TIME: 669 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 4)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 17 ==
Pruned candidates for budget: 2
 - movie.budget (1.0)
 - tv_series.budget (1.0)
Cands for 'Finding Nemo': 86
Pruned candidates for Finding Nemo: 1
 - movie.title = 'Finding Nemo' (1.0)
KW TIME: 9988 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 8 ms
TOTAL SCORE: 0.8632455532033676, TIES: 0
--
budget :: movie.budget : movie.budget (1.0)
Finding Nemo :: movie.title = 'Finding Nemo' : movie.title = 'Finding Nemo' (1.0)
movie
QUERY TIME: 9996 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
==== FOLD RESULTS ====
32,19,20,19.500,19,20,19.500,76,58,59,58.500
CUMULATIVE TOTAL TIME: 201175 ms
CUMULATIVE KW TIME: 199332 ms
CUMULATIVE I TIME: 1833 ms
CUMULATIVE INTERP COUNT: 290
14:51  INFO: ===== FOLD 3 =====
Original log size: 95
Trimming log to 100.0%...
Final log size: 95
14:51  INFO: ===== Parsing Results =====
14:51  INFO: Total Queries: 95
14:51  INFO: Correctly Parsed: 95/95

Loading cache from: <data/imdb/imdb.cands.cache>
Cache loaded!
== QUERY ID: 56 ==
Pruned candidates for director: 1
 - director.name (1.0)
Cands for 'series House of Cards': 83
Pruned candidates for series House of Cards: 1
 - tv_series.title = 'House of Cards' (0.940149)
Pruned candidates for Netflix: 2
 - company.name = 'Netflix' (1.0)
 - keyword.keyword = 'netflix' (1.0)
KW TIME: 10006 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 11 ms
TOTAL SCORE: 0.790880723352647, TIES: 0
--
director :: director.name : director.name (1.0)
series House of Cards :: tv_series.title = 'House of Cards' : tv_series.title = 'House of Cards' (0.940149)
Netflix :: company.name = 'Netflix' : keyword.keyword = 'netflix' (1.0)
directed_by(director,tv_series(tags(keyword)))
QUERY TIME: 10018 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 74 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Pruned candidates for Canada: 10
 - actor.name = 'Canada' (1.0)
 - producer.nationality = 'Canada' (1.0)
 - director.name = 'CANADA' (1.0)
 - actor.nationality = 'Canada' (1.0)
 - producer.name = 'CANADA' (1.0)
 - writer.nationality = 'Canada' (1.0)
 - director.nationality = 'Canada' (1.0)
 - company.name = 'Canada' (1.0)
 - movie.title = 'Canada' (1.0)
 - writer.name = 'CANADA' (1.0)
Cands for 'James Bond movies': 136
Pruned candidates for James Bond movies: 1
 - movie.title = 'James Bond' (0.94335)
KW TIME: 11238 ms
TOTAL INTERPS COUNT: 10
INTERP TIME: 96 ms
TOTAL SCORE: 0.8340667622538125, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
Canada :: actor.nationality = 'Canada' : actor.nationality = 'Canada' (1.0)
James Bond movies :: movie.title = 'James Bond' : movie.title = 'James Bond' (0.94335)
actor(cast(movie))
QUERY TIME: 11334 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 85 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for nuclear weapons: 1
 - keyword.keyword = 'nuclear-weapons' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 7 ms
TOTAL SCORE: 0.8373543283818805, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
nuclear weapons :: keyword.keyword = 'nuclear-weapons' : keyword.keyword = 'nuclear-weapons' (1.0)
keyword(tags(movie))
QUERY TIME: 8 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 65 ==
Pruned candidates for acts: 1
 - genre.genre (0.5885)
Pruned candidates for Alan Turing: 1
 - cast.role = 'Alan Turing' (1.0)
Cands for 'movie The Imitation Game': 83
Pruned candidates for movie The Imitation Game: 1
 - movie.title = 'The Imitation Game' (1.0)
KW TIME: 10276 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 6 ms
TOTAL SCORE: 0.6795660759938564, TIES: 0
--
acts :: actor.name : genre.genre (0.5885)
Alan Turing :: cast.role = 'Alan Turing' : cast.role = 'Alan Turing' (1.0)
movie The Imitation Game :: movie.title = 'The Imitation Game' : movie.title = 'The Imitation Game' (1.0)
cast(movie(classification(genre)))
QUERY TIME: 10282 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 99 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Cands for 'Persians': 312
Pruned candidates for Persians: 2
 - cast.role = 'Persian' (0.9999999)
 - keyword.keyword = 'persian' (0.9999999)
Cands for '> 1990': 24
Pruned candidates for released after 1990: 2
 - movie.release_year > 1990 (0.882537310826007)
 - tv_series.release_year > 1990 (0.882537310826007)
KW TIME: 10769 ms
TOTAL INTERPS COUNT: 4
INTERP TIME: 19 ms
TOTAL SCORE: 0.8116296278159708, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Persians :: keyword.keyword = 'persian' : keyword.keyword = 'persian' (0.9999999)
released after 1990 :: movie.release_year > 1990 : movie.release_year > 1990 (0.882537310826007)
keyword(tags(movie))
QUERY TIME: 10788 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 38 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for Benedict Cumberbatch: 2
 - producer.name = 'Benedict Cumberbatch' (1.0)
 - actor.name = 'Benedict Cumberbatch' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 6 ms
TOTAL SCORE: 0.877158811547265, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Benedict Cumberbatch :: actor.name = 'Benedict Cumberbatch' : actor.name = 'Benedict Cumberbatch' (1.0)
actor(cast(movie))
QUERY TIME: 7 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 57 ==
Pruned candidates for director: 1
 - director.name (1.0)
Pruned candidates for series House of Cards: 1
 - tv_series.title = 'House of Cards' (0.940149)
Cands for '= 2013': 24
Pruned candidates for 2013: 6
 - actor.birth_year = 2013 (0.9999)
 - movie.release_year = 2013 (0.9999)
 - tv_series.release_year = 2013 (0.9999)
 - tags.id = 2013 (0.9999)
 - keyword.id = 2013 (0.9999)
 - company.id = 2013 (0.9999)
KW TIME: 1116 ms
TOTAL INTERPS COUNT: 6
INTERP TIME: 30 ms
TOTAL SCORE: 0.7939632902311247, TIES: 0
--
director :: director.name : director.name (1.0)
series House of Cards :: tv_series.title = 'House of Cards' : tv_series.title = 'House of Cards' (0.940149)
2013 :: tv_series.release_year = 2013 : tv_series.release_year = 2013 (0.9999)
directed_by(director,tv_series)
QUERY TIME: 1146 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 14 ==
Pruned candidates for nationality: 4
 - writer.nationality (1.0)
 - producer.nationality (1.0)
 - actor.nationality (1.0)
 - director.nationality (1.0)
Pruned candidates for Kevin Spacey: 4
 - producer.name = 'Kevin Spacey' (1.0)
 - writer.name = 'Kevin Spacey' (1.0)
 - director.name = 'Kevin Spacey' (1.0)
 - actor.name = 'Kevin Spacey' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 16
INTERP TIME: 73 ms
TOTAL SCORE: 0.8755928946018454, TIES: 0
--
nationality :: actor.nationality; producer.nationality; director.nationality; writer.nationality : actor.nationality (1.0)
Kevin Spacey :: actor.name = 'Kevin Spacey'; producer.name = 'Kevin Spacey'; director.name = 'Kevin Spacey'; writer.name = 'Kevin Spacey' : actor.name = 'Kevin Spacey' (1.0)
actor
QUERY TIME: 74 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 61 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for directed by: 1
 - directed_by (1.0)
Pruned candidates for Steven Spielberg: 4
 - writer.name = 'Steven Spielberg' (1.0)
 - director.name = 'Steven Spielberg' (1.0)
 - actor.name = 'Steven Spielberg' (1.0)
 - producer.name = 'Steven Spielberg' (1.0)
Pruned candidates for Matt Damon: 4
 - actor.name = 'Matt Damon' (1.0)
 - writer.name = 'Matt Damon' (1.0)
 - director.name = 'Matt Damon' (1.0)
 - producer.name = 'Matt Damon' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 16
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 161 ms
TOTAL SCORE: 0.8392502005655231, TIES: 1
--
movies :: movie.title : movie.title (0.9999999)
Steven Spielberg :: director.name = 'Steven Spielberg' : director.name = 'Steven Spielberg' (1.0)
Matt Damon :: actor.name = 'Matt Damon' : actor.name = 'Matt Damon' (1.0)
actor(cast(tv_series(directed_by(director,movie))))
--
movies :: movie.title : movie.title (0.9999999)
Steven Spielberg :: director.name = 'Steven Spielberg' : actor.name = 'Steven Spielberg' (1.0)
Matt Damon :: actor.name = 'Matt Damon' : director.name = 'Matt Damon' (1.0)
actor(cast(tv_series(directed_by(director,movie))))
QUERY TIME: 161 ms
QUERY > [Ties0: N] [Ties1: Y] [Ties1/t: 0.50]
FRAGMENT (Total: 4)> [Ties0: 1] [Ties1: 3] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 100 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Pruned candidates for Matt Damon: 4
 - actor.name = 'Matt Damon' (1.0)
 - writer.name = 'Matt Damon' (1.0)
 - director.name = 'Matt Damon' (1.0)
 - producer.name = 'Matt Damon' (1.0)
Pruned candidates for direct: 1
 - directed_by (0.668)
KW TIME: 1 ms
TOTAL INTERPS COUNT: 4
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 19 ms
TOTAL SCORE: 0.7643408322272633, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Matt Damon :: director.name = 'Matt Damon' : director.name = 'Matt Damon' (1.0)
directed_by(director,movie)
QUERY TIME: 21 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 60 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Pruned candidates for Austin: 9
 - director.birth_city = 'Austin' (1.0)
 - producer.name = 'Austin' (1.0)
 - actor.name = 'Austin' (1.0)
 - producer.birth_city = 'Austin' (1.0)
 - writer.birth_city = 'Austin' (1.0)
 - actor.birth_city = 'Austin' (1.0)
 - movie.title = 'Austin' (1.0)
 - writer.name = 'Austin' (1.0)
 - director.name = 'Austin' (1.0)
Pruned candidates for born after 1980: 4
 - writer.birth_year > 1980 (0.8680003744238824)
 - director.birth_year > 1980 (0.8680003744238824)
 - producer.birth_year > 1980 (0.8680003744238824)
 - actor.birth_year > 1980 (0.8680003744238824)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 36
INTERP TIME: 273 ms
TOTAL SCORE: 0.906034885772852, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
Austin :: actor.birth_city = 'Austin' : actor.birth_city = 'Austin' (1.0)
born after 1980 :: actor.birth_year > 1980 : actor.birth_year > 1980 (0.8680003744238824)
actor
QUERY TIME: 274 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 116 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for Benedict Cumberbatch: 2
 - producer.name = 'Benedict Cumberbatch' (1.0)
 - actor.name = 'Benedict Cumberbatch' (1.0)
Cands for 'Keira Knightley': 86
Pruned candidates for Keira Knightley: 2
 - producer.name = 'Keira Knightley' (1.0)
 - actor.name = 'Keira Knightley' (1.0)
KW TIME: 10145 ms
TOTAL INTERPS COUNT: 4
INTERP TIME: 36 ms
TOTAL SCORE: 0.8096822649022659, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Benedict Cumberbatch :: actor.name = 'Benedict Cumberbatch' : actor.name = 'Benedict Cumberbatch' (1.0)
Keira Knightley :: actor.name = 'Keira Knightley' : actor.name = 'Keira Knightley' (1.0)
actor(cast(movie,tv_series(cast#1(actor#1))))
QUERY TIME: 10181 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 46 ==
Pruned candidates for writer: 1
 - writer.name (1.0)
Cands for 'movie Django Unchained': 85
Pruned candidates for movie Django Unchained: 1
 - movie.title = 'Django Unchained' (1.0)
KW TIME: 9819 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 4 ms
TOTAL SCORE: 0.8324442842261526, TIES: 0
--
writer :: writer.name : writer.name (1.0)
movie Django Unchained :: movie.title = 'Django Unchained' : movie.title = 'Django Unchained' (1.0)
movie(written_by(writer))
QUERY TIME: 9824 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 92 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Pruned candidates for 2013: 6
 - actor.birth_year = 2013 (0.9999)
 - movie.release_year = 2013 (0.9999)
 - tv_series.release_year = 2013 (0.9999)
 - tags.id = 2013 (0.9999)
 - keyword.id = 2013 (0.9999)
 - company.id = 2013 (0.9999)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 6
INTERP TIME: 27 ms
TOTAL SCORE: 0.9313178744877861, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
2013 :: movie.release_year = 2013 : movie.release_year = 2013 (0.9999)
movie
QUERY TIME: 28 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 16 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Cands for 'Milan': 2180
Pruned candidates for Milan: 7
 - actor.birth_city = 'Milan' (1.0)
 - producer.birth_city = 'Milan' (1.0)
 - tv_series.title = 'Milan' (1.0)
 - movie.title = 'Milan' (1.0)
 - director.birth_city = 'Milan' (1.0)
 - writer.birth_city = 'Milan' (1.0)
 - actor.name = 'Milan' (1.0)
KW TIME: 12672 ms
TOTAL INTERPS COUNT: 7
INTERP TIME: 27 ms
TOTAL SCORE: 0.9371988281140061, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
Milan :: actor.birth_city = 'Milan' : actor.birth_city = 'Milan' (1.0)
actor
QUERY TIME: 12699 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 121 ==
Pruned candidates for movie: 1
 - movie.title (1.0)
Cands for 'classified': 16
Pruned candidates for classified: 1
 - classification (0.7148)
Cands for 'genres': 10
Pruned candidates for genres: 1
 - count(genre.genre) = max(count(genre.genre)) (0.9999999)
KW TIME: 40 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 4 ms
TOTAL SCORE: 0.7247141799225797, TIES: 0
--
movie :: movie.title : movie.title (1.0)
genres :: count(genre.genre) = max(count(genre.genre)) : count(genre.genre) = max(count(genre.genre)) (0.9999999)
classification(genre,movie)
QUERY TIME: 44 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 81 ==
Pruned candidates for movie: 1
 - movie.title (1.0)
Cands for 'Daffy Duck': 102
Pruned candidates for Daffy Duck: 1
 - cast.role = 'Daffy Duck' (1.0)
KW TIME: 9499 ms
TOTAL INTERPS COUNT: 1
INTERP TIME: 2 ms
TOTAL SCORE: 0.8421637021355785, TIES: 0
--
movie :: movie.title : movie.title (1.0)
Daffy Duck :: cast.role = 'Daffy Duck' : cast.role = 'Daffy Duck' (1.0)
cast(movie)
QUERY TIME: 9501 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 27 ==
Pruned candidates for budget: 2
 - movie.budget (1.0)
 - tv_series.budget (1.0)
Pruned candidates for movie Juno: 1
 - movie.title = 'Juno' (1.0)
Cands for '= 2007': 24
Pruned candidates for 2007: 7
 - tv_series.release_year = 2007 (0.9999)
 - keyword.id = 2007 (0.9999)
 - producer.birth_year = 2007 (0.9999)
 - tags.id = 2007 (0.9999)
 - actor.birth_year = 2007 (0.9999)
 - movie.release_year = 2007 (0.9999)
 - company.id = 2007 (0.9999)
KW TIME: 575 ms
TOTAL INTERPS COUNT: 14
INTERP TIME: 64 ms
TOTAL SCORE: 0.8293293177968366, TIES: 0
--
budget :: movie.budget : movie.budget (1.0)
movie Juno :: movie.title = 'Juno' : movie.title = 'Juno' (1.0)
2007 :: movie.release_year = 2007 : tags.id = 2007 (0.9999)
movie(tags)
QUERY TIME: 640 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 67 ==
Pruned candidates for year: 2
 - movie.release_year (0.83155)
 - tv_series.release_year (0.83155)
Pruned candidates for movie The Imitation Game: 1
 - movie.title = 'The Imitation Game' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 6 ms
TOTAL SCORE: 0.7912362473033918, TIES: 0
--
year :: movie.release_year : movie.release_year (0.83155)
movie The Imitation Game :: movie.title = 'The Imitation Game' : movie.title = 'The Imitation Game' (1.0)
movie
QUERY TIME: 6 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 127 ==
Pruned candidates for latest: 2
 - movie.release_year = max(movie.release_year) (0.6627000000000001)
 - tv_series.release_year = max(tv_series.release_year) (0.6627000000000001)
Pruned candidates for movie: 1
 - movie.title (1.0)
Pruned candidates for Jim Jarmusch: 4
 - writer.name = 'Jim Jarmusch' (1.0)
 - producer.name = 'Jim Jarmusch' (1.0)
 - actor.name = 'Jim Jarmusch' (1.0)
 - director.name = 'Jim Jarmusch' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 8
INTERP TIME: 39 ms
TOTAL SCORE: 0.7379391463636021, TIES: 0
--
latest :: movie.release_year = max(movie.release_year) : movie.release_year = max(movie.release_year) (0.6627000000000001)
movie :: movie.title : movie.title (1.0)
Jim Jarmusch :: director.name = 'Jim Jarmusch'; writer.name = 'Jim Jarmusch'; producer.name = 'Jim Jarmusch' : director.name = 'Jim Jarmusch' (1.0)
directed_by(director,movie)
QUERY TIME: 39 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 3)> [Ties0: 3] [Ties1: 3] [Ties1/t: 3.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 113 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Cands for 'star': 16
Pruned candidates for star: 1
 - actor (0.7294499999999999)
Cands for 'Angelina Jolie': 100
Pruned candidates for Angelina Jolie: 4
 - actor.name = 'Angelina Jolie' (1.0)
 - producer.name = 'Angelina Jolie' (1.0)
 - director.name = 'Angelina Jolie' (1.0)
 - writer.name = 'Angelina Jolie' (1.0)
Pruned candidates for Brad Pitt: 2
 - producer.name = 'Brad Pitt' (1.0)
 - actor.name = 'Brad Pitt' (1.0)
KW TIME: 9773 ms
TOTAL INTERPS COUNT: 8
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
Returning 0.0 because Steiner tree doesn't contain actor
INTERP TIME: 55 ms
TOTAL SCORE: 0.7808381598854428, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Angelina Jolie :: actor.name = 'Angelina Jolie' : director.name = 'Angelina Jolie' (1.0)
Brad Pitt :: actor.name = 'Brad Pitt' : actor.name = 'Brad Pitt' (1.0)
actor(cast(movie(directed_by(director))))
QUERY TIME: 9828 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 4)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 30 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Pruned candidates for Los Angeles: 5
 - writer.birth_city = 'Los Angeles' (1.0)
 - movie.title = 'Los Angeles' (1.0)
 - director.birth_city = 'Los Angeles' (1.0)
 - actor.birth_city = 'Los Angeles' (1.0)
 - producer.birth_city = 'Los Angeles' (1.0)
Pruned candidates for after 1980: 1
 - movie.mid > 1980 (0.7953217839340251)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 5
INTERP TIME: 23 ms
TOTAL SCORE: 0.7620986656364777, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
Los Angeles :: actor.birth_city = 'Los Angeles' : actor.birth_city = 'Los Angeles' (1.0)
after 1980 :: actor.birth_year > 1980 : movie.mid > 1980 (0.7953217839340251)
actor(cast(movie))
QUERY TIME: 23 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 95 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Cands for 'Humphrey Bogart': 101
Pruned candidates for Humphrey Bogart: 2
 - actor.name = 'Humphrey Bogart' (1.0)
 - producer.name = 'Humphrey Bogart' (1.0)
Pruned candidates for act: 1
 - directed_by (0.61295)
Cands for '< 1942': 24
Pruned candidates for before 1942: 4
 - writer.birth_year < 1942 (0.7510283549906754)
 - actor.birth_year < 1942 (0.7510283549906754)
 - producer.birth_year < 1942 (0.7510283549906754)
 - director.birth_year < 1942 (0.7510283549906754)
KW TIME: 10023 ms
TOTAL INTERPS COUNT: 8
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 51 ms
TOTAL SCORE: 0.673370811170741, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Humphrey Bogart :: actor.name = 'Humphrey Bogart' : actor.name = 'Humphrey Bogart' (1.0)
before 1942 :: movie.release_year < 1942 : director.birth_year < 1942 (0.7510283549906754)
actor(cast(movie(directed_by(director))))
QUERY TIME: 10074 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 4)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 47 ==
Pruned candidates for series: 1
 - tv_series.title (0.8351)
Pruned candidates for Kerry Washington: 2
 - actor.name = 'Kerry Washington' (1.0)
 - producer.name = 'Kerry Washington' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 6 ms
TOTAL SCORE: 0.7923076916113534, TIES: 0
--
series :: tv_series.title : tv_series.title (0.8351)
Kerry Washington :: actor.name = 'Kerry Washington' : producer.name = 'Kerry Washington' (1.0)
made_by(producer,tv_series)
QUERY TIME: 7 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 2)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 114 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Pruned candidates for acted: 1
 - written_by (0.652)
Pruned candidates for movie: 1
 - movie (1.0)
Cands for 'Tom Hanks': 105
Pruned candidates for Tom Hanks: 4
 - producer.name = 'Tom Hanks' (1.0)
 - actor.name = 'Tom Hanks' (1.0)
 - writer.name = 'Tom Hanks' (1.0)
 - director.name = 'Tom Hanks' (1.0)
KW TIME: 9812 ms
TOTAL INTERPS COUNT: 4
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
Returning 0.0 because Steiner tree doesn't contain written_by
INTERP TIME: 27 ms
TOTAL SCORE: 0.7263043689453231, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
Tom Hanks :: actor.name = 'Tom Hanks' : writer.name = 'Tom Hanks' (1.0)
actor(cast(movie(written_by(writer))))
QUERY TIME: 9839 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 4)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 91 ==
Pruned candidates for movies: 1
 - count(movie.title) (0.9999999)
Pruned candidates for directed by: 1
 - directed_by (1.0)
Pruned candidates for Woody Allen: 4
 - producer.name = 'Woody Allen' (1.0)
 - writer.name = 'Woody Allen' (1.0)
 - director.name = 'Woody Allen' (1.0)
 - actor.name = 'Woody Allen' (1.0)
Pruned candidates for year: 2
 - tv_series.release_year (0.83155)
 - movie.release_year (0.83155)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 8
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
Returning 0.0 because Steiner tree doesn't contain directed_by
INTERP TIME: 45 ms
TOTAL SCORE: 0.7816254366693357, TIES: 0
--
movies :: count(movie.title) : count(movie.title) (0.9999999)
Woody Allen :: director.name = 'Woody Allen' : director.name = 'Woody Allen' (1.0)
year :: movie.release_year : tv_series.release_year (0.83155)
directed_by(director,movie,tv_series)
QUERY TIME: 45 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 4)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 15 ==
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Pruned candidates for Italy: 4
 - director.nationality = 'Italy' (1.0)
 - actor.nationality = 'Italy' (1.0)
 - producer.nationality = 'Italy' (1.0)
 - writer.nationality = 'Italy' (1.0)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 4
INTERP TIME: 16 ms
TOTAL SCORE: 0.9118033588749885, TIES: 0
--
actors :: actor.name : actor.name (0.9999999)
Italy :: actor.nationality = 'Italy' : actor.nationality = 'Italy' (1.0)
actor
QUERY TIME: 16 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 75 ==
Cands for 'James Bond': 200
Pruned candidates for James Bond: 3
 - actor.name = 'James Bond' (1.0)
 - movie.title = 'James Bond' (1.0)
 - cast.role = 'Bond James' (1.0)
Pruned candidates for directors: 1
 - director.name (0.9999999)
KW TIME: 9397 ms
TOTAL INTERPS COUNT: 3
INTERP TIME: 10 ms
TOTAL SCORE: 0.8493792714632076, TIES: 0
--
James Bond :: movie.title = 'James Bond' : movie.title = 'James Bond' (1.0)
directors :: director.name : director.name (0.9999999)
directed_by(director,movie)
QUERY TIME: 9407 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 64 ==
Pruned candidates for female: 7
 - producer.gender = 'female' (1.0)
 - keyword.keyword = 'female' (1.0)
 - writer.gender = 'female' (1.0)
 - actor.gender = 'female' (1.0)
 - director.gender = 'female' (1.0)
 - movie.title = 'Female' (1.0)
 - cast.role = 'Female' (1.0)
Pruned candidates for actors: 1
 - actor.name (0.9999999)
Pruned candidates for movie Saving Private Ryan: 1
 - movie.title = 'Saving Private Ryan' (1.0)
KW TIME: 1 ms
TOTAL INTERPS COUNT: 7
INTERP TIME: 33 ms
TOTAL SCORE: 0.8594079838758298, TIES: 0
--
female :: actor.gender = 'female' : cast.role = 'Female' (1.0)
actors :: actor.name : actor.name (0.9999999)
movie Saving Private Ryan :: movie.title = 'Saving Private Ryan' : movie.title = 'Saving Private Ryan' (1.0)
actor(cast(movie))
QUERY TIME: 34 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 3)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
== QUERY ID: 58 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Cands for 'Robin Wright': 95
Pruned candidates for Robin Wright: 3
 - director.name = 'Robin Wright' (1.0)
 - actor.name = 'Robin Wright' (1.0)
 - producer.name = 'Robin Wright' (1.0)
KW TIME: 8863 ms
TOTAL INTERPS COUNT: 3
INTERP TIME: 9 ms
TOTAL SCORE: 0.877158811547265, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Robin Wright :: actor.name = 'Robin Wright' : actor.name = 'Robin Wright' (1.0)
actor(cast(movie))
QUERY TIME: 8873 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
== QUERY ID: 35 ==
Pruned candidates for movies: 1
 - movie.title (0.9999999)
Pruned candidates for Persians: 2
 - cast.role = 'Persian' (0.9999999)
 - keyword.keyword = 'persian' (0.9999999)
KW TIME: 0 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 7 ms
TOTAL SCORE: 0.8421636221355785, TIES: 0
--
movies :: movie.title : movie.title (0.9999999)
Persians :: keyword.keyword = 'persian' : cast.role = 'Persian' (0.9999999)
cast(movie)
QUERY TIME: 8 ms
QUERY > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
FRAGMENT (Total: 2)> [Ties0: 1] [Ties1: 1] [Ties1/t: 1.00]
JOIN PATH > [Ties0: N] [Ties1: N] [Ties1/t: 0.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
== QUERY ID: 83 ==
Cands for 'roles': 81
Pruned candidates for roles: 1
 - cast.role (0.9999999)
Cands for 'movie Daddy Long Legs': 83
Pruned candidates for movie Daddy Long Legs: 2
 - movie.title = 'Daddy Long Legs' (1.0)
 - movie.title = 'Daddy-Long-Legs' (1.0)
KW TIME: 9113 ms
TOTAL INTERPS COUNT: 2
INTERP TIME: 6 ms
TOTAL SCORE: 0.8199999599999991, TIES: 1
--
roles :: cast.role : cast.role (0.9999999)
movie Daddy Long Legs :: movie.title = 'Daddy Long Legs'; movie.title = 'Daddy-Long-Legs' : movie.title = 'Daddy Long Legs' (1.0)
cast(movie)
--
roles :: cast.role : cast.role (0.9999999)
movie Daddy Long Legs :: movie.title = 'Daddy Long Legs'; movie.title = 'Daddy-Long-Legs' : movie.title = 'Daddy-Long-Legs' (1.0)
cast(movie)
QUERY TIME: 9119 ms
QUERY > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
FRAGMENT (Total: 2)> [Ties0: 2] [Ties1: 2] [Ties1/t: 2.00]
JOIN PATH > [Ties0: Y] [Ties1: Y] [Ties1/t: 1.00]
Saving cache...
Saved cache to <data/imdb/imdb.cands.cache>!
==== FOLD RESULTS ====
32,20,21,20.500,19,19,19.000,79,66,68,67.000
CUMULATIVE TOTAL TIME: 144348 ms
CUMULATIVE KW TIME: 143138 ms
CUMULATIVE I TIME: 1198 ms
CUMULATIVE INTERP COUNT: 198
==== FINAL RESULTS ====
32,16,20,17.750,16,18,16.750,82,59,69,63.833
32,21,22,21.500,19,20,19.500,76,60,62,60.833
32,19,20,19.500,19,20,19.500,76,58,59,58.500
32,20,21,20.500,19,19,19.000,79,66,68,67.000

