00:00  INFO: ==============================
00:00  INFO: Reading relations info...
00:00  INFO: Read 16 relations/views/functions.
00:00  INFO: ==============================

00:00  INFO: ==============================
00:00  INFO: Reading edges info...
00:00  INFO: Read 21 FK-PK relationships.
00:00  INFO: Read 21 PK-FK relationships.
00:00  INFO: ==============================

00:00  INFO: ==============================
00:00  INFO: Reading relations info...
00:00  INFO: Read 7 relations/views/functions.
00:00  INFO: ==============================

00:00  INFO: ==============================
00:00  INFO: Reading edges info...
00:00  INFO: Read 7 FK-PK relationships.
00:00  INFO: Read 7 PK-FK relationships.
00:00  INFO: ==============================

00:00  INFO: ==============================
00:00  INFO: Reading relations info...
00:00  INFO: Read 15 relations/views/functions.
00:00  INFO: ==============================

00:00  INFO: ==============================
00:00  INFO: Reading edges info...
00:00  INFO: Read 19 FK-PK relationships.
00:00  INFO: Read 19 PK-FK relationships.
00:00  INFO: ==============================

00:00  INFO: ===== Parsing Results =====
00:00  INFO: Total Queries: 128
00:00  INFO: Correctly Parsed: 95/128

00:00  INFO: ===== Parsing Results =====
00:00  INFO: Total Queries: 196
00:00  INFO: Correctly Parsed: 182/196

00:00  INFO: ==============================
00:00  INFO: Generating templates using schema for join level: 6
00:02  INFO: Done generating 4979 templates.
00:02  INFO: ==============================

Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ... done [1.1 sec].
00:03  INFO: ===== FOLD 0 =====
00:03  INFO: ===== Parsing Results =====
00:03  INFO: Total Queries: 98
00:03  INFO: Correctly Parsed: 97/98

00:03  INFO: ================
00:03  INFO: QUERY 14: Find all actors from Italy
00:03  INFO: ================
00:06  INFO: ================
00:06  INFO: QUERY 123: which movie has the most number of actors from China?
00:06  INFO: ================
00:10  INFO: ================
00:10  INFO: QUERY 125: Find the name and budget of the latest movie by "Quentin Tarantino"
00:10  INFO: ================
20. ROOT: ROOT; NA; ; (0) 
21. Find: CMT; NA; ; (0) 
22. name: VTTEXT; NA; ; (0) movie.title(0.95):Name; Name; Names; | actor.name(0.95):name; No Name; Famous Names; | actor.name(0.81):| director.name(0.79):| tv_series.title(0.79):Same Name; No Names; Name This; | keyword.keyword(0.79):same-name; name-game; naming-names; | writer.name(0.79):| 
25. budget: NT; NA; ; (0) movie.budget(1.0):| tv_series.budget(1.0):| movie.title(0.95):Budget; Fudget's Budget; No Budget; | tv_series.title(0.95):Budget; Budget TV; No Budget Gourmet; | cast.role(0.95):Budgets; Budgets; Budgets; | keyword.keyword(0.95):budget; in-budget; no-budget; | company.name(0.71):Low Budget; Cero Budget; Budget Movies; | 
26. movie: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movie; Movies; Movie Movie; | keyword.keyword(0.83):movie-in-movie; b-movie; z-movie; | actor.name(0.76):| actor(0.76):| 
29. latest: FT; max; ; (0) 
30. Quentin Tarantino: VTTEXT; NA; ; (0) director.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | actor.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | producer.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | writer.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | cast.role(0.85):Quentin Tarrantino '; Quentin Tarrantino '; Quentin Tarrantino '; | movie.title(0.84):21 Years: Quentin Ta; 21 Years: Quentin Ta; Quentin Tarantino's ; | writer.birth_city(0.74):San Quentin; San Quentin; Saint-Quentin; | 
Find, VB
the, DT
name, NN
and, CC
budget, NN
of, IN
the, DT
latest, JJS
movie, NN
by, IN
Quentin Tarantino, NNP
root(ROOT-0, Find-1)
det(name-3, the-2)
dobj(Find-1, name-3)
cc(name-3, and-4)
conj(name-3, budget-5)
case(movie-9, of-6)
det(movie-9, the-7)
amod(movie-9, latest-8)
nmod(name-3, movie-9)
case(Quentin Tarantino-11, by-10)
nmod(Find-1, Quentin Tarantino-11)

PARSE TREE:(20) ROOT ROOT
    (21) Find CMT
        (22) name VTTEXT
            (26) movie NT
        (25) budget NT
        (30) Quentin Tarantino VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9734002230204892; NL+QF: 0.9174505626104981; rels: []; projs: [actor_0.name]; preds: [director_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9734002230204892; NL+QF: 0.9174505626104981; rels: []; projs: [actor_0.name]; preds: [actor_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9734002230204892; NL+QF: 0.9174505626104981; rels: []; projs: [actor_0.name]; preds: [producer_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9734002230204892; NL+QF: 0.9174505626104981; rels: []; projs: [actor_0.name]; preds: [writer_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8914326676246277; NL: 0.8879579826791157; NL+AG: 0.9557508540140572; NL+QF: 0.8914326676246277; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Quentin Tarrantino 'esque' Patient"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8890594327029326; NL: 0.8862129230052637; NL+AG: 0.9547774891905295; NL+QF: 0.8890594327029326; rels: []; projs: [actor_0.name]; preds: [movie_0.title = "21 Years: Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.883063826568098; NL: 0.8787564719717046; NL+AG: 0.9519165110857386; NL+QF: 0.883063826568098; rels: []; projs: [actor_0.name]; preds: [director_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8828651300758494; NL: 0.8787564719717046; NL+AG: 0.9519165110857386; NL+QF: 0.8828651300758494; rels: []; projs: [actor_0.name]; preds: [actor_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8822498437654105; NL: 0.8787564719717046; NL+AG: 0.9519165110857386; NL+QF: 0.8822498437654105; rels: []; projs: [actor_0.name]; preds: [producer_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8822498437654105; NL: 0.8787564719717046; NL+AG: 0.9519165110857386; NL+QF: 0.8822498437654105; rels: []; projs: [actor_0.name]; preds: [writer_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8796571017983323; NL: 0.8616655341946088; NL+AG: 0.9774825821692584; NL+QF: 0.8796571017983323; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Budgets",actor_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 0

===========
RESULTS
===========
TOT: 0.7095153339152913; TR: 0.8914326676246277; QF: 0.22557292959377842; select actor_0.name from actor as actor_0, cast as cast_0, movie as movie_0 where cast_0.role = "Quentin Tarrantino 'esque' Patient" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid order by movie_0.title desc limit 1
TOT: 0.6801927374704264; TR: 0.9174505626104981; QF: 0.1399446061508608; select actor_0.name from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid order by movie_0.title desc limit 1
TOT: 0.6772866353533654; TR: 0.9174505626104981; QF: 0.12178146791922942; select actor_0.name from actor as actor_0, cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid order by movie_0.title desc limit 1
TOT: 0.6772866353533654; TR: 0.9174505626104981; QF: 0.12178146791922942; select actor_0.name from actor as actor_0, actor as actor_1, cast as cast_0, cast as cast_1, movie as movie_0 where actor_1.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and actor_1.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_0.mid order by movie_0.title desc limit 1
TOT: 0.6770674572711737; TR: 0.9174505626104981; QF: 0.12041160490553078; select actor_0.name from actor as actor_0, cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid order by movie_0.title desc limit 1
TOT: 0.654610558866066; TR: 0.8796571017983323; QF: 0.12178146791922942; select actor_0.name from actor as actor_0, actor as actor_1, cast as cast_0, cast as cast_1, movie as movie_0 where actor_1.name = "Quentin Tarantino" and cast_0.role = "Budgets" and actor_0.aid = cast_0.aid and actor_1.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_0.mid order by movie_0.title desc limit 1
TOT: 0.6525544231622508; TR: 0.8890594327029326; QF: 0.07367187887813353; select actor_0.name from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0, movie as movie_1 where movie_0.title = "21 Years: Quentin Tarantino" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_1.mid order by movie_1.title desc limit 1
TOT: 0.651366335193514; TR: 0.9174505626104981; QF: 0.06365327565625406; select actor_0.name from actor as actor_0, cast as cast_0, cast as cast_1, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid order by movie_0.title desc limit 1
TOT: 0.6508583986855775; TR: 0.9174505626104981; QF: 0.06047867248165088; select actor_0.name from actor as actor_0, cast as cast_0, cast as cast_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where director_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid order by movie_0.title desc limit 1
TOT: 0.6506044304316092; TR: 0.9174505626104981; QF: 0.058891370894349294; select actor_0.name from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid order by movie_0.title desc limit 1


00:13  INFO: ================
00:13  INFO: QUERY 52: What company produced the series Scandal?
00:13  INFO: ================
33. ROOT: ROOT; NA; ; (0) 
34. produced: NT; NA; ; (0) made_by(0.74):| directed_by(0.69):| producer.name(0.68):| producer(0.68):| cast.role(0.63):| cast(0.63):| written_by(0.63):| 
35. company: NT; NA; ; (0) company.name(1.0):| company(1.0):| movie.title(0.95):Company; Company; Company; | cast.role(0.95):Company; Company; Company; | keyword.keyword(0.95):company; company-k; it-company; | tv_series.title(0.82):X Company; Eco Company; Company and Co; | actor.name(0.74):Eva Company; Angel Company; Marc Company; | 
36. What: CMT; NA; ; (0) 
37. Scandal: VTTEXT; NA; ; (0) movie.title(0.95):Scandal; Scandal; Scandal; | tv_series.title(0.95):Scandal; Scandal; Scandal; | actor.name(0.95):Scandal; Wilrik 'Scandal' de ; | company.name(0.78):Scandal 18; Scandal Video; Scandal-Inc.com; | keyword.keyword(0.74):sex-scandal; fbi-scandal; legal-scandal; | cast.role(0.65):Blanca's Scandal Guy; Blanca's Scandal Guy; Scandal in Food Man; | company.country_code(0.6):| 
39. series: NT; NA; ; (0) tv_series.title(1.0):| tv_series(1.0):| keyword.keyword(0.95):series; series; series-in-series; | company.name(0.87):Series+; Series+; T-Series; | movie.title(0.8):Series 4; Series 4; Chinese Series; | actor.name(0.79):Eric Series; Eric Series; series editor; | tv_series.num_of_episodes(0.68):| 
What, WDT
company, NN
produced, VBD
the, DT
series, NN
Scandal, NN
det(company-2, What-1)
nsubj(produced-3, company-2)
root(ROOT-0, produced-3)
det(Scandal-6, the-4)
compound(Scandal-6, series-5)
dobj(produced-3, Scandal-6)

PARSE TREE:(33) ROOT ROOT
    (36) What CMT
        (35) company NT
            (34) produced NT
                (37) Scandal VTTEXT
                    (39) series NT


===========
TRANSLATIONS
===========
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [company_0.name]; preds: [tv_series_0.title = "Scandal"]; havings: []; superlative: []; blanks: 1
TOT: 0.806225774829855; NL: 0.806225774829855; NL+AG: 0.9292177196056816; NL+QF: 0.806225774829855; rels: [tv_series]; projs: [company_0.name]; preds: []; havings: []; superlative: []; blanks: 2
TOT: 0.7359234518087397; NL: 0.7359234518087397; NL+AG: 0.9302378493889254; NL+QF: 0.7359234518087397; rels: []; projs: [movie_0.mid]; preds: [movie_0.title = "Company",tv_series_0.title = "Scandal"]; havings: []; superlative: []; blanks: 1
TOT: 0.7359234518087397; NL: 0.7359234518087397; NL+AG: 0.9302378493889254; NL+QF: 0.7359234518087397; rels: []; projs: [keyword_0.id]; preds: [keyword_0.keyword = "company",tv_series_0.title = "Scandal"]; havings: []; superlative: []; blanks: 1
TOT: 0.7288491729170692; NL: 0.7008938767445889; NL+AG: 0.9292177196056816; NL+QF: 0.7288491729170692; rels: [made_by,tv_series]; projs: [company_0.name]; preds: []; havings: []; superlative: []; blanks: 1
TOT: 0.7239107359608682; NL: 0.7239107359608682; NL+AG: 0.8938265794085223; NL+QF: 0.7239107359608682; rels: []; projs: [company_0.name]; preds: []; havings: []; superlative: []; blanks: 3
TOT: 0.7187291109240963; NL: 0.7187291109240963; NL+AG: 0.9628121638266046; NL+QF: 0.7187291109240963; rels: [made_by]; projs: [company_0.name]; preds: [tv_series_0.title = "Scandal"]; havings: []; superlative: []; blanks: 0
TOT: 0.7178749278490331; NL: 0.7178749278490331; NL+AG: 0.9084913552140581; NL+QF: 0.7178749278490331; rels: [tv_series]; projs: [movie_0.mid]; preds: [movie_0.title = "Company"]; havings: []; superlative: []; blanks: 2
TOT: 0.7178749278490331; NL: 0.7178749278490331; NL+AG: 0.9084913552140581; NL+QF: 0.7178749278490331; rels: [tv_series]; projs: [keyword_0.id]; preds: [keyword_0.keyword = "company"]; havings: []; superlative: []; blanks: 2
TOT: 0.7162798131581666; NL: 0.6850625261235419; NL+AG: 0.9292177196056816; NL+QF: 0.7162798131581666; rels: [producer,tv_series]; projs: [company_0.name]; preds: []; havings: []; superlative: []; blanks: 1
TOT: 0.7079415626653529; NL: 0.6890706686060093; NL+AG: 0.9292177196056816; NL+QF: 0.7079415626653529; rels: [tv_series,directed_by]; projs: [company_0.name]; preds: []; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.8343464415765209; TR: 0.7239107359608682; QF: 1.0; select company_0.name from company as company_0
TOT: 0.6938630833656074; TR: 0.8662391053409028; QF: 0.2222222222222222; select company_0.name from company as company_0, copyright as copyright_0, tv_series as tv_series_0 where tv_series_0.title = "Scandal" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid
TOT: 0.620777420827018; TR: 0.8662391053409028; QF: 0.06451552562663673; select company_0.name from company as company_0, copyright as copyright_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where tv_series_0.title = "Scandal" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid
TOT: 0.6206300546001284; TR: 0.8662391053409028; QF: 0.06359448670857622; select company_0.name from actor as actor_0, cast as cast_0, cast as cast_1, company as company_0, copyright as copyright_0, movie as movie_0, tv_series as tv_series_0 where tv_series_0.title = "Scandal" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid
TOT: 0.6194279866354786; TR: 0.8662391053409028; QF: 0.05608156192951515; select company_0.name from company as company_0, copyright as copyright_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where tv_series_0.title = "Scandal" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid
TOT: 0.6191395944220683; TR: 0.8662391053409028; QF: 0.05427911059570116; select company_0.name from classification as classification_0, classification as classification_1, company as company_0, copyright as copyright_0, genre as genre_0, movie as movie_0, tv_series as tv_series_0 where tv_series_0.title = "Scandal" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = tv_series_0.sid and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid
TOT: 0.6191395944220683; TR: 0.8662391053409028; QF: 0.05427911059570116; select company_0.name from company as company_0, copyright as copyright_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where tv_series_0.title = "Scandal" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and tv_series_0.sid = written_by_1.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid
TOT: 0.6190352239067389; TR: 0.8662391053409028; QF: 0.053626794874892296; select company_0.name from company as company_0, copyright as copyright_0, made_by as made_by_0, made_by as made_by_1, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where tv_series_0.title = "Scandal" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid and made_by_1.msid = tv_series_0.sid and made_by_1.pid = producer_0.pid
TOT: 0.6067848023574207; TR: 0.7359234518087397; QF: 0.16666666666666666; select keyword_0.id from keyword as keyword_0, tags as tags_0, tv_series as tv_series_0 where keyword_0.keyword = "company" and tv_series_0.title = "Scandal" and keyword_0.id = tags_0.kid and tags_0.msid = tv_series_0.sid
TOT: 0.5609823037022035; TR: 0.7359234518087397; QF: 0.07560606060606061; select movie_0.mid from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where movie_0.title = "Company" and tv_series_0.title = "Scandal" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid


00:16  INFO: ================
00:16  INFO: QUERY 93: How many movies did "Ronald Reagan" act in?
00:16  INFO: ================
41. ROOT: ROOT; NA; ; (0) 
42. act: NT; NA; ; (0) movie.release_year(0.63):| tv_series.release_year(0.63):| actor.name(0.62):| actor(0.62):| genre.genre(0.62):| genre(0.62):| made_by(0.61):| 
43. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
45. How many: CMT; count; ; (0) 
47. Ronald Reagan: VTTEXT; NA; ; (0) actor.name(1.0):Ronald Reagan; Ronald Reagan; Lt. Ronald Reagan; | producer.name(1.0):Ronald Reagan; Ronald Reagan; Lt. Ronald Reagan; | cast.role(0.92):Donald Reagan; Ronald Regan; Ronald Regan; | movie.title(0.82):Saving Ronald Reagan; Saving Ronald Reagan; Altered Statesmen: R; | director.name(0.73):Ronald Remy; Ronald Remy; Ronald Ross; | writer.name(0.73):Ronald Remy; Ronald Reng; Ronald Jeans; | keyword.keyword(0.7):ronald-reagan-mask; ronald-reagan-mask; ronald-reagan-quotat; | 
How, WRB
many, JJ
movies, NNS
did, VBD
Ronald Reagan, NNP
act, VB
in, RP
advmod(many-2, How-1)
amod(movies-3, many-2)
dobj(act-6, movies-3)
aux(act-6, did-4)
nsubj(act-6, Ronald Reagan-5)
root(ROOT-0, act-6)
compound:prt(act-6, in-7)

PARSE TREE:(41) ROOT ROOT
    (45) How many CMT
        (43) movies NT
            (42) act NT
                (47) Ronald Reagan VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Ronald Reagan"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(movie_0.title))]; preds: [producer_0.name = "Ronald Reagan"]; havings: []; superlative: []; blanks: 1
TOT: 0.8414757379333423; NL: 0.8414757379333423; NL+AG: 0.9504213501334474; NL+QF: 0.8414757379333423; rels: []; projs: [count(distinct(movie_0.title))]; preds: [cast_0.role = "Donald Reagan"]; havings: []; superlative: []; blanks: 1
TOT: 0.8145429090234648; NL: 0.7800771801620782; NL+AG: 0.9336787348794631; NL+QF: 0.8145429090234648; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Ronald Remy"]; havings: []; superlative: []; blanks: 1
TOT: 0.8104361651112509; NL: 0.8104361651112509; NL+AG: 0.9363943428042699; NL+QF: 0.8104361651112509; rels: []; projs: [count(distinct(movie_0.title))]; preds: [movie_0.title = "Saving Ronald Reagan"]; havings: []; superlative: []; blanks: 1
TOT: 0.7912922821972069; NL: 0.7912922821972069; NL+AG: 0.9334884919988383; NL+QF: 0.7912922821972069; rels: []; projs: [count(distinct(actor_0.name))]; preds: [actor_0.name = "Ronald Reagan"]; havings: []; superlative: []; blanks: 1
TOT: 0.7912922821972069; NL: 0.7912922821972069; NL+AG: 0.9334884919988383; NL+QF: 0.7912922821972069; rels: []; projs: [count(distinct(actor_0.name))]; preds: [producer_0.name = "Ronald Reagan"]; havings: []; superlative: []; blanks: 1
TOT: 0.7886571334544491; NL: 0.7691884558771378; NL+AG: 0.9336787348794631; NL+QF: 0.7886571334544491; rels: []; projs: [count(distinct(movie_0.title))]; preds: [keyword_0.keyword = "ronald-reagan-mask"]; havings: []; superlative: []; blanks: 1
TOT: 0.7800771801620782; NL: 0.7800771801620782; NL+AG: 0.9336787348794631; NL+QF: 0.7800771801620782; rels: []; projs: [count(distinct(movie_0.title))]; preds: [writer_0.name = "Ronald Remy"]; havings: []; superlative: []; blanks: 1
TOT: 0.769242970073851; NL: 0.7403174004868528; NL+AG: 0.9075024737739579; NL+QF: 0.769242970073851; rels: []; projs: [count(distinct(actor_0.name))]; preds: [movie_0.title = "Saving Ronald Reagan"]; havings: []; superlative: []; blanks: 1
TOT: 0.768671436070542; NL: 0.768671436070542; NL+AG: 0.9215294811031353; NL+QF: 0.768671436070542; rels: []; projs: [count(distinct(actor_0.name))]; preds: [cast_0.role = "Donald Reagan"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.7200812663232081; TR: 0.8414757379333423; QF: 0.28431372549019607; select count(distinct(movie_0.title)) from cast as cast_0, movie as movie_0 where cast_0.role = "Donald Reagan" and cast_0.msid = movie_0.mid
TOT: 0.6943991965450564; TR: 0.8662391053409028; QF: 0.22557292959377842; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Ronald Reagan" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6936932992536788; TR: 0.768671436070542; QF: 0.3924050632911392; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0 where cast_0.role = "Donald Reagan" and actor_0.aid = cast_0.aid
TOT: 0.6864353816913304; TR: 0.8662391053409028; QF: 0.17579908675799086; select count(distinct(movie_0.title)) from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Ronald Reagan" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6658352645650436; TR: 0.8145429090234648; QF: 0.24090909090909088; select count(distinct(movie_0.title)) from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Ronald Remy" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6426355376606357; TR: 0.7886571334544491; QF: 0.1929824561403509; select count(distinct(movie_0.title)) from keyword as keyword_0, movie as movie_0, tags as tags_0 where keyword_0.keyword = "ronald-reagan-mask" and keyword_0.id = tags_0.kid and movie_0.mid = tags_0.msid
TOT: 0.6362015153848253; TR: 0.769242970073851; QF: 0.22557292959377842; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, movie as movie_0 where movie_0.title = "Saving Ronald Reagan" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6354688201913415; TR: 0.7800771801620782; QF: 0.18036529680365296; select count(distinct(movie_0.title)) from movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Ronald Remy" and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6207868270586465; TR: 0.8662391053409028; QF: 0.06457431457431458; select count(distinct(movie_0.title)) from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Ronald Reagan" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6206394608317569; TR: 0.8662391053409028; QF: 0.06365327565625406; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, cast as cast_1, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Ronald Reagan" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid


00:21  INFO: ================
00:21  INFO: QUERY 36: Who are the actors born in "New York City" after 1990?
00:21  INFO: ================
00:27  INFO: ================
00:27  INFO: QUERY 65: Who acts as "Alan Turing" in the movie "The Imitation Game"?
00:27  INFO: ================
00:30  INFO: ================
00:30  INFO: QUERY 70: Give me the name of all the actors from Afghanistan
00:30  INFO: ================
00:31  INFO: ================
00:31  INFO: QUERY 40: Find all movies about Autism
00:31  INFO: ================
83. ROOT: ROOT; NA; ; (0) 
84. Find: CMT; NA; ; (0) 
85. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
87. Autism: VTTEXT; NA; ; (0) movie.title(1.0):Autism; Autism; Autism x 6; | keyword.keyword(1.0):autism; autism-spectrum-diso; treatment-for-autism; | director.birth_city(0.63):| director.birth_year(0.63):| actor.birth_city(0.63):| actor.birth_year(0.63):| producer.birth_city(0.63):| 
Find, VB
all, DT
movies, NNS
about, IN
Autism, NNP
root(ROOT-0, Find-1)
det(movies-3, all-2)
dobj(Find-1, movies-3)
case(Autism-5, about-4)
nmod(Find-1, Autism-5)

PARSE TREE:(83) ROOT ROOT
    (84) Find CMT
        (85) movies NT
        (87) Autism VTTEXT


===========
TRANSLATIONS
===========
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [movie_0.title = "Autism"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [keyword_0.keyword = "autism"]; havings: []; superlative: []; blanks: 0
TOT: 0.9073100564093504; NL: 0.8730692985095742; NL+AG: 0.9889432485322897; NL+QF: 0.9073100564093504; rels: []; projs: [actor_0.name]; preds: [movie_0.title = "Autism"]; havings: []; superlative: []; blanks: 0
TOT: 0.8730692985095742; NL: 0.8730692985095742; NL+AG: 0.9889432485322897; NL+QF: 0.8730692985095742; rels: []; projs: [actor_0.name]; preds: [keyword_0.keyword = "autism"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [movie_0.title = "Autism"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [keyword_0.keyword = "autism"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [movie_0.title = "Autism"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [keyword_0.keyword = "autism"]; havings: []; superlative: []; blanks: 0
TOT: 0.806225774829855; NL: 0.806225774829855; NL+AG: 0.9584354392113631; NL+QF: 0.806225774829855; rels: []; projs: [movie_0.title]; preds: []; havings: []; superlative: []; blanks: 1
TOT: 0.7038909716710394; NL: 0.7038909716710394; NL+AG: 0.9168708784227262; NL+QF: 0.7038909716710394; rels: []; projs: [actor_0.name]; preds: []; havings: []; superlative: []; blanks: 1
TOT: 0.6684870978560469; NL: 0.6684870978560469; NL+AG: 0.9168708784227262; NL+QF: 0.6684870978560469; rels: []; projs: [tv_series_0.title]; preds: []; havings: []; superlative: []; blanks: 1
TOT: 0.6684870978560469; NL: 0.6684870978560469; NL+AG: 0.9168708784227262; NL+QF: 0.6684870978560469; rels: []; projs: [tv_series_0.title]; preds: []; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.883735464897913; TR: 0.806225774829855; QF: 1.0; select movie_0.title from movie as movie_0
TOT: 0.8223345830026236; TR: 0.7038909716710394; QF: 1.0; select actor_0.name from actor as actor_0
TOT: 0.8010922587136282; TR: 0.6684870978560469; QF: 1.0; select tv_series_0.title from tv_series as tv_series_0
TOT: 0.7694412575879663; TR: 1.0; QF: 0.1929824561403509; select movie_0.title from keyword as keyword_0, movie as movie_0, tags as tags_0 where keyword_0.keyword = "autism" and keyword_0.id = tags_0.kid and movie_0.mid = tags_0.msid
TOT: 0.7274282326169595; TR: 1.0; QF: 0.1256060606060606; select movie_0.title from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, movie as movie_1 where movie_1.title = "Autism" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = movie_1.mid
TOT: 0.7191187635404912; TR: 1.0; QF: 0.07367187887813353; select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0, movie as movie_1 where movie_1.title = "Autism" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_1.mid
TOT: 0.719041767186125; TR: 0.9073100564093504; QF: 0.22557292959377842; select actor_0.name from actor as actor_0, cast as cast_0, movie as movie_0 where movie_0.title = "Autism" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7169115098335701; TR: 1.0; QF: 0.059876543209876544; select movie_0.title from company as company_0, copyright as copyright_0, copyright as copyright_1, movie as movie_0, movie as movie_1 where movie_1.title = "Autism" and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = movie_1.mid
TOT: 0.7165944208147267; TR: 1.0; QF: 0.05789473684210526; select movie_0.title from keyword as keyword_0, movie as movie_0, movie as movie_1, tags as tags_0, tags as tags_1 where movie_1.title = "Autism" and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and movie_1.mid = tags_1.msid
TOT: 0.7159887971665653; TR: 1.0; QF: 0.05410958904109588; select movie_0.title from movie as movie_0, movie as movie_1, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where movie_1.title = "Autism" and movie_0.mid = written_by_0.msid and movie_1.mid = written_by_1.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid


00:32  INFO: ================
00:32  INFO: QUERY 87: What is the number of movies in which "Jennifer Aniston" acted after 2010?
00:32  INFO: ================
90. ROOT: ROOT; NA; ; (0) 
91. What: CMT; NA; ; (0) 
93. number of: FT; count; ; (0) 
95. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
97. acted: NT; NA; ; (0) movie.release_year(0.63):| tv_series.release_year(0.63):| actor.name(0.62):| actor(0.62):| genre.genre(0.62):| genre(0.62):| made_by(0.61):| 
100. Jennifer Aniston: VTTEXT; NA; ; (0) director.name(1.0):Jennifer Aniston; Jennifer Aniston; Jennifer Aniston Pit; | actor.name(1.0):Jennifer Aniston; Jennifer Aniston; Jennifer Aniston Pit; | producer.name(1.0):Jennifer Aniston; Jennifer Aniston; Jennifer Aniston Pit; | cast.role(0.91):Jennifer Faniston; Jennifer Faniston; Jennifer Tangston; | writer.name(0.84):Jennifer An; Jennifer An; Jennifer Piston; | movie.title(0.84):Dating Jennifer Anis; Dating Jennifer Anis; Jennifer; | company.name(0.74):Jennifer Alliston Le; Jennifer Alliston Le; Dear Jennifer; | 
101. 2010: VTNUM; NA; ; (0) movie.release_year(1.0):2012; 2014; 2015; | tv_series.release_year(1.0):2014; 2014; 2013; | actor.birth_year(1.0):2011; 2013; 2013; | 
102. after: OT; >; ; (0) 
What, WP
is, VBZ
the, DT
number, NN
of, IN
movies, NNS
in, IN
which, WDT
Jennifer Aniston, NNP
acted, VBD
after, IN
2010, CD
root(ROOT-0, What-1)
cop(What-1, is-2)
det(number-4, the-3)
nsubj(What-1, number-4)
case(movies-6, of-5)
nmod(number-4, movies-6)
case(which-8, in-7)
nmod(acted-10, which-8)
nsubj(acted-10, Jennifer Aniston-9)
acl:relcl(movies-6, acted-10)
case(2010-12, after-11)
nmod(acted-10, 2010-12)

PARSE TREE:(90) ROOT ROOT
    (91) What CMT
        (93) number of FT
            (95) movies NT
                (97) acted NT
                    (100) Jennifer Aniston VTTEXT
                    (101) 2010 VTNUM
                        (102) after OT


===========
TRANSLATIONS
===========
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685296079391709; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Jennifer Aniston",movie_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685296079391709; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Jennifer Aniston",tv_series_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685296079391709; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Jennifer Aniston",actor_0.birth_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685296079391709; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Jennifer Aniston",movie_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685296079391709; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Jennifer Aniston",tv_series_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685296079391709; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Jennifer Aniston",actor_0.birth_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685296079391709; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(movie_0.title))]; preds: [producer_0.name = "Jennifer Aniston",movie_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685296079391709; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(movie_0.title))]; preds: [producer_0.name = "Jennifer Aniston",tv_series_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685296079391709; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(movie_0.title))]; preds: [producer_0.name = "Jennifer Aniston",actor_0.birth_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8780983407516854; NL: 0.8780983407516854; NL+AG: 0.9579164940772603; NL+QF: 0.8780983407516854; rels: []; projs: [count(distinct(movie_0.title))]; preds: [cast_0.role = "Jennifer Faniston",movie_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8780983407516854; NL: 0.8780983407516854; NL+AG: 0.9579164940772603; NL+QF: 0.8780983407516854; rels: []; projs: [count(distinct(movie_0.title))]; preds: [cast_0.role = "Jennifer Faniston",tv_series_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8780983407516854; NL: 0.8780983407516854; NL+AG: 0.9579164940772603; NL+QF: 0.8780983407516854; rels: []; projs: [count(distinct(movie_0.title))]; preds: [cast_0.role = "Jennifer Faniston",actor_0.birth_year > 2010]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.742054828014214; TR: 0.8780983407516854; QF: 0.28431372549019607; select count(distinct(movie_0.title)) from cast as cast_0, movie as movie_0 where cast_0.role = "Jennifer Faniston" and movie_0.release_year > 2010 and cast_0.msid = movie_0.mid
TOT: 0.7158499751580737; TR: 0.8979007600118484; QF: 0.24090909090909088; select count(distinct(movie_0.title)) from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Jennifer Aniston" and movie_0.release_year > 2010 and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.7133961893476237; TR: 0.8979007600118484; QF: 0.22557292959377842; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Jennifer Aniston" and movie_0.release_year > 2010 and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7133961893476237; TR: 0.8979007600118484; QF: 0.22557292959377842; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.birth_year > 2010 and actor_0.name = "Jennifer Aniston" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7054323744938977; TR: 0.8979007600118484; QF: 0.17579908675799086; select count(distinct(movie_0.title)) from made_by as made_by_0, movie as movie_0, producer as producer_0 where movie_0.release_year > 2010 and producer_0.name = "Jennifer Aniston" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.701514737791526; TR: 0.8780983407516854; QF: 0.22557292959377842; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.birth_year > 2010 and cast_0.role = "Jennifer Faniston" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6684628559112366; TR: 0.8979007600118484; QF: 0.1399446061508608; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.birth_year > 2010 and director_0.name = "Jennifer Aniston" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6653375757119838; TR: 0.8979007600118484; QF: 0.12041160490553078; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where actor_0.birth_year > 2010 and producer_0.name = "Jennifer Aniston" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6581686886240685; TR: 0.8979007600118484; QF: 0.07560606060606061; select count(distinct(movie_0.title)) from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where director_0.name = "Jennifer Aniston" and tv_series_0.release_year > 2010 and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid
TOT: 0.6578592195476002; TR: 0.8979007600118484; QF: 0.07367187887813353; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Jennifer Aniston" and tv_series_0.release_year > 2010 and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid


00:34  INFO: ================
00:34  INFO: QUERY 55: Find all movies featuring "Kevin Spacey"
00:34  INFO: ================
104. ROOT: ROOT; NA; ; (0) 
105. Find: CMT; NA; ; (0) 
106. featuring: NT; NA; ; (0) tv_series.title(0.69):| tv_series(0.69):| movie.release_year(0.64):| tv_series.release_year(0.64):| made_by(0.64):| movie.title_aka(0.62):| tv_series.title_aka(0.62):| 
107. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
109. Kevin Spacey: VTTEXT; NA; ; (0) director.name(1.0):Kevin Spacey; Kevin Spacey; Kevin Spacey Fowler; | actor.name(1.0):Kevin Spacey; Kevin Spacey Fowler; John Spacey; | producer.name(1.0):Kevin Spacey; Kevin Spacey; Kevin Spacey Fowler; | writer.name(1.0):Kevin Spacey; Kevin Spacey; Kevin Pacey; | cast.role(0.86):Kid Kevin Spacey; Kid Kevin Spacey; Kevin Spatz; | company.name(0.71):Kevin Spacey Foundat; Kevin Spacey Foundat; Kevin Spencer; | tv_series.title(0.7):Kevin Spencer; Kevin Spencer; Kevin Seal, Sporting; | 
Find, VB
all, DT
movies, NNS
featuring, VBG
Kevin Spacey, NNP
root(ROOT-0, Find-1)
det(movies-3, all-2)
nsubj(featuring-4, movies-3)
dep(Find-1, featuring-4)
dobj(featuring-4, Kevin Spacey-5)

PARSE TREE:(104) ROOT ROOT
    (105) Find CMT
        (107) movies NT
            (106) featuring NT
                (109) Kevin Spacey VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Kevin Spacey"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Kevin Spacey"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Kevin Spacey"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Kevin Spacey"]; havings: []; superlative: []; blanks: 1
TOT: 0.8344522897223012; NL: 0.8344522897223012; NL+AG: 0.9889432485322897; NL+QF: 0.8344522897223012; rels: []; projs: [movie_0.title]; preds: [tv_series_0.title = "Kevin Spencer"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [director_0.name = "Kevin Spacey"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [actor_0.name = "Kevin Spacey"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [producer_0.name = "Kevin Spacey"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [writer_0.name = "Kevin Spacey"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [director_0.name = "Kevin Spacey"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [actor_0.name = "Kevin Spacey"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [producer_0.name = "Kevin Spacey"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [writer_0.name = "Kevin Spacey"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.6968529823555064; TR: 0.8662391053409028; QF: 0.24090909090909088; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Kevin Spacey" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6943991965450564; TR: 0.8662391053409028; QF: 0.22557292959377842; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Kevin Spacey" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6871659752986363; TR: 0.8662391053409028; QF: 0.18036529680365296; select movie_0.title from movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Kevin Spacey" and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6864353816913304; TR: 0.8662391053409028; QF: 0.17579908675799086; select movie_0.title from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Kevin Spacey" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6680577831588201; TR: 0.82915619758885; QF: 0.19999999999999998; select tv_series_0.title from made_by as made_by_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Kevin Spacey" and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6645022276032646; TR: 0.82915619758885; QF: 0.17777777777777778; select tv_series_0.title from directed_by as directed_by_0, director as director_0, tv_series as tv_series_0 where director_0.name = "Kevin Spacey" and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.6627244498254867; TR: 0.82915619758885; QF: 0.16666666666666666; select tv_series_0.title from tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Kevin Spacey" and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6597210959360569; TR: 0.82915619758885; QF: 0.14789570485773015; select tv_series_0.title from actor as actor_0, cast as cast_0, tv_series as tv_series_0 where actor_0.name = "Kevin Spacey" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid
TOT: 0.6207868270586465; TR: 0.8662391053409028; QF: 0.06457431457431458; select movie_0.title from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Kevin Spacey" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6206394608317569; TR: 0.8662391053409028; QF: 0.06365327565625406; select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Kevin Spacey" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid


00:36  INFO: ================
00:36  INFO: QUERY 50: Find the producers of all movies in which "Kate Winslet" is an actor
00:36  INFO: ================
00:38  INFO: ================
00:38  INFO: QUERY 100: How many movies did "Matt Damon" direct?
00:38  INFO: ================
00:40  INFO: ================
00:40  INFO: QUERY 121: Who acted in the most number of movies directed by "Jim Jarmusch"
00:40  INFO: ================
133. ROOT: ROOT; NA; ; (0) 
134. acted: NT; NA; ; (0) movie.release_year(0.63):| tv_series.release_year(0.63):| actor.name(0.62):| actor(0.62):| genre.genre(0.62):| genre(0.62):| made_by(0.61):| 
135. Who: CMT; NA; ; (0) director.name(1.0):| actor.name(1.0):| producer.name(1.0):| writer.name(1.0):| 
136. number of: FT; count; ; (0) 
139. most: FT; max; ; (0) 
140. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
142. directed: NT; NA; ; (0) directed_by(1.0):| director.name(0.72):| director(0.72):| written_by(0.68):| cast.role(0.67):| cast(0.67):| made_by(0.67):| 
143. Jim Jarmusch: VTTEXT; NA; ; (0) director.name(1.0):Jim Jarmusch; Jim Jarmusch; Tom Jarmusch; | actor.name(1.0):Jim Jarmusch; Jim Jarmusch; Tom Jarmusch; | producer.name(1.0):Jim Jarmusch; Jim Jarmusch; Tom Jarmusch; | writer.name(1.0):Jim Jarmusch; Jim Jarmusch; James R. Jarmusch; | movie.title(0.81):Behind Jim Jarmusch; Behind Jim Jarmusch; Focus on Jim Jarmusc; | cast.role(0.72):Jim Jarmusch's broth; Jim Jarmusch's broth; Jim Jamush; | tv_series.title(0.52):Earthworm Jim; Earthworm Jim; Jim Jam & Sunny; | 
Who, WP
acted, VBD
in, IN
the, DT
most, JJS
number, NN
of, IN
movies, NNS
directed, VBN
by, IN
Jim Jarmusch, NNP
nsubj(acted-2, Who-1)
root(ROOT-0, acted-2)
case(number-6, in-3)
det(number-6, the-4)
amod(number-6, most-5)
nmod(acted-2, number-6)
case(movies-8, of-7)
nmod(number-6, movies-8)
acl(movies-8, directed-9)
case(Jim Jarmusch-11, by-10)
nmod(directed-9, Jim Jarmusch-11)

PARSE TREE:(133) ROOT ROOT
    (135) Who CMT
        (134) acted NT
            (140) movies NT
                (142) directed NT
                    (143) Jim Jarmusch VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [director_0.name]; preds: [director_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [director_0.name]; preds: [actor_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [director_0.name]; preds: [producer_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [director_0.name]; preds: [writer_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [actor_0.name]; preds: [director_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [actor_0.name]; preds: [actor_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [actor_0.name]; preds: [producer_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [actor_0.name]; preds: [writer_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [producer_0.name]; preds: [director_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [producer_0.name]; preds: [actor_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [producer_0.name]; preds: [producer_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [producer_0.name]; preds: [writer_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [writer_0.name]; preds: [director_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [writer_0.name]; preds: [actor_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [writer_0.name]; preds: [producer_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1
TOT: 0.9307196706532547; NL: 0.9307196706532547; NL+AG: 0.9780540360102071; NL+QF: 0.9307196706532547; rels: [directed_by]; projs: [writer_0.name]; preds: [writer_0.name = "Jim Jarmusch"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 1

===========
RESULTS
===========
TOT: 0.6881542022960804; TR: 0.9307196706532547; QF: 0.1399446061508608; select director_0.name from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.name = "Jim Jarmusch" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid group by director_0.name order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6881542022960804; TR: 0.9307196706532547; QF: 0.1399446061508608; select actor_0.name from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Jim Jarmusch" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid group by actor_0.name order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6859842359221544; TR: 0.9307196706532547; QF: 0.12638231631382316; select director_0.name from directed_by as directed_by_0, director as director_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Jim Jarmusch" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid group by director_0.name order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6859842359221544; TR: 0.9307196706532547; QF: 0.12638231631382316; select writer_0.name from directed_by as directed_by_0, director as director_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where director_0.name = "Jim Jarmusch" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid group by writer_0.name order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6857650578399626; TR: 0.9307196706532547; QF: 0.12501245330012453; select director_0.name from directed_by as directed_by_0, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Jim Jarmusch" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid group by director_0.name order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6857650578399626; TR: 0.9307196706532547; QF: 0.12501245330012453; select producer_0.name from directed_by as directed_by_0, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where director_0.name = "Jim Jarmusch" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid group by producer_0.name order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6775520537882551; TR: 0.9307196706532547; QF: 0.07368117797695262; select director_0.name from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, director as director_1, movie as movie_0 where director_1.name = "Jim Jarmusch" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_1.did and directed_by_1.msid = movie_0.mid group by director_0.name order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6594751662460576; TR: 0.9307196706532547; QF: 0.06457431457431458; select director_0.name from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Jim Jarmusch" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid group by director_0.name order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6594751662460576; TR: 0.9307196706532547; QF: 0.06457431457431458; select producer_0.name from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where director_0.name = "Jim Jarmusch" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid group by producer_0.name order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6588198635112315; TR: 0.9307196706532547; QF: 0.06047867248165088; select director_0.name from actor as actor_0, cast as cast_0, cast as cast_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Jim Jarmusch" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid group by director_0.name order by count(distinct(movie_0.title)) desc limit 1


00:43  INFO: ================
00:43  INFO: QUERY 39: Which movies did "Alfred Hitchcock" direct?
00:43  INFO: ================
146. ROOT: ROOT; NA; ; (0) 
147. direct: NT; NA; ; (0) directed_by(1.0):| director.name(0.72):| director(0.72):| written_by(0.68):| cast.role(0.67):| cast(0.67):| made_by(0.67):| 
148. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
151. Alfred Hitchcock: VTTEXT; NA; ; (0) director.name(1.0):Alfred Hitchcock; Alfred Hitchcock; Sir Alfred Hitchcock; | actor.name(1.0):Alfred Hitchcock; Alfred Hitchcock; Alfred Hitchcock; | producer.name(1.0):Alfred Hitchcock; Alfred Hitchcock; Sir Alfred Hitchcock; | writer.name(1.0):Alfred Hitchcock; Alfred Hitchcock; Sir Alfred Hitchcock; | movie.title(0.85):Alfred Hitchcock's G; Alfred Hitchcock's G; Alfred Hitchcock and; | tv_series.title(0.85):Ciclo Alfred Hitchco; Ciclo Alfred Hitchco; Alfred Hitchcock Pre; | cast.role(0.84):Alfred Hitchcock fig; Alfred Hitchcock fig; Alfred Hitchcock fig; | 
Which, WDT
movies, NN
did, VBD
Alfred Hitchcock, NNP
direct, VB
det(movies-2, Which-1)
dobj(direct-5, movies-2)
aux(direct-5, did-3)
nsubj(direct-5, Alfred Hitchcock-4)
root(ROOT-0, direct-5)

PARSE TREE:(146) ROOT ROOT
    (147) direct NT
        (148) movies NT
        (151) Alfred Hitchcock VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8121428649800173; NL: 0.5525910798980354; NL+AG: 0.9394249139348947; NL+QF: 0.8121428649800173; rels: [cast]; projs: [movie_0.title]; preds: [actor_0.name = "Alfred Hitchcock"]; havings: []; superlative: []; blanks: 0
TOT: 0.7937005259840998; NL: 0.6875344335370706; NL+AG: 0.9394249139348947; NL+QF: 0.7937005259840998; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Alfred Hitchcock"]; havings: []; superlative: []; blanks: 1
TOT: 0.7735872574402521; NL: 0.6299605249474366; NL+AG: 0.9394249139348947; NL+QF: 0.7735872574402521; rels: [directed_by]; projs: [movie_0.title]; preds: [director_0.name = "Alfred Hitchcock"]; havings: []; superlative: []; blanks: 0
TOT: 0.7526840991457382; NL: 0.6299605249474366; NL+AG: 0.9394249139348947; NL+QF: 0.7526840991457382; rels: [directed_by]; projs: [movie_0.title]; preds: [actor_0.name = "Alfred Hitchcock"]; havings: []; superlative: []; blanks: 0
TOT: 0.7483259764566532; NL: 0.563731458429221; NL+AG: 0.9394249139348947; NL+QF: 0.7483259764566532; rels: [director]; projs: [movie_0.title]; preds: [director_0.name = "Alfred Hitchcock"]; havings: []; superlative: []; blanks: 0
TOT: 0.7394177869261628; NL: 0.6875344335370706; NL+AG: 0.9394249139348947; NL+QF: 0.7394177869261628; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Alfred Hitchcock"]; havings: []; superlative: []; blanks: 1
TOT: 0.7199357891220765; NL: 0.6875344335370706; NL+AG: 0.9394249139348947; NL+QF: 0.7199357891220765; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Alfred Hitchcock"]; havings: []; superlative: []; blanks: 1
TOT: 0.7198020225112817; NL: 0.5525910798980354; NL+AG: 0.9394249139348947; NL+QF: 0.7198020225112817; rels: [cast]; projs: [movie_0.title]; preds: [director_0.name = "Alfred Hitchcock"]; havings: []; superlative: []; blanks: 0
TOT: 0.7194481575612923; NL: 0.55297288261635; NL+AG: 0.9394249139348947; NL+QF: 0.7194481575612923; rels: [written_by]; projs: [movie_0.title]; preds: [writer_0.name = "Alfred Hitchcock"]; havings: []; superlative: []; blanks: 0
TOT: 0.7089349431548148; NL: 0.5047810172022357; NL+AG: 0.9394249139348947; NL+QF: 0.7089349431548148; rels: [cast]; projs: [actor_0.name]; preds: [actor_0.name = "Alfred Hitchcock"]; havings: []; superlative: []; blanks: 0
TOT: 0.7041078694647765; NL: 0.6875344335370706; NL+AG: 0.9394249139348947; NL+QF: 0.7041078694647765; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Alfred Hitchcock"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.6619414523285251; TR: 0.8121428649800173; QF: 0.22557292959377842; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Alfred Hitchcock" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.641261873615116; TR: 0.7735872574402521; QF: 0.24090909090909088; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Alfred Hitchcock" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.5993839855673405; TR: 0.7199357891220765; QF: 0.18036529680365296; select movie_0.title from movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Alfred Hitchcock" and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.5891566401656546; TR: 0.7041078694647765; QF: 0.17579908675799086; select movie_0.title from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Alfred Hitchcock" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.5871381275245776; TR: 0.8121428649800173; QF: 0.05713084383970459; select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Alfred Hitchcock" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid
TOT: 0.5859396881039161; TR: 0.8121428649800173; QF: 0.049640597460569334; select movie_0.title from actor as actor_0, cast as cast_0, company as company_0, copyright as copyright_0, copyright as copyright_1, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Alfred Hitchcock" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid
TOT: 0.5857886933330382; TR: 0.8121428649800173; QF: 0.048696880142583006; select movie_0.title from actor as actor_0, cast as cast_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where actor_0.name = "Alfred Hitchcock" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid
TOT: 0.5855003011196279; TR: 0.8121428649800173; QF: 0.046894428808769026; select movie_0.title from actor as actor_0, cast as cast_0, classification as classification_0, classification as classification_1, genre as genre_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Alfred Hitchcock" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = tv_series_0.sid
TOT: 0.5855003011196279; TR: 0.8121428649800173; QF: 0.046894428808769026; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where actor_0.name = "Alfred Hitchcock" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and movie_0.mid = written_by_0.msid and tv_series_0.sid = written_by_1.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid
TOT: 0.5853959306042985; TR: 0.8121428649800173; QF: 0.046242113087960154; select movie_0.title from actor as actor_0, cast as cast_0, made_by as made_by_0, made_by as made_by_1, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where actor_0.name = "Alfred Hitchcock" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid and made_by_1.msid = tv_series_0.sid and made_by_1.pid = producer_0.pid


00:45  INFO: ================
00:45  INFO: QUERY 10: In what year was "Kevin Spacey" born?
00:45  INFO: ================
00:48  INFO: ================
00:48  INFO: QUERY 13: What is the nationality of "Kevin Spacey"?
00:48  INFO: ================
00:48  INFO: ================
00:48  INFO: QUERY 74: Find all actors from Canada who acted in "James Bond" movies
00:48  INFO: ================
00:53  INFO: ================
00:53  INFO: QUERY 83: What are the major roles in the movie "Daddy Long Legs"
00:53  INFO: ================
181. ROOT: ROOT; NA; ; (0) 
182. What: CMT; NA; ; (0) 
184. roles: VTTEXT; NA; ; (0) movie.title(0.95):Roles; Rolê; The Role; | tv_series.title(0.95):Roles; Role Call; Role Play; | cast.role(0.82):| actor.name(0.69):| actor(0.69):| cast(0.64):| director.name(0.64):| 
186. major: VTTEXT; NA; ; (0) movie.title(1.0):Major; Major!; Major Minors; | director.name(1.0):Major; Major; Major; | actor.name(1.0):Major; Major; Major; | producer.name(1.0):Major; Major; BP Major; | company.name(1.0):Major; Major Zeus; Major Networks; | writer.name(1.0):Major; JL Major; BP Major; | cast.role(0.94):Major Major; 'Major'; Maj. Major Major; | 
187. Daddy Long Legs: VTTEXT; NA; ; (0) movie.title(0.95):Daddy Long Legs; Daddy Long Legs; Daddy Long Legs; | director.name(0.95):Daddy Long Legs; Daddy Long Legs; Daddy Long Legs of W; | actor.name(0.95):Daddy Long Legs; Daddy Long Legs; Daddy Longlegs; | cast.role(0.86):Lady Long Legs; Long Leg; Sweet Daddy Longlegs; | producer.name(0.76):Long Legs; Long Legs; Din Long Lee; | writer.name(0.61):Adam Long; Adam Long; Cody Long; | tv_series.title(0.54):A Long Long Crime Ag; A Long Long Crime Ag; The Long Gray Line; | 
190. movie: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movie; Movies; Movie Movie; | keyword.keyword(0.83):movie-in-movie; b-movie; z-movie; | actor.name(0.76):| actor(0.76):| 
What, WP
are, VBP
the, DT
major, JJ
roles, NNS
in, IN
the, DT
movie, NN
Daddy Long Legs, NNS
root(ROOT-0, What-1)
cop(What-1, are-2)
det(roles-5, the-3)
amod(roles-5, major-4)
nsubj(What-1, roles-5)
case(Daddy Long Legs-9, in-6)
det(Daddy Long Legs-9, the-7)
compound(Daddy Long Legs-9, movie-8)
nmod(roles-5, Daddy Long Legs-9)

PARSE TREE:(181) ROOT ROOT
    (182) What CMT
        (184) roles VTTEXT
            (186) major VTTEXT
            (187) Daddy Long Legs VTTEXT
                (190) movie NT


===========
TRANSLATIONS
===========
TOT: 0.9364940320609404; NL: 0.9364940320609404; NL+AG: 0.9912197108066971; NL+QF: 0.9364940320609404; rels: []; projs: [cast_0.role]; preds: [movie_0.title = "Major",movie_0.title = "Daddy Long Legs"]; havings: []; superlative: []; blanks: 0
TOT: 0.9364940320609404; NL: 0.9364940320609404; NL+AG: 0.9912197108066971; NL+QF: 0.9364940320609404; rels: []; projs: [cast_0.role]; preds: [director_0.name = "Major",movie_0.title = "Daddy Long Legs"]; havings: []; superlative: []; blanks: 0
TOT: 0.9364940320609404; NL: 0.9364940320609404; NL+AG: 0.9912197108066971; NL+QF: 0.9364940320609404; rels: []; projs: [cast_0.role]; preds: [actor_0.name = "Major",movie_0.title = "Daddy Long Legs"]; havings: []; superlative: []; blanks: 0
TOT: 0.9364940320609404; NL: 0.9364940320609404; NL+AG: 0.9912197108066971; NL+QF: 0.9364940320609404; rels: []; projs: [cast_0.role]; preds: [producer_0.name = "Major",movie_0.title = "Daddy Long Legs"]; havings: []; superlative: []; blanks: 0
TOT: 0.9364940320609404; NL: 0.9364940320609404; NL+AG: 0.9912197108066971; NL+QF: 0.9364940320609404; rels: []; projs: [cast_0.role]; preds: [company_0.name = "Major",movie_0.title = "Daddy Long Legs"]; havings: []; superlative: []; blanks: 0
TOT: 0.9364940320609404; NL: 0.9364940320609404; NL+AG: 0.9912197108066971; NL+QF: 0.9364940320609404; rels: []; projs: [cast_0.role]; preds: [writer_0.name = "Major",movie_0.title = "Daddy Long Legs"]; havings: []; superlative: []; blanks: 0
TOT: 0.9203479259126857; NL: 0.9182894476021624; NL+AG: 0.9851794127874313; NL+QF: 0.9203479259126857; rels: []; projs: [cast_0.role]; preds: [cast_0.role = "Major Major",movie_0.title = "Daddy Long Legs"]; havings: []; superlative: []; blanks: 0
TOT: 0.9153722211188877; NL: 0.88222320096765; NL+AG: 0.9901717764731464; NL+QF: 0.9153722211188877; rels: []; projs: [actor_0.name]; preds: [movie_0.title = "Major",movie_0.title = "Daddy Long Legs"]; havings: []; superlative: []; blanks: 0
TOT: 0.9072945538781675; NL: 0.8650735916549619; NL+AG: 0.9841314784538805; NL+QF: 0.9072945538781675; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Major Major",movie_0.title = "Daddy Long Legs"]; havings: []; superlative: []; blanks: 0
TOT: 0.9028875378827855; NL: 0.88222320096765; NL+AG: 0.9901717764731464; NL+QF: 0.9028875378827855; rels: []; projs: [actor_0.name]; preds: [director_0.name = "Major",movie_0.title = "Daddy Long Legs"]; havings: []; superlative: []; blanks: 0
TOT: 0.9019654209422344; NL: 0.88222320096765; NL+AG: 0.9901717764731464; NL+QF: 0.9019654209422344; rels: []; projs: [actor_0.name]; preds: [actor_0.name = "Major",movie_0.title = "Daddy Long Legs"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.736552152577079; TR: 0.9364940320609404; QF: 0.22557292959377842; select cast_0.role from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Major" and movie_0.title = "Daddy Long Legs" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7190324656674152; TR: 0.9072945538781675; QF: 0.22557292959377842; select actor_0.name from actor as actor_0, cast as cast_0, movie as movie_0 where cast_0.role = "Major Major" and movie_0.title = "Daddy Long Legs" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7087508458556967; TR: 0.9364940320609404; QF: 0.16784016636957813; select cast_0.role from cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Major" and movie_0.title = "Daddy Long Legs" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.7081279996678498; TR: 0.9203479259126857; QF: 0.10846987196705166; select cast_0.role from cast as cast_0, cast as cast_1, movie as movie_0 where cast_1.role = "Major Major" and movie_0.title = "Daddy Long Legs" and cast_0.msid = movie_0.mid and cast_1.msid = movie_0.mid
TOT: 0.7054451967722698; TR: 0.9364940320609404; QF: 0.14717985959816024; select cast_0.role from cast as cast_0, company as company_0, copyright as copyright_0, movie as movie_0 where company_0.name = "Major" and movie_0.title = "Daddy Long Legs" and cast_0.msid = movie_0.mid and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid
TOT: 0.7039073423272617; TR: 0.9364940320609404; QF: 0.13756826931685917; select cast_0.role from cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where movie_0.title = "Daddy Long Legs" and writer_0.name = "Major" and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.7035420455236087; TR: 0.9364940320609404; QF: 0.13528516429402812; select cast_0.role from cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where movie_0.title = "Daddy Long Legs" and producer_0.name = "Major" and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6918545899151136; TR: 0.9203479259126857; QF: 0.12278646479688922; select cast_0.role from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0 where cast_1.role = "Major Major" and movie_0.title = "Daddy Long Legs" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid
TOT: 0.6918545899151136; TR: 0.9203479259126857; QF: 0.12278646479688922; select cast_1.role from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0 where cast_0.role = "Major Major" and movie_0.title = "Daddy Long Legs" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid
TOT: 0.6810151827770554; TR: 0.9364940320609404; QF: 0.07367187887813353; select cast_0.role from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0, movie as movie_1 where movie_0.title = "Major" and movie_1.title = "Daddy Long Legs" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_1.mid


00:57  INFO: ================
00:57  INFO: QUERY 128: What is the latest movie by "Jim Jarmusch"
00:57  INFO: ================
192. ROOT: ROOT; NA; ; (0) 
193. What: CMT; NA; ; (0) 
195. movie: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movie; Movies; Movie Movie; | keyword.keyword(0.83):movie-in-movie; b-movie; z-movie; | actor.name(0.76):| actor(0.76):| 
197. latest: FT; max; ; (0) 
198. Jim Jarmusch: VTTEXT; NA; ; (0) director.name(1.0):Jim Jarmusch; Jim Jarmusch; Tom Jarmusch; | actor.name(1.0):Jim Jarmusch; Jim Jarmusch; Tom Jarmusch; | producer.name(1.0):Jim Jarmusch; Jim Jarmusch; Tom Jarmusch; | writer.name(1.0):Jim Jarmusch; Jim Jarmusch; James R. Jarmusch; | movie.title(0.81):Behind Jim Jarmusch; Behind Jim Jarmusch; Focus on Jim Jarmusc; | cast.role(0.72):Jim Jarmusch's broth; Jim Jarmusch's broth; Jim Jamush; | tv_series.title(0.52):Earthworm Jim; Earthworm Jim; Jim Jam & Sunny; | 
What, WP
is, VBZ
the, DT
latest, JJS
movie, NN
by, IN
Jim Jarmusch, NNP
root(ROOT-0, What-1)
cop(What-1, is-2)
det(movie-5, the-3)
amod(movie-5, latest-4)
nsubj(What-1, movie-5)
case(Jim Jarmusch-7, by-6)
nmod(movie-5, Jim Jarmusch-7)

PARSE TREE:(192) ROOT ROOT
    (193) What CMT
        (195) movie NT
            (198) Jim Jarmusch VTTEXT


===========
TRANSLATIONS
===========

===========
RESULTS
===========


00:57  INFO: ================
00:57  INFO: QUERY 114: Find all movies that star both "Angelina Jolie" and "Brad Pitt"
00:57  INFO: ================
201. ROOT: ROOT; NA; ; (0) 
202. Find: CMT; NA; ; (0) 
203. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
205. star: NT; NA; ; (0) actor.name(0.73):| actor(0.73):| writer.name(0.69):| writer(0.69):| cast.role(0.66):| cast(0.66):| producer.name(0.65):| 
207. Angelina Jolie: VTTEXT; NA; ; (0) director.name(1.0):Angelina Jolie; Angelina Jolie; Angelina Jolie Pitt; | actor.name(1.0):Angelina Jolie; Angelina Jolie; Angelina Jolie Pitt; | producer.name(1.0):Angelina Jolie; Angelina Jolie; Angelina Jolie Pitt; | writer.name(1.0):Angelina Jolie; Angelina Jolie; Angelina Jolie Pitt; | cast.role(0.82):Angelina Jones; Angelina John; Angelina Jones; | movie.title(0.78):Angelina; Angelina; Angelina; | keyword.keyword(0.62):referece-to-angelina; referece-to-angelina; | 
210. Brad Pitt: VTTEXT; NA; ; (0) actor.name(1.0):Brad Pitt; Brad Pitt; bRad sPitt; | cast.role(1.0):Brad Pitt'; Brad Pitt'; Brad Pitt #1; | producer.name(1.0):Brad Pitt; Brad Pitt; Mad Pitt; | director.name(0.78):Brad Pruitt; Brad Pruitt; Brad Witty; | writer.name(0.78):Brad Pruitt; Brad Pruitt; Brad Witt; | movie.title(0.72):Brad Pitt Video Port; Brad Pitt Video Port; Brad; | actor.birth_city(0.61):Brad; Brad; Pitt Meadows; | 
Find, VB
all, DT
movies, NNS
that, WDT
star, VB
both, CC
Angelina Jolie, NNP
and, CC
Brad Pitt, NNP
root(ROOT-0, Find-1)
det(movies-3, all-2)
dobj(Find-1, movies-3)
nsubj(star-5, that-4)
acl:relcl(movies-3, star-5)
cc:preconj(Angelina Jolie-7, both-6)
dobj(star-5, Angelina Jolie-7)
cc(Angelina Jolie-7, and-8)
conj(Angelina Jolie-7, Brad Pitt-9)

PARSE TREE:(201) ROOT ROOT
    (202) Find CMT
        (203) movies NT
            (205) star NT
                (207) Angelina Jolie VTTEXT
                (210) Brad Pitt VTTEXT


===========
TRANSLATIONS
===========
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Angelina Jolie",actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Angelina Jolie",actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Angelina Jolie",cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Angelina Jolie",producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Angelina Jolie",actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Angelina Jolie",actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Angelina Jolie",actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Angelina Jolie",actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Angelina Jolie",cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Angelina Jolie",producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Angelina Jolie",cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Angelina Jolie",cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Angelina Jolie",cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Angelina Jolie",cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Angelina Jolie",producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Angelina Jolie",producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Angelina Jolie",actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Angelina Jolie",cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Angelina Jolie",producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Angelina Jolie",producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Angelina Jolie",producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.7746557333405147; TR: 1.0; QF: 0.22557292959377842; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Angelina Jolie" and cast_0.role = "Brad Pitt'" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7468544266191325; TR: 1.0; QF: 0.16784016636957813; select movie_0.title from cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where cast_0.role = "Brad Pitt'" and director_0.name = "Angelina Jolie" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.7420109230906975; TR: 1.0; QF: 0.13756826931685917; select movie_0.title from cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where cast_0.role = "Brad Pitt'" and writer_0.name = "Angelina Jolie" and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.7416456262870444; TR: 1.0; QF: 0.13528516429402812; select movie_0.title from cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where cast_0.role = "Brad Pitt'" and producer_0.name = "Angelina Jolie" and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.7297223999041276; TR: 1.0; QF: 0.1399446061508608; select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.name = "Brad Pitt" and director_0.name = "Angelina Jolie" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.7273332554480099; TR: 1.0; QF: 0.12501245330012453; select movie_0.title from directed_by as directed_by_0, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where director_0.name = "Angelina Jolie" and producer_0.name = "Brad Pitt" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.7268162977870666; TR: 1.0; QF: 0.12178146791922942; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where actor_0.name = "Brad Pitt" and writer_0.name = "Angelina Jolie" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.7268162977870666; TR: 1.0; QF: 0.12178146791922942; select movie_0.title from actor as actor_0, actor as actor_1, cast as cast_0, cast as cast_1, movie as movie_0 where actor_0.name = "Angelina Jolie" and actor_1.name = "Brad Pitt" and actor_0.aid = cast_0.aid and actor_1.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_0.mid
TOT: 0.7265971197048748; TR: 1.0; QF: 0.12041160490553078; select movie_0.title from actor as actor_0, cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where actor_0.name = "Angelina Jolie" and producer_0.name = "Brad Pitt" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.7265971197048748; TR: 1.0; QF: 0.12041160490553078; select movie_0.title from actor as actor_0, cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where actor_0.name = "Brad Pitt" and producer_0.name = "Angelina Jolie" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid


01:01  INFO: ================
01:01  INFO: QUERY 49: Find the directors of all movies featuring "Kate Winslet"
01:01  INFO: ================
212. ROOT: ROOT; NA; ; (0) 
213. Find: CMT; NA; ; (0) 
214. directors: NT; NA; ; (0) director.name(1.0):| director(1.0):| movie.title(0.95):Director; Director; Director; | producer.name(0.95):Director; Co-Director; Director GT; | company.name(0.95):Directors; Directors; Director; | writer.name(0.95):Director; Director X; Director X.; | tv_series.title(0.88):Directors on Directo; The Directors; The Directors; | 
216. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
219. featuring: NT; NA; ; (0) tv_series.title(0.69):| tv_series(0.69):| movie.release_year(0.64):| tv_series.release_year(0.64):| made_by(0.64):| movie.title_aka(0.62):| tv_series.title_aka(0.62):| 
220. Kate Winslet: VTTEXT; NA; ; (0) actor.name(1.0):Kate Winslet; Kate Winslet; Kate Elizabeth Winsl; | cast.role(0.91):Kate Winsled; Kate Winsled; Kate Winslow; | producer.name(0.7):Kate Winters; Kate Winters; Kate Fewins; | writer.name(0.67):Kate Wincup; Kate Wincup; Kate Lewis; | director.name(0.64):Kate Lewis; Kate Lewis; Kate Lewis; | movie.title(0.57):Kate Winslet: What I; Kate Winslet: What I; Kate Wakes; | tv_series.title(0.52):Kate; Kate; Reel Late with Kate; | 
Find, VB
the, DT
directors, NNS
of, IN
all, DT
movies, NNS
featuring, VBG
Kate Winslet, NNP
root(ROOT-0, Find-1)
det(directors-3, the-2)
dobj(Find-1, directors-3)
case(movies-6, of-4)
det(movies-6, all-5)
nmod(directors-3, movies-6)
acl(movies-6, featuring-7)
dobj(featuring-7, Kate Winslet-8)

PARSE TREE:(212) ROOT ROOT
    (213) Find CMT
        (214) directors NT
            (216) movies NT
                (219) featuring NT
                    (220) Kate Winslet VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.966581842152465; NL+QF: 0.8979007600118484; rels: [movie]; projs: [director_0.name]; preds: [actor_0.name = "Kate Winslet"]; havings: []; superlative: []; blanks: 1
TOT: 0.8781973627841706; NL: 0.8767588692370368; NL+AG: 0.9557553770762472; NL+QF: 0.8781973627841706; rels: [movie]; projs: [director_0.name]; preds: [cast_0.role = "Kate Winsled"]; havings: []; superlative: []; blanks: 1
TOT: 0.8514988853123637; NL: 0.8286431523248086; NL+AG: 0.9331636843049301; NL+QF: 0.8514988853123637; rels: [tv_series]; projs: [director_0.name]; preds: [actor_0.name = "Kate Winslet"]; havings: []; superlative: []; blanks: 0
TOT: 0.8341792258725413; NL: 0.8176106028275605; NL+AG: 0.9331636843049301; NL+QF: 0.8341792258725413; rels: [tv_series]; projs: [director_0.name]; preds: [actor_0.name = "Kate Winslet"]; havings: []; superlative: []; blanks: 1
TOT: 0.8243736851135282; NL: 0.8091319949698292; NL+AG: 0.9223372192287124; NL+QF: 0.8243736851135282; rels: [tv_series]; projs: [director_0.name]; preds: [cast_0.role = "Kate Winsled"]; havings: []; superlative: []; blanks: 0
TOT: 0.8214569271217985; NL: 0.8202176198058104; NL+AG: 0.942763618984786; NL+QF: 0.8214569271217985; rels: [movie]; projs: [director_0.name]; preds: [producer_0.name = "Kate Winters"]; havings: []; superlative: []; blanks: 1
TOT: 0.8143691110925267; NL: 0.8115751926459973; NL+AG: 0.942763618984786; NL+QF: 0.8143691110925267; rels: [movie]; projs: [director_0.name]; preds: [writer_0.name = "Kate Wincup"]; havings: []; superlative: []; blanks: 1
TOT: 0.8135542281880938; NL: 0.8121449448487525; NL+AG: 0.9430353738912189; NL+QF: 0.8135542281880938; rels: [movie]; projs: [producer_0.name]; preds: [actor_0.name = "Kate Winslet"]; havings: []; superlative: []; blanks: 1
TOT: 0.8094656287110384; NL: 0.798359216893685; NL+AG: 0.9223372192287124; NL+QF: 0.8094656287110384; rels: [tv_series]; projs: [director_0.name]; preds: [cast_0.role = "Kate Winsled"]; havings: []; superlative: []; blanks: 1
TOT: 0.8074326226667177; NL: 0.7824671509344373; NL+AG: 0.9391044423637733; NL+QF: 0.8074326226667177; rels: [movie]; projs: [movie_0.mid]; preds: [movie_0.title = "Director",actor_0.name = "Kate Winslet"]; havings: []; superlative: []; blanks: 1
TOT: 0.8066676242922167; NL: 0.7652297948187159; NL+AG: 0.966581842152465; NL+QF: 0.8066676242922167; rels: [movie,tv_series]; projs: [director_0.name]; preds: [actor_0.name = "Kate Winslet"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.6737728442896348; TR: 0.8781973627841706; QF: 0.16784016636957813; select director_0.name from cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where cast_0.role = "Kate Winsled" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6684628559112366; TR: 0.8979007600118484; QF: 0.1399446061508608; select director_0.name from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.name = "Kate Winslet" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6591153069405453; TR: 0.8074326226667177; QF: 0.22557292959377842; select movie_0.mid from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Kate Winslet" and movie_0.title = "Director" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6338629212739125; TR: 0.8514988853123637; QF: 0.09770204479065239; select director_0.name from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, tv_series as tv_series_0 where actor_0.name = "Kate Winslet" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.6302139546578605; TR: 0.8243736851135282; QF: 0.09743589743589744; select director_0.name from cast as cast_0, directed_by as directed_by_0, director as director_0, tv_series as tv_series_0 where cast_0.role = "Kate Winsled" and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.620207411721089; TR: 0.8214569271217985; QF: 0.12501245330012453; select director_0.name from directed_by as directed_by_0, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Kate Winters" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6161739001857176; TR: 0.8143691110925267; QF: 0.12638231631382316; select director_0.name from directed_by as directed_by_0, director as director_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Kate Wincup" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.614729656617731; TR: 0.8135542281880938; QF: 0.12041160490553078; select producer_0.name from actor as actor_0, cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where actor_0.name = "Kate Winslet" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.5843119821365979; TR: 0.8074326226667177; QF: 0.05713084383970459; select movie_0.mid from actor as actor_0, cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Kate Winslet" and movie_0.title = "Director" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid
TOT: 0.5831135427159362; TR: 0.8074326226667177; QF: 0.049640597460569334; select movie_0.mid from actor as actor_0, cast as cast_0, company as company_0, copyright as copyright_0, copyright as copyright_1, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Kate Winslet" and movie_0.title = "Director" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid


01:03  INFO: ================
01:03  INFO: QUERY 28: Find all comedies produced in year 2015
01:03  INFO: ================
01:06  INFO: ================
01:06  INFO: QUERY 15: Find all actors born in Milan
01:06  INFO: ================
01:08  INFO: ================
01:08  INFO: QUERY 115: Find all actors who acted in the same movie as "Tom Hanks"
01:08  INFO: ================
239. ROOT: ROOT; NA; ; (0) 
240. Find: CMT; NA; ; (0) 
241. actors: NT; NA; all; (0) actor.name(1.0):| actor(1.0):| movie.title(0.95):Actors; Actors; Actors; | tv_series.title(0.95):Actors; Actor; The Actor Factor; | cast.role(0.95):Actors; Actors; Actors; | keyword.keyword(0.95):actors; actor-director; no-actors; | company.name(0.79):For Actors by Actors; Actors Loft; Actors Pool; | 
243. acted: NT; NA; ; (0) movie.release_year(0.63):| tv_series.release_year(0.63):| actor.name(0.62):| actor(0.62):| genre.genre(0.62):| genre(0.62):| made_by(0.61):| 
245. movie: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movie; Movies; Movie Movie; | keyword.keyword(0.83):movie-in-movie; b-movie; z-movie; | actor.name(0.76):| actor(0.76):| 
249. Tom Hanks: VTTEXT; NA; ; (0) director.name(1.0):Tom Hanks; Tom Hanks; Tom Hankins; | actor.name(1.0):Tom Hanks; Jim Hanks; Tom Banks; | producer.name(1.0):Tom Hanks; Tom Hanks; Tom Hanc; | writer.name(1.0):Tom Hanks; Tom Hanks; Tom Hankins; | cast.role(0.76):Young Tom Hanks; Tom Hanner; Tom H; | movie.title(0.65):Hank; Arly Hanks; Tom Horn; | tv_series.title(0.65):Hank; Hank; Hank; | 
Find, VB
all, DT
actors, NNS
who, WP
acted, VBD
in, IN
the, DT
same, JJ
movie, NN
as, IN
Tom Hanks, NNP
root(ROOT-0, Find-1)
det(actors-3, all-2)
dobj(Find-1, actors-3)
nsubj(acted-5, who-4)
acl:relcl(actors-3, acted-5)
case(movie-9, in-6)
det(movie-9, the-7)
amod(movie-9, same-8)
nmod(acted-5, movie-9)
case(Tom Hanks-11, as-10)
nmod(acted-5, Tom Hanks-11)

PARSE TREE:(239) ROOT ROOT
    (240) Find CMT
        (241) actors NT
            (243) acted NT
                (245) movie NT
                (249) Tom Hanks VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.966581842152465; NL+QF: 0.8979007600118484; rels: [movie]; projs: [actor_0.name]; preds: [director_0.name = "Tom Hanks"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.966581842152465; NL+QF: 0.8979007600118484; rels: [movie]; projs: [actor_0.name]; preds: [actor_0.name = "Tom Hanks"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.966581842152465; NL+QF: 0.8979007600118484; rels: [movie]; projs: [actor_0.name]; preds: [producer_0.name = "Tom Hanks"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.966581842152465; NL+QF: 0.8979007600118484; rels: [movie]; projs: [actor_0.name]; preds: [writer_0.name = "Tom Hanks"]; havings: []; superlative: []; blanks: 1
TOT: 0.8781405699117981; NL: 0.8389821044998752; NL+AG: 0.9331636843049301; NL+QF: 0.8781405699117981; rels: [actor]; projs: [actor_0.name]; preds: [actor_0.name = "Tom Hanks"]; havings: []; superlative: []; blanks: 1
TOT: 0.8721851340624786; NL: 0.8389821044998752; NL+AG: 0.943035373891219; NL+QF: 0.8721851340624786; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Tom Hanks"]; havings: []; superlative: []; blanks: 2
TOT: 0.871831294449845; NL: 0.8389821044998752; NL+AG: 0.943035373891219; NL+QF: 0.871831294449845; rels: [movie]; projs: [movie_0.title]; preds: [actor_0.name = "Tom Hanks"]; havings: []; superlative: []; blanks: 1
TOT: 0.8631148906993363; NL: 0.8389821044998752; NL+AG: 0.943035373891219; NL+QF: 0.8631148906993363; rels: [movie]; projs: [movie_0.title]; preds: [director_0.name = "Tom Hanks"]; havings: []; superlative: []; blanks: 1
TOT: 0.8623358559369992; NL: 0.8389821044998752; NL+AG: 0.9331636843049301; NL+QF: 0.8623358559369992; rels: [actor]; projs: [actor_0.name]; preds: [director_0.name = "Tom Hanks"]; havings: []; superlative: []; blanks: 1
TOT: 0.8602236844348266; NL: 0.8389821044998752; NL+AG: 0.943035373891219; NL+QF: 0.8602236844348266; rels: [movie]; projs: [movie_0.title]; preds: [writer_0.name = "Tom Hanks"]; havings: []; superlative: []; blanks: 1
TOT: 0.8579669246119673; NL: 0.8389821044998752; NL+AG: 0.943035373891219; NL+QF: 0.8579669246119673; rels: [movie]; projs: [movie_0.title]; preds: [producer_0.name = "Tom Hanks"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.6979668137780018; TR: 0.8721851340624786; QF: 0.22557292959377842; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Tom Hanks" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6949784535705665; TR: 0.8631148906993363; QF: 0.24090909090909088; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Tom Hanks" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6835567227549906; TR: 0.8602236844348266; QF: 0.18036529680365296; select movie_0.title from movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Tom Hanks" and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6814720732539692; TR: 0.8579669246119673; QF: 0.17579908675799086; select movie_0.title from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Tom Hanks" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6684628559112366; TR: 0.8979007600118484; QF: 0.1399446061508608; select actor_0.name from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Tom Hanks" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6655567537941756; TR: 0.8979007600118484; QF: 0.12178146791922942; select actor_0.name from actor as actor_0, cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Tom Hanks" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6655567537941756; TR: 0.8979007600118484; QF: 0.12178146791922942; select actor_0.name from actor as actor_0, actor as actor_1, cast as cast_0, cast as cast_1, movie as movie_0 where actor_1.name = "Tom Hanks" and actor_0.aid = cast_0.aid and actor_1.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_0.mid
TOT: 0.6653375757119838; TR: 0.8979007600118484; QF: 0.12041160490553078; select actor_0.name from actor as actor_0, cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Tom Hanks" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6493145987002399; TR: 0.8781405699117981; QF: 0.09436871145731905; select actor_0.name from actor as actor_0, actor as actor_1, cast as cast_0, cast as cast_1, tv_series as tv_series_0 where actor_1.name = "Tom Hanks" and actor_0.aid = cast_0.aid and actor_1.aid = cast_1.aid and cast_0.msid = tv_series_0.sid and cast_1.msid = tv_series_0.sid
TOT: 0.6403651036486938; TR: 0.8623358559369992; QF: 0.09770204479065239; select actor_0.name from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, tv_series as tv_series_0 where director_0.name = "Tom Hanks" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid


01:10  INFO: ================
01:10  INFO: QUERY 46: Who is the writer of the movie "Django Unchained"
01:10  INFO: ================
01:12  INFO: ================
01:12  INFO: QUERY 22: Who was the director of the movie Joy from 2015?
01:12  INFO: ================
262. ROOT: ROOT; NA; ; (0) 
263. Joy: NT; NA; ; (0) writer.name(0.61):| writer(0.61):| written_by(0.6):| director.birth_city(0.59):| director.birth_year(0.59):| actor.birth_city(0.59):| actor.birth_year(0.59):| 
264. Who: CMT; NA; ; (0) director.name(1.0):| actor.name(1.0):| producer.name(1.0):| writer.name(1.0):| 
266. director: NT; NA; ; (0) director.name(1.0):| director(1.0):| movie.title(0.95):Director; Director; Director; | producer.name(0.95):Director; Co-Director; Director GT; | company.name(0.95):Director; Directors; Directors; | writer.name(0.95):Director; Director X; Director X.; | tv_series.title(0.86):Directors on Directo; The Directors; The Directors; | 
268. movie: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movie; Movies; Movie Movie; | keyword.keyword(0.83):movie-in-movie; b-movie; z-movie; | actor.name(0.76):| actor(0.76):| 
271. 2015: VTNUM; NA; ; (0) movie.release_year(1.0):2015; 2015; 2015; | tv_series.release_year(1.0):2015; 2015; 2015; | 
Who, WP
was, VBD
the, DT
director, NN
of, IN
the, DT
movie, NN
Joy, VBN
from, IN
2015, CD
dobj(Joy-8, Who-1)
auxpass(Joy-8, was-2)
det(director-4, the-3)
nsubjpass(Joy-8, director-4)
case(movie-7, of-5)
det(movie-7, the-6)
nmod(director-4, movie-7)
root(ROOT-0, Joy-8)
case(2015-10, from-9)
nmod(Joy-8, 2015-10)

PARSE TREE:(262) ROOT ROOT
    (264) Who CMT
        (266) director NT
            (268) movie NT
            (263) Joy NT
                (271) 2015 VTNUM


===========
TRANSLATIONS
===========
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9702920339048415; NL+QF: 0.9174505626104981; rels: [movie]; projs: [director_0.name]; preds: [movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9702920339048415; NL+QF: 0.9174505626104981; rels: [movie]; projs: [director_0.name]; preds: [tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.8698663239835652; NL: 0.8689647470148877; NL+AG: 0.940584067809683; NL+QF: 0.8698663239835652; rels: [actor]; projs: [director_0.name]; preds: [movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.8689647470148877; NL: 0.8689647470148877; NL+AG: 0.940584067809683; NL+QF: 0.8689647470148877; rels: [actor]; projs: [director_0.name]; preds: [tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.846655699563006; NL: 0.846655699563006; NL+AG: 0.940584067809683; NL+QF: 0.846655699563006; rels: [movie]; projs: [producer_0.name]; preds: [movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.846655699563006; NL: 0.846655699563006; NL+AG: 0.940584067809683; NL+QF: 0.846655699563006; rels: [movie]; projs: [producer_0.name]; preds: [tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.8417155348343195; NL: 0.8417155348343195; NL+AG: 0.940584067809683; NL+QF: 0.8417155348343195; rels: [movie]; projs: [director_0.name]; preds: [movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.8417155348343195; NL: 0.8417155348343195; NL+AG: 0.940584067809683; NL+QF: 0.8417155348343195; rels: [movie]; projs: [director_0.name]; preds: [tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.8417155348343195; NL: 0.8417155348343195; NL+AG: 0.940584067809683; NL+QF: 0.8417155348343195; rels: [movie]; projs: [director_0.name]; preds: [movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.8417155348343195; NL: 0.8417155348343195; NL+AG: 0.940584067809683; NL+QF: 0.8417155348343195; rels: [movie]; projs: [director_0.name]; preds: [tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.8417155348343195; NL: 0.8417155348343195; NL+AG: 0.940584067809683; NL+QF: 0.8417155348343195; rels: []; projs: [director_0.name]; preds: [movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 3
TOT: 0.8417155348343195; NL: 0.8417155348343195; NL+AG: 0.940584067809683; NL+QF: 0.8417155348343195; rels: []; projs: [director_0.name]; preds: [tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 3
TOT: 0.8417155348343195; NL: 0.8417155348343195; NL+AG: 0.9386993405476363; NL+QF: 0.8417155348343195; rels: [movie]; projs: [director_0.name]; preds: []; havings: []; superlative: []; blanks: 3
TOT: 0.8417155348343195; NL: 0.8417155348343195; NL+AG: 0.940584067809683; NL+QF: 0.8417155348343195; rels: [movie]; projs: [actor_0.name]; preds: [movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.8417155348343195; NL: 0.8417155348343195; NL+AG: 0.940584067809683; NL+QF: 0.8417155348343195; rels: [movie]; projs: [actor_0.name]; preds: [tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.8417155348343195; NL: 0.8417155348343195; NL+AG: 0.940584067809683; NL+QF: 0.8417155348343195; rels: [movie]; projs: [producer_0.name]; preds: [movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.8417155348343195; NL: 0.8417155348343195; NL+AG: 0.940584067809683; NL+QF: 0.8417155348343195; rels: [movie]; projs: [producer_0.name]; preds: [tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.8417155348343195; NL: 0.8417155348343195; NL+AG: 0.940584067809683; NL+QF: 0.8417155348343195; rels: [movie]; projs: [writer_0.name]; preds: [movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 2
TOT: 0.8417155348343195; NL: 0.8417155348343195; NL+AG: 0.940584067809683; NL+QF: 0.8417155348343195; rels: [movie]; projs: [writer_0.name]; preds: [tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 2

===========
RESULTS
===========
TOT: 0.7275798567172636; TR: 0.9174505626104981; QF: 0.24090909090909088; select director_0.name from directed_by as directed_by_0, director as director_0, movie as movie_0 where movie_0.release_year = 2015 and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6796850542411065; TR: 0.8417155348343195; QF: 0.22557292959377842; select actor_0.name from actor as actor_0, cast as cast_0, movie as movie_0 where movie_0.release_year = 2015 and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6746853382245923; TR: 0.846655699563006; QF: 0.17579908675799086; select producer_0.name from made_by as made_by_0, movie as movie_0, producer as producer_0 where movie_0.release_year = 2015 and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6724518329946864; TR: 0.8417155348343195; QF: 0.18036529680365296; select writer_0.name from movie as movie_0, writer as writer_0, written_by as written_by_0 where movie_0.release_year = 2015 and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6720378299505463; TR: 0.8417155348343195; QF: 0.17777777777777778; select director_0.name from directed_by as directed_by_0, director as director_0, tv_series as tv_series_0 where tv_series_0.release_year = 2015 and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.652301400128579; TR: 0.9174505626104981; QF: 0.0694974315004099; select director_0.name from actor as actor_0, cast as cast_0, cast as cast_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where tv_series_0.release_year = 2015 and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.651250326934807; TR: 0.9174505626104981; QF: 0.06292822403933515; select director_0.name from company as company_0, copyright as copyright_0, copyright as copyright_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where tv_series_0.release_year = 2015 and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6510993321639291; TR: 0.9174505626104981; QF: 0.06198450672134882; select director_0.name from directed_by as directed_by_0, director as director_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where tv_series_0.release_year = 2015 and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid
TOT: 0.6508583986855775; TR: 0.9174505626104981; QF: 0.06047867248165088; select director_0.name from actor as actor_0, cast as cast_0, cast as cast_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where movie_0.release_year = 2015 and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.6508109399505189; TR: 0.9174505626104981; QF: 0.060182055387534836; select director_0.name from classification as classification_0, classification as classification_1, directed_by as directed_by_0, director as director_0, genre as genre_0, movie as movie_0, tv_series as tv_series_0 where tv_series_0.release_year = 2015 and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid


01:13  INFO: ================
01:13  INFO: QUERY 43: Who acts "Olivia Pope" in the series Scandal?
01:13  INFO: ================
01:16  INFO: ================
01:16  INFO: QUERY 26: Find all movies featuring "Kate Winslet"
01:16  INFO: ================
283. ROOT: ROOT; NA; ; (0) 
284. Find: CMT; NA; ; (0) 
285. featuring: NT; NA; ; (0) tv_series.title(0.69):| tv_series(0.69):| movie.release_year(0.64):| tv_series.release_year(0.64):| made_by(0.64):| movie.title_aka(0.62):| tv_series.title_aka(0.62):| 
286. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
288. Kate Winslet: VTTEXT; NA; ; (0) actor.name(1.0):Kate Winslet; Kate Winslet; Kate Elizabeth Winsl; | cast.role(0.91):Kate Winsled; Kate Winsled; Kate Winslow; | producer.name(0.7):Kate Winters; Kate Winters; Kate Fewins; | writer.name(0.67):Kate Wincup; Kate Wincup; Kate Lewis; | director.name(0.64):Kate Lewis; Kate Lewis; Kate Lewis; | movie.title(0.57):Kate Winslet: What I; Kate Winslet: What I; Kate Wakes; | tv_series.title(0.52):Kate; Kate; Reel Late with Kate; | 
Find, VB
all, DT
movies, NNS
featuring, VBG
Kate Winslet, NNP
root(ROOT-0, Find-1)
det(movies-3, all-2)
nsubj(featuring-4, movies-3)
dep(Find-1, featuring-4)
dobj(featuring-4, Kate Winslet-5)

PARSE TREE:(283) ROOT ROOT
    (284) Find CMT
        (286) movies NT
            (285) featuring NT
                (288) Kate Winslet VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Kate Winslet"]; havings: []; superlative: []; blanks: 1
TOT: 0.8427450466492298; NL: 0.839151207478158; NL+AG: 0.952071795731814; NL+QF: 0.8427450466492298; rels: []; projs: [movie_0.title]; preds: [cast_0.role = "Kate Winsled"]; havings: []; superlative: []; blanks: 1
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [actor_0.name = "Kate Winslet"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [actor_0.name = "Kate Winslet"]; havings: []; superlative: []; blanks: 0
TOT: 0.8009493937021362; NL: 0.7665480234959089; NL+AG: 0.9286845458401042; NL+QF: 0.8009493937021362; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Kate Winsled"]; havings: []; superlative: []; blanks: 1
TOT: 0.7949319369143819; NL: 0.7912922821972069; NL+AG: 0.9394249139348947; NL+QF: 0.7949319369143819; rels: []; projs: [actor_0.name]; preds: [actor_0.name = "Kate Winslet"]; havings: []; superlative: []; blanks: 1
TOT: 0.7905694150420949; NL: 0.7905694150420949; NL+AG: 0.9839174524106031; NL+QF: 0.7905694150420949; rels: []; projs: [tv_series_0.title]; preds: [cast_0.role = "Kate Winsled"]; havings: []; superlative: []; blanks: 0
TOT: 0.7905694150420949; NL: 0.7905694150420949; NL+AG: 0.9839174524106031; NL+QF: 0.7905694150420949; rels: []; projs: [tv_series_0.title]; preds: [cast_0.role = "Kate Winsled"]; havings: []; superlative: []; blanks: 0
TOT: 0.7759642449958687; NL: 0.7677835317727486; NL+AG: 0.9391833540180654; NL+QF: 0.7759642449958687; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Kate Winters"]; havings: []; superlative: []; blanks: 1
TOT: 0.7752036000363152; NL: 0.7570159291384058; NL+AG: 0.9391833540180654; NL+QF: 0.7752036000363152; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Kate Wincup"]; havings: []; superlative: []; blanks: 1
TOT: 0.7645314458836486; NL: 0.7645314458836486; NL+AG: 0.9394249139348947; NL+QF: 0.7645314458836486; rels: []; projs: [tv_series_0.title]; preds: [actor_0.name = "Kate Winslet"]; havings: []; superlative: []; blanks: 1
TOT: 0.7645314458836486; NL: 0.7645314458836486; NL+AG: 0.9394249139348947; NL+QF: 0.7645314458836486; rels: []; projs: [tv_series_0.title]; preds: [actor_0.name = "Kate Winslet"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.7208428515527406; TR: 0.8427450466492298; QF: 0.28431372549019607; select movie_0.title from cast as cast_0, movie as movie_0 where cast_0.role = "Kate Winsled" and cast_0.msid = movie_0.mid
TOT: 0.7130600738326354; TR: 0.8009493937021362; QF: 0.3924050632911392; select actor_0.name from actor as actor_0, cast as cast_0 where cast_0.role = "Kate Winsled" and actor_0.aid = cast_0.aid
TOT: 0.6943991965450564; TR: 0.8662391053409028; QF: 0.22557292959377842; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Kate Winslet" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6597210959360569; TR: 0.82915619758885; QF: 0.14789570485773015; select tv_series_0.title from actor as actor_0, cast as cast_0, tv_series as tv_series_0 where actor_0.name = "Kate Winslet" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid
TOT: 0.6522524047151566; TR: 0.7905694150420949; QF: 0.05128205128205128; select tv_series_0.title from cast as cast_0, tv_series as tv_series_0 where cast_0.role = "Kate Winsled" and cast_0.msid = tv_series_0.sid
TOT: 0.6325446721158837; TR: 0.7752036000363152; QF: 0.18036529680365296; select movie_0.title from movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Kate Wincup" and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6322704654843099; TR: 0.7759642449958687; QF: 0.17579908675799086; select movie_0.title from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Kate Winters" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.619595871741109; TR: 0.8662391053409028; QF: 0.05713084383970459; select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Kate Winslet" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid
TOT: 0.6183974323204473; TR: 0.8662391053409028; QF: 0.049640597460569334; select movie_0.title from actor as actor_0, cast as cast_0, company as company_0, copyright as copyright_0, copyright as copyright_1, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Kate Winslet" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid
TOT: 0.6182464375495695; TR: 0.8662391053409028; QF: 0.048696880142583006; select movie_0.title from actor as actor_0, cast as cast_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where actor_0.name = "Kate Winslet" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid


01:17  INFO: ================
01:17  INFO: QUERY 113: Find the number of companies which worked with "Gabriele Ferzetti"
01:17  INFO: ================
290. ROOT: ROOT; NA; ; (0) 
291. Find: CMT; NA; ; (0) 
292. number of: FT; count; ; (0) 
294. companies: NT; NA; ; (0) company.name(1.0):| company(1.0):| movie.title(0.95):Company; Company; Company; | cast.role(0.95):Company; Company; Company; | keyword.keyword(0.95):company; company-k; it-company; | tv_series.title(0.82):X Company; Eco Company; Company and Co; | actor.name(0.74):Eva Company; Angel Company; Marc Company; | 
296. worked: NT; NA; ; (0) directed_by(0.71):| made_by(0.64):| written_by(0.63):| director.name(0.62):| director(0.62):| cast.role(0.62):| cast(0.62):| 
298. Gabriele Ferzetti: VTTEXT; NA; ; (0) actor.name(1.0):Gabriele Ferzetti; Gabriele Ferzetti; Gabriel Ferzetti; | director.name(0.73):Gabriele Ferluga; Gabriele Ferluga; Gabriele Mainetti; | writer.name(0.73):Gabriele Ferluga; Gabriele Ferluga; Gabriele Kiefer; | cast.role(0.71):Gabriele Cercetti; Gabriele Cercetti; Gabriele Cercetti; | producer.name(0.69):Gabriele Mainetti; Gabriele Mainetti; Gabriele Gauler; | movie.title(0.53):Gabriele Dambrone; Gabriele Dambrone; For Gabriele; | company.name(0.53):San Gabriele; San Gabriele; Kranzelbinder Gabrie; | 
Find, VB
the, DT
number, NN
of, IN
companies, NNS
which, WDT
worked, VBD
with, IN
Gabriele Ferzetti, NNP
root(ROOT-0, Find-1)
det(number-3, the-2)
dobj(Find-1, number-3)
case(companies-5, of-4)
nmod(number-3, companies-5)
nsubj(worked-7, which-6)
acl:relcl(companies-5, worked-7)
case(Gabriele Ferzetti-9, with-8)
nmod(worked-7, Gabriele Ferzetti-9)

PARSE TREE:(290) ROOT ROOT
    (291) Find CMT
        (292) number of FT
            (294) companies NT
                (296) worked NT
                    (298) Gabriele Ferzetti VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8999134166259757; NL: 0.8907068407403163; NL+AG: 0.9623803610291506; NL+QF: 0.8999134166259757; rels: [directed_by]; projs: [count(distinct(company_0.name))]; preds: [actor_0.name = "Gabriele Ferzetti"]; havings: []; superlative: []; blanks: 0
TOT: 0.8699334634650558; NL: 0.8011251866475296; NL+AG: 0.9336787348794631; NL+QF: 0.8699334634650558; rels: [directed_by]; projs: [count(distinct(company_0.name))]; preds: [director_0.name = "Gabriele Ferluga"]; havings: []; superlative: []; blanks: 0
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(company_0.name))]; preds: [actor_0.name = "Gabriele Ferzetti"]; havings: []; superlative: []; blanks: 1
TOT: 0.8011251866475296; NL: 0.8011251866475296; NL+AG: 0.9336787348794631; NL+QF: 0.8011251866475296; rels: [directed_by]; projs: [count(distinct(company_0.name))]; preds: [writer_0.name = "Gabriele Ferluga"]; havings: []; superlative: []; blanks: 0
TOT: 0.7935295826543791; NL: 0.7935295826543791; NL+AG: 0.9336787348794631; NL+QF: 0.7935295826543791; rels: [directed_by]; projs: [count(distinct(company_0.name))]; preds: [cast_0.role = "Gabriele Cercetti"]; havings: []; superlative: []; blanks: 0
TOT: 0.7861263531177781; NL: 0.7861263531177781; NL+AG: 0.9336787348794631; NL+QF: 0.7861263531177781; rels: [directed_by]; projs: [count(distinct(company_0.name))]; preds: [producer_0.name = "Gabriele Mainetti"]; havings: []; superlative: []; blanks: 0
TOT: 0.7791182611450765; NL: 0.7791182611450765; NL+AG: 0.9336787348794631; NL+QF: 0.7791182611450765; rels: []; projs: [count(distinct(company_0.name))]; preds: [director_0.name = "Gabriele Ferluga"]; havings: []; superlative: []; blanks: 1
TOT: 0.7791182611450765; NL: 0.7791182611450765; NL+AG: 0.9336787348794631; NL+QF: 0.7791182611450765; rels: []; projs: [count(distinct(company_0.name))]; preds: [writer_0.name = "Gabriele Ferluga"]; havings: []; superlative: []; blanks: 1
TOT: 0.7752296961764223; NL: 0.7514591805029028; NL+AG: 0.9302378493889254; NL+QF: 0.7752296961764223; rels: [directed_by]; projs: [movie_0.mid]; preds: [movie_0.title = "Company",actor_0.name = "Gabriele Ferzetti"]; havings: []; superlative: []; blanks: 0
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9336787348794631; NL+QF: 0.7717313085512446; rels: []; projs: [count(distinct(company_0.name))]; preds: [cast_0.role = "Gabriele Cercetti"]; havings: []; superlative: []; blanks: 1
TOT: 0.7715650968439136; NL: 0.7715650968439136; NL+AG: 0.9177456737040814; NL+QF: 0.7715650968439136; rels: [directed_by]; projs: [count(distinct(company_0.name))]; preds: []; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.6504352242762399; TR: 0.8699334634650558; QF: 0.1321492704826038; select count(distinct(company_0.name)) from company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Gabriele Ferluga" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6484913409990234; TR: 0.8699334634650558; QF: 0.12; select count(distinct(company_0.name)) from company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, tv_series as tv_series_0 where director_0.name = "Gabriele Ferluga" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.6474824736586132; TR: 0.8662391053409028; QF: 0.12754842208801007; select count(distinct(company_0.name)) from actor as actor_0, cast as cast_0, company as company_0, copyright as copyright_0, movie as movie_0 where actor_0.name = "Gabriele Ferzetti" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid
TOT: 0.6448403866243693; TR: 0.8662391053409028; QF: 0.11103537812398571; select count(distinct(company_0.name)) from actor as actor_0, cast as cast_0, company as company_0, copyright as copyright_0, tv_series as tv_series_0 where actor_0.name = "Gabriele Ferzetti" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid
TOT: 0.6065875626664524; TR: 0.7717313085512446; QF: 0.14717985959816024; select count(distinct(company_0.name)) from cast as cast_0, company as company_0, copyright as copyright_0, movie as movie_0 where cast_0.role = "Gabriele Cercetti" and cast_0.msid = movie_0.mid and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid
TOT: 0.6021840842760459; TR: 0.7717313085512446; QF: 0.11965811965811966; select count(distinct(company_0.name)) from cast as cast_0, company as company_0, copyright as copyright_0, tv_series as tv_series_0 where cast_0.role = "Gabriele Cercetti" and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid
TOT: 0.5934688862737024; TR: 0.7791182611450765; QF: 0.11666666666666665; select count(distinct(company_0.name)) from company as company_0, copyright as copyright_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Gabriele Ferluga" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.5930400007671914; TR: 0.7791182611450765; QF: 0.11398613225097243; select count(distinct(company_0.name)) from company as company_0, copyright as copyright_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Gabriele Ferluga" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.5649902262424207; TR: 0.7752296961764223; QF: 0.05713084383970459; select movie_0.mid from actor as actor_0, cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Gabriele Ferzetti" and movie_0.title = "Company" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid


01:18  INFO: ================
01:18  INFO: QUERY 72: List all the Sci-Fi movies which released in 2010
01:18  INFO: ================
301. ROOT: ROOT; NA; ; (0) 
302. List: CMT; NA; ; (0) 
303. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
306. Sci-Fi: VTTEXT; NA; ; (0) cast.role(1.0):Sci-Fi; Sci-Fi; Sci-fi #1; | genre.genre(1.0):Sci-Fi; Sci-Fi; Film-Noir; | keyword.keyword(0.87):sci-fi-fan; sci-fi-fan; sci-fi-geek; | actor.name(0.75):Mr. Sci-Fi; Mr. Sci-Fi; That Sci-fiGuy; | producer.name(0.75):Mr. Sci-Fi; Mr. Sci-Fi; That Sci-fiGuy; | company.name(0.75):AXN Sci-Fi; AXN Sci-Fi; AXN Sci-Fi; | writer.name(0.75):Mr. Sci-Fi; Mr. Sci-Fi; That Sci-fiGuy; | 
307. released: NT; NA; ; (0) movie.release_year(1.0):| tv_series.release_year(1.0):| movie.title(0.64):| movie(0.64):| movie.title_aka(0.63):| tv_series.title_aka(0.63):| cast.role(0.63):| 
309. 2010: VTNUM; NA; ; (0) movie.release_year(1.0):2010; 2010; 2010; | tv_series.release_year(1.0):2010; 2010; 2010; | actor.birth_year(1.0):2010; 2010; | producer.birth_year(1.0):2010; | 
List, VB
all, PDT
the, DT
Sci-Fi, JJ
movies, NNS
which, WDT
released, VBN
in, IN
2010, CD
root(ROOT-0, List-1)
det:predet(movies-5, all-2)
det(movies-5, the-3)
amod(movies-5, Sci-Fi-4)
dobj(List-1, movies-5)
nsubj(released-7, which-6)
acl:relcl(movies-5, released-7)
case(2010-9, in-8)
nmod(released-7, 2010-9)

PARSE TREE:(301) ROOT ROOT
    (302) List CMT
        (303) movies NT
            (306) Sci-Fi VTTEXT
            (307) released NT
                (309) 2010 VTNUM


===========
TRANSLATIONS
===========
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [cast_0.role = "Sci-Fi",movie_0.release_year = 2010]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [cast_0.role = "Sci-Fi",tv_series_0.release_year = 2010]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [genre_0.genre = "Sci-Fi",movie_0.release_year = 2010]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [genre_0.genre = "Sci-Fi",tv_series_0.release_year = 2010]; havings: []; superlative: []; blanks: 0
TOT: 0.9636489271886979; NL: 0.9539972450774545; NL+AG: 0.983897512635319; NL+QF: 0.9636489271886979; rels: []; projs: [movie_0.title]; preds: [keyword_0.keyword = "sci-fi-fan",movie_0.release_year = 2010]; havings: []; superlative: []; blanks: 0
TOT: 0.9586445736399809; NL: 0.9539972450774545; NL+AG: 0.983897512635319; NL+QF: 0.9586445736399809; rels: []; projs: [movie_0.title]; preds: [keyword_0.keyword = "sci-fi-fan",tv_series_0.release_year = 2010]; havings: []; superlative: []; blanks: 0
TOT: 0.9360967216822134; NL: 0.9066811409991332; NL+AG: 0.9755572687079536; NL+QF: 0.9360967216822134; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Mr. Sci-Fi",movie_0.release_year = 2010]; havings: []; superlative: []; blanks: 0
TOT: 0.9336687832197524; NL: 0.9066811409991332; NL+AG: 0.9755572687079536; NL+QF: 0.9336687832197524; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Mr. Sci-Fi",tv_series_0.release_year = 2010]; havings: []; superlative: []; blanks: 0
TOT: 0.9290424491142183; NL: 0.9134802127015484; NL+AG: 0.9751546167589099; NL+QF: 0.9290424491142183; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Sci-Fi",movie_0.release_year = 2010]; havings: []; superlative: []; blanks: 0
TOT: 0.9290424491142183; NL: 0.9134802127015484; NL+AG: 0.9751546167589099; NL+QF: 0.9290424491142183; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Sci-Fi",tv_series_0.release_year = 2010]; havings: []; superlative: []; blanks: 0
TOT: 0.920764704798526; NL: 0.9066811409991332; NL+AG: 0.9755572687079536; NL+QF: 0.920764704798526; rels: []; projs: [movie_0.title]; preds: [company_0.name = "AXN Sci-Fi",movie_0.release_year = 2010]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.8151958235632027; TR: 1.0; QF: 0.28431372549019607; select movie_0.title from cast as cast_0, movie as movie_0 where cast_0.role = "Sci-Fi" and movie_0.release_year = 2010 and cast_0.msid = movie_0.mid
TOT: 0.7674225120940946; TR: 1.0; QF: 0.18036529680365296; select movie_0.title from classification as classification_0, genre as genre_0, movie as movie_0 where genre_0.genre = "Sci-Fi" and movie_0.release_year = 2010 and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid
TOT: 0.747630613901185; TR: 0.9636489271886979; QF: 0.1929824561403509; select movie_0.title from keyword as keyword_0, movie as movie_0, tags as tags_0 where keyword_0.keyword = "sci-fi-fan" and movie_0.release_year = 2010 and keyword_0.id = tags_0.kid and movie_0.mid = tags_0.msid
TOT: 0.7363137663498428; TR: 0.9360967216822134; QF: 0.22557292959377842; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Mr. Sci-Fi" and movie_0.release_year = 2010 and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7320812028090458; TR: 0.9290424491142183; QF: 0.22557292959377842; select actor_0.name from actor as actor_0, cast as cast_0, movie as movie_0 where cast_0.role = "Sci-Fi" and movie_0.release_year = 2010 and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7229570438632267; TR: 0.920764704798526; QF: 0.19958847736625515; select movie_0.title from company as company_0, copyright as copyright_0, movie as movie_0 where company_0.name = "AXN Sci-Fi" and movie_0.release_year = 2010 and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid
TOT: 0.719652846851278; TR: 0.9290424491142183; QF: 0.14789570485773015; select actor_0.name from actor as actor_0, cast as cast_0, tv_series as tv_series_0 where cast_0.role = "Sci-Fi" and tv_series_0.release_year = 2010 and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid
TOT: 0.7191187635404912; TR: 1.0; QF: 0.07367187887813353; select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0, tv_series as tv_series_0 where cast_0.role = "Sci-Fi" and tv_series_0.release_year = 2010 and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid
TOT: 0.7159887971665653; TR: 1.0; QF: 0.05410958904109588; select movie_0.title from classification as classification_0, classification as classification_1, genre as genre_0, movie as movie_0, tv_series as tv_series_0 where genre_0.genre = "Sci-Fi" and tv_series_0.release_year = 2010 and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = tv_series_0.sid
TOT: 0.7090769159145357; TR: 1.0; QF: 0.06935828877005348; select movie_0.title from cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where cast_0.role = "Sci-Fi" and tv_series_0.release_year = 2010 and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid


01:21  INFO: ================
01:21  INFO: QUERY 29: Who was the actor that played "Vinny Gambini" in the movie "My Cousin Vinny"?
01:21  INFO: ================
01:25  INFO: ================
01:25  INFO: QUERY 17: Which actors were born in Tehran
01:25  INFO: ================
01:25  INFO: ===== FOLD 1 =====
01:25  INFO: ===== Parsing Results =====
01:25  INFO: Total Queries: 98
01:25  INFO: Correctly Parsed: 98/98

01:25  INFO: ================
01:25  INFO: QUERY 35: Find all movies about Persians
01:25  INFO: ================
333. ROOT: ROOT; NA; ; (0) 
334. Find: CMT; NA; ; (0) 
335. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
337. Persians: VTTEXT; NA; ; (0) cast.role(1.0):Persian; Persian; Persian; | keyword.keyword(1.0):persian; persian-cat; persian-rug; | movie.title(0.82):Persian Version; Persian Eyes; The Persian; | director.name(0.74):Luke Persian; Persian Pink Panther; The Persian Ed Wood; | actor.name(0.74):Persian Lamb; Little Persian; Persian Princess Dia; | producer.name(0.74):Luke Persian; Persian Pink Panther; Persian Maglinte; | writer.name(0.74):Luke Persian; Persian Pink Panther; The Persian Ed Wood; | 
Find, VB
all, DT
movies, NNS
about, IN
Persians, NNP
root(ROOT-0, Find-1)
det(movies-3, all-2)
dobj(Find-1, movies-3)
case(Persians-5, about-4)
nmod(Find-1, Persians-5)

PARSE TREE:(333) ROOT ROOT
    (334) Find CMT
        (335) movies NT
        (337) Persians VTTEXT


===========
TRANSLATIONS
===========
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [cast_0.role = "Persian"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [movie_0.title]; preds: [keyword_0.keyword = "persian"]; havings: []; superlative: []; blanks: 0
TOT: 0.934763205166549; NL: 0.8593887047640296; NL+AG: 0.9889432485322897; NL+QF: 0.934763205166549; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Persian Lamb"]; havings: []; superlative: []; blanks: 0
TOT: 0.9159386160584653; NL: 0.8730692985095742; NL+AG: 0.9889432485322897; NL+QF: 0.9159386160584653; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Persian"]; havings: []; superlative: []; blanks: 0
TOT: 0.9107625612433827; NL: 0.8593887047640296; NL+AG: 0.9889432485322897; NL+QF: 0.9107625612433827; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Luke Persian"]; havings: []; superlative: []; blanks: 0
TOT: 0.9064126192070304; NL: 0.9064126192070304; NL+AG: 0.990136484098398; NL+QF: 0.9064126192070304; rels: []; projs: [movie_0.title]; preds: [movie_0.title = "Persian Version"]; havings: []; superlative: []; blanks: 0
TOT: 0.8730692985095742; NL: 0.8730692985095742; NL+AG: 0.9889432485322897; NL+QF: 0.8730692985095742; rels: []; projs: [actor_0.name]; preds: [keyword_0.keyword = "persian"]; havings: []; superlative: []; blanks: 0
TOT: 0.8593887047640296; NL: 0.8593887047640296; NL+AG: 0.9889432485322897; NL+QF: 0.8593887047640296; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Luke Persian"]; havings: []; superlative: []; blanks: 0
TOT: 0.8593887047640296; NL: 0.8593887047640296; NL+AG: 0.9889432485322897; NL+QF: 0.8593887047640296; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Luke Persian"]; havings: []; superlative: []; blanks: 0
TOT: 0.8411568677294218; NL: 0.7913610296113078; NL+AG: 0.9790797326306877; NL+QF: 0.8411568677294218; rels: []; projs: [actor_0.name]; preds: [movie_0.title = "Persian Version"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [cast_0.role = "Persian"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [keyword_0.keyword = "persian"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [cast_0.role = "Persian"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [keyword_0.keyword = "persian"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.8225496641820191; TR: 1.0; QF: 0.3302752293577982; select movie_0.title from cast as cast_0, movie as movie_0 where cast_0.role = "Persian" and cast_0.msid = movie_0.mid
TOT: 0.7826021304531838; TR: 0.9159386160584653; QF: 0.3958333333333333; select actor_0.name from actor as actor_0, cast as cast_0 where cast_0.role = "Persian" and actor_0.aid = cast_0.aid
TOT: 0.7681136141550597; TR: 1.0; QF: 0.18468468468468469; select movie_0.title from keyword as keyword_0, movie as movie_0, tags as tags_0 where keyword_0.keyword = "persian" and keyword_0.id = tags_0.kid and movie_0.mid = tags_0.msid
TOT: 0.7381477777156331; TR: 0.934763205166549; QF: 0.24203618756371048; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Persian Lamb" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7241226114525499; TR: 0.9107625612433827; QF: 0.24438131313131314; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Luke Persian" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.7062846402163776; TR: 1.0; QF: 0.05190656565656565; select movie_0.title from cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where cast_0.role = "Persian" and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid
TOT: 0.7047429192088338; TR: 1.0; QF: 0.042270809359416954; select movie_0.title from cast as cast_0, company as company_0, copyright as copyright_0, copyright as copyright_1, movie as movie_0, tv_series as tv_series_0 where cast_0.role = "Persian" and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid
TOT: 0.7043743481060856; TR: 1.0; QF: 0.03996723996723996; select movie_0.title from cast as cast_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where cast_0.role = "Persian" and cast_0.msid = tv_series_0.sid and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid
TOT: 0.7043743481060856; TR: 1.0; QF: 0.03996723996723996; select movie_0.title from cast as cast_0, classification as classification_0, classification as classification_1, genre as genre_0, movie as movie_0, tv_series as tv_series_0 where cast_0.role = "Persian" and cast_0.msid = tv_series_0.sid and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = tv_series_0.sid
TOT: 0.7040940678258052; TR: 1.0; QF: 0.03821548821548821; select movie_0.title from cast as cast_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where cast_0.role = "Persian" and cast_0.msid = tv_series_0.sid and movie_0.mid = written_by_0.msid and tv_series_0.sid = written_by_1.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid


01:26  INFO: ================
01:26  INFO: QUERY 33: Find all movies that were produced by Netflix
01:26  INFO: ================
01:27  INFO: ================
01:27  INFO: QUERY 45: Who directed the movie "Inglourious Basterds"?
01:27  INFO: ================
01:28  INFO: ================
01:28  INFO: QUERY 98: How many movies about Iraq war were produced in 2015?
01:28  INFO: ================
357. ROOT: ROOT; NA; ; (0) 
358. produced: NT; NA; ; (0) made_by(0.74):| directed_by(0.69):| producer.name(0.68):| producer(0.68):| cast.role(0.63):| cast(0.63):| written_by(0.63):| 
360. How many: CMT; count; ; (0) 
361. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
362. war: VTTEXT; NA; ; (0) movie.title(0.95):Wars; Wars; Hardware Wars; | tv_series.title(0.95):War; Car Wars; War Walks; | actor.name(0.95):War; War; War; | genre.genre(0.95):War; War; Documentary; | producer.name(0.95):War; Johnny Star Wars; Vivian War; | company.name(0.95):War; War on Want; NWA War Zone; | writer.name(0.95):War; Johnny Star Wars; Men Of War; | 
364. Iraq: VTTEXT; NA; ; (0) movie.title(1.0):Iraq; Iraq; Ski Iraq; | director.nationality(1.0):Iraq; Iraq; Iraq; | actor.nationality(1.0):Iraq; Iraq; Iraq; | producer.nationality(1.0):Iraq; Iraq; Iraq; | writer.nationality(1.0):Iraq; Iraq; Iraq; | cast.role(0.8):Ira - Iraq; Iraq Vet; Iraq Veteran; | keyword.keyword(0.72):iraq-iran-war; basra-iraq; hatra-iraq; | 
366. 2015: VTNUM; NA; ; (0) movie.release_year(1.0):2015; 2015; 2015; | tv_series.release_year(1.0):2015; 2015; 2015; | 
How, WRB
many, JJ
movies, NNS
about, IN
Iraq, NNP
war, NN
were, VBD
produced, VBN
in, IN
2015, CD
advmod(many-2, How-1)
dep(produced-8, many-2)
nsubjpass(produced-8, movies-3)
case(war-6, about-4)
compound(war-6, Iraq-5)
nmod(movies-3, war-6)
auxpass(produced-8, were-7)
root(ROOT-0, produced-8)
case(2015-10, in-9)
nmod(produced-8, 2015-10)

PARSE TREE:(357) ROOT ROOT
    (360) How many CMT
        (361) movies NT
            (362) war VTTEXT
                (364) Iraq VTTEXT
            (358) produced NT
                (366) 2015 VTNUM


===========
TRANSLATIONS
===========
TOT: 0.9089349482140021; NL: 0.9080868618771001; NL+AG: 0.9668624566648176; NL+QF: 0.9089349482140021; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",movie_0.title = "Iraq",movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 1
TOT: 0.9089349482140021; NL: 0.9080868618771001; NL+AG: 0.9668624566648176; NL+QF: 0.9089349482140021; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",director_0.nationality = "Iraq",movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 1
TOT: 0.9089349482140021; NL: 0.9080868618771001; NL+AG: 0.9668624566648176; NL+QF: 0.9089349482140021; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",actor_0.nationality = "Iraq",movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 1
TOT: 0.9089349482140021; NL: 0.9080868618771001; NL+AG: 0.9668624566648176; NL+QF: 0.9089349482140021; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",producer_0.nationality = "Iraq",movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 1
TOT: 0.9089349482140021; NL: 0.9080868618771001; NL+AG: 0.9668624566648176; NL+QF: 0.9089349482140021; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",writer_0.nationality = "Iraq",movie_0.release_year = 2015]; havings: []; superlative: []; blanks: 1
TOT: 0.9080868618771001; NL: 0.9080868618771001; NL+AG: 0.9668624566648176; NL+QF: 0.9080868618771001; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",movie_0.title = "Iraq",tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 1
TOT: 0.9080868618771001; NL: 0.9080868618771001; NL+AG: 0.9668624566648176; NL+QF: 0.9080868618771001; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",director_0.nationality = "Iraq",tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 1
TOT: 0.9080868618771001; NL: 0.9080868618771001; NL+AG: 0.9668624566648176; NL+QF: 0.9080868618771001; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",actor_0.nationality = "Iraq",tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 1
TOT: 0.9080868618771001; NL: 0.9080868618771001; NL+AG: 0.9668624566648176; NL+QF: 0.9080868618771001; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",producer_0.nationality = "Iraq",tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 1
TOT: 0.9080868618771001; NL: 0.9080868618771001; NL+AG: 0.9668624566648176; NL+QF: 0.9080868618771001; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",writer_0.nationality = "Iraq",tv_series_0.release_year = 2015]; havings: []; superlative: []; blanks: 1
TOT: 0.8957571279501789; NL: 0.8957571279501789; NL+AG: 0.9556911764705882; NL+QF: 0.8957571279501789; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",movie_0.title = "Iraq"]; havings: [count(distinct(producer_0.name)) = 2015]; superlative: []; blanks: 0
TOT: 0.8957571279501789; NL: 0.8957571279501789; NL+AG: 0.9556911764705882; NL+QF: 0.8957571279501789; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",director_0.nationality = "Iraq"]; havings: [count(distinct(producer_0.name)) = 2015]; superlative: []; blanks: 0
TOT: 0.8957571279501789; NL: 0.8957571279501789; NL+AG: 0.9556911764705882; NL+QF: 0.8957571279501789; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",actor_0.nationality = "Iraq"]; havings: [count(distinct(producer_0.name)) = 2015]; superlative: []; blanks: 0
TOT: 0.8957571279501789; NL: 0.8957571279501789; NL+AG: 0.9556911764705882; NL+QF: 0.8957571279501789; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",producer_0.nationality = "Iraq"]; havings: [count(distinct(producer_0.name)) = 2015]; superlative: []; blanks: 0
TOT: 0.8957571279501789; NL: 0.8957571279501789; NL+AG: 0.9556911764705882; NL+QF: 0.8957571279501789; rels: []; projs: [count(distinct(movie_0.title))]; preds: [genre_0.genre = "War",writer_0.nationality = "Iraq"]; havings: [count(distinct(producer_0.name)) = 2015]; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.6732873997435591; TR: 0.9089349482140021; QF: 0.12871979934479935; select count(distinct(movie_0.title)) from classification as classification_0, directed_by as directed_by_0, director as director_0, genre as genre_0, movie as movie_0 where director_0.nationality = "Iraq" and genre_0.genre = "War" and movie_0.release_year = 2015 and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6731748337163141; TR: 0.9089349482140021; QF: 0.12801626167451854; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, classification as classification_0, genre as genre_0, movie as movie_0 where actor_0.nationality = "Iraq" and genre_0.genre = "War" and movie_0.release_year = 2015 and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid
TOT: 0.6700015411577005; TR: 0.9089349482140021; QF: 0.10818318318318317; select count(distinct(movie_0.title)) from classification as classification_0, genre as genre_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where genre_0.genre = "War" and movie_0.release_year = 2015 and writer_0.nationality = "Iraq" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6697793189354783; TR: 0.9089349482140021; QF: 0.10679429429429428; select count(distinct(movie_0.title)) from classification as classification_0, genre as genre_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where genre_0.genre = "War" and movie_0.release_year = 2015 and producer_0.nationality = "Iraq" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6618726267771844; TR: 0.8957571279501789; QF: 0.10679429429429428; select count(*) from (select movie_0.title from classification as classification_0, genre as genre_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where genre_0.genre = "War" and producer_0.nationality = "Iraq" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid group by movie_0.title having count(distinct(producer_0.name)) = 2015) as subquery
TOT: 0.661557096713256; TR: 0.9089349482140021; QF: 0.05540540540540541; select count(distinct(movie_0.title)) from classification as classification_0, classification as classification_1, genre as genre_0, movie as movie_0, movie as movie_1 where genre_0.genre = "War" and movie_0.release_year = 2015 and movie_1.title = "Iraq" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = movie_1.mid
TOT: 0.6463256720676596; TR: 0.9089349482140021; QF: 0.06408268510652329; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, cast as cast_1, classification as classification_0, genre as genre_0, movie as movie_0, movie as movie_1 where genre_0.genre = "War" and movie_0.release_year = 2015 and movie_1.title = "Iraq" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_1.mid and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid
TOT: 0.6463256720676596; TR: 0.9089349482140021; QF: 0.06408268510652329; select count(distinct(movie_1.title)) from actor as actor_0, cast as cast_0, cast as cast_1, classification as classification_0, genre as genre_0, movie as movie_0, movie as movie_1 where genre_0.genre = "War" and movie_0.release_year = 2015 and movie_0.title = "Iraq" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_1.mid and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid
TOT: 0.6459138316558191; TR: 0.9089349482140021; QF: 0.06150868253252071; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, cast as cast_1, classification as classification_0, genre as genre_0, movie as movie_0, tv_series as tv_series_0 where actor_0.nationality = "Iraq" and genre_0.genre = "War" and movie_0.release_year = 2015 and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and classification_0.gid = genre_0.gid and classification_0.msid = tv_series_0.sid
TOT: 0.6458796652578386; TR: 0.9089349482140021; QF: 0.06129514254514255; select count(distinct(movie_1.title)) from classification as classification_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, genre as genre_0, movie as movie_0, movie as movie_1 where genre_0.genre = "War" and movie_0.release_year = 2015 and movie_0.title = "Iraq" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = movie_1.mid


01:33  INFO: ================
01:33  INFO: QUERY 0: What year is the movie "Dead Poets Society" from?
01:33  INFO: ================
01:35  INFO: ================
01:35  INFO: QUERY 24: Find all movies written by "Matt Damon"
01:35  INFO: ================
01:37  INFO: ================
01:37  INFO: QUERY 58: Find all movies in which "Robin Wright" appears
01:37  INFO: ================
386. ROOT: ROOT; NA; ; (0) 
387. Find: CMT; NA; ; (0) 
388. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
390. appears: NT; NA; ; (0) made_by(0.67):| written_by(0.63):| cast.role(0.63):| cast(0.63):| movie.release_year(0.62):| tv_series.release_year(0.62):| directed_by(0.61):| 
393. Robin Wright: VTTEXT; NA; ; (0) director.name(1.0):Robin Wright; Robin Wright; Robin Wright-Penn; | actor.name(1.0):Robin Wright; Robin Wright; Robin Wright; | producer.name(1.0):Robin Wright; Robin Wright; Robin Wright-Penn; | writer.name(0.8):Rob Wright; Quinn Wright; Kevin Wright; | cast.role(0.76):Tobi Wright; Tobi Wright; Lorin Wright; | movie.title(0.74):'In Wrong' Wright; Mr. Wright in Wrong; Wrong Wrights; | tv_series.title(0.7):Doobie Wright; Wrights Wrongs; Robin; | 
Find, VB
all, DT
movies, NNS
in, IN
which, WDT
Robin Wright, NNP
appears, VBZ
root(ROOT-0, Find-1)
det(movies-3, all-2)
dobj(Find-1, movies-3)
case(which-5, in-4)
nmod(appears-7, which-5)
nsubj(appears-7, Robin Wright-6)
acl:relcl(movies-3, appears-7)

PARSE TREE:(386) ROOT ROOT
    (387) Find CMT
        (388) movies NT
            (390) appears NT
                (393) Robin Wright VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.9215380699206003; NL: 0.8767285557917976; NL+AG: 0.9628121638266046; NL+QF: 0.9215380699206003; rels: [made_by]; projs: [movie_0.title]; preds: [producer_0.name = "Robin Wright"]; havings: []; superlative: []; blanks: 0
TOT: 0.880993118720071; NL: 0.8767285557917976; NL+AG: 0.9628121638266046; NL+QF: 0.880993118720071; rels: [made_by]; projs: [movie_0.title]; preds: [actor_0.name = "Robin Wright"]; havings: []; superlative: []; blanks: 0
TOT: 0.8767285557917976; NL: 0.8767285557917976; NL+AG: 0.9628121638266046; NL+QF: 0.8767285557917976; rels: [made_by]; projs: [movie_0.title]; preds: [director_0.name = "Robin Wright"]; havings: []; superlative: []; blanks: 0
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Robin Wright"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Robin Wright"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Robin Wright"]; havings: []; superlative: []; blanks: 1
TOT: 0.8418067921236444; NL: 0.8008741876262127; NL+AG: 0.9394249139348947; NL+QF: 0.8418067921236444; rels: [made_by]; projs: [actor_0.name]; preds: [producer_0.name = "Robin Wright"]; havings: []; superlative: []; blanks: 0
TOT: 0.8152471364450296; NL: 0.8152471364450296; NL+AG: 0.9396595043325072; NL+QF: 0.8152471364450296; rels: [made_by]; projs: [movie_0.title]; preds: [writer_0.name = "Rob Wright"]; havings: []; superlative: []; blanks: 0
TOT: 0.813337597770946; NL: 0.773789299368099; NL+AG: 0.9394249139348947; NL+QF: 0.813337597770946; rels: [made_by]; projs: [tv_series_0.title]; preds: [producer_0.name = "Robin Wright"]; havings: []; superlative: []; blanks: 0
TOT: 0.813337597770946; NL: 0.773789299368099; NL+AG: 0.9394249139348947; NL+QF: 0.813337597770946; rels: [made_by]; projs: [tv_series_0.title]; preds: [producer_0.name = "Robin Wright"]; havings: []; superlative: []; blanks: 0
TOT: 0.8062882005518943; NL: 0.8008741876262127; NL+AG: 0.9394249139348947; NL+QF: 0.8062882005518943; rels: [made_by]; projs: [actor_0.name]; preds: [actor_0.name = "Robin Wright"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.7188943139652778; TR: 0.9215380699206003; QF: 0.17129629629629628; select movie_0.title from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Robin Wright" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6974085379110619; TR: 0.8662391053409028; QF: 0.24438131313131314; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Robin Wright" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6970333178202455; TR: 0.8662391053409028; QF: 0.24203618756371048; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Robin Wright" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.660852337553792; TR: 0.813337597770946; QF: 0.21428571428571427; select tv_series_0.title from made_by as made_by_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Robin Wright" and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6545641400539277; TR: 0.9215380699206003; QF: 0.06831140362095607; select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Robin Wright" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6541181332441068; TR: 0.9215380699206003; QF: 0.06552386105957535; select movie_0.title from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Robin Wright" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.653016903953004; TR: 0.9215380699206003; QF: 0.05864117799018342; select movie_0.title from company as company_0, copyright as copyright_0, copyright as copyright_1, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Robin Wright" and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6527536388796125; TR: 0.9215380699206003; QF: 0.056995771281485565; select movie_0.title from classification as classification_0, classification as classification_1, genre as genre_0, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Robin Wright" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6527536388796125; TR: 0.9215380699206003; QF: 0.05699577128148557; select movie_0.title from keyword as keyword_0, made_by as made_by_0, movie as movie_0, producer as producer_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where producer_0.name = "Robin Wright" and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid
TOT: 0.6525534386794122; TR: 0.9215380699206003; QF: 0.055744520030234314; select movie_0.title from made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where producer_0.name = "Robin Wright" and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid and movie_0.mid = written_by_0.msid and tv_series_0.sid = written_by_1.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid


01:38  INFO: ================
01:38  INFO: QUERY 95: How many movies did "Humphrey Bogart" act in before 1942?
01:38  INFO: ================
01:40  INFO: ================
01:40  INFO: QUERY 64: Find all the female actors in the movie "Saving Private Ryan"
01:40  INFO: ================
01:51  INFO: ================
01:51  INFO: QUERY 107: How many female actors were born in "New York City" after 1980?
01:51  INFO: ================
02:10  INFO: ================
02:10  INFO: QUERY 53: Find all tv series produced by Netflix
02:10  INFO: ================
02:11  INFO: ================
02:11  INFO: QUERY 57: Who is the director of the tv series "House of Cards" from 2013?
02:11  INFO: ================
02:16  INFO: ================
02:16  INFO: QUERY 129: Which producer has worked with the most number of directors?
02:16  INFO: ================
02:17  INFO: ================
02:17  INFO: QUERY 16: How much was the budget of "Finding Nemo"
02:17  INFO: ================
02:17  INFO: ================
02:17  INFO: QUERY 9: When was "Kevin Spacey" born?
02:17  INFO: ================
02:19  INFO: ================
02:19  INFO: QUERY 88: What is the number of actors in the movie "Grumpier Old Men"?
02:19  INFO: ================
02:21  INFO: ================
02:21  INFO: QUERY 99: How many movies about Persians were released after 1990?
02:21  INFO: ================
490. ROOT: ROOT; NA; ; (0) 
491. released: NT; NA; ; (0) movie.release_year(1.0):| tv_series.release_year(1.0):| movie.title(0.64):| movie(0.64):| movie.title_aka(0.63):| tv_series.title_aka(0.63):| cast.role(0.63):| 
493. How many: CMT; count; ; (0) 
494. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
495. Persians: VTTEXT; NA; ; (0) cast.role(1.0):Persian; Persian; Persian; | keyword.keyword(1.0):persian; persian-cat; persian-rug; | movie.title(0.82):Persian Version; Persian Eyes; The Persian; | director.name(0.74):Luke Persian; Persian Pink Panther; The Persian Ed Wood; | actor.name(0.74):Persian Lamb; Little Persian; Persian Princess Dia; | producer.name(0.74):Luke Persian; Persian Pink Panther; Persian Maglinte; | writer.name(0.74):Luke Persian; Persian Pink Panther; The Persian Ed Wood; | 
498. 1990: VTNUM; NA; ; (0) movie.release_year(1.0):2012; 2014; 2015; | director.birth_year(1.0):1993; 1994; 1996; | tv_series.release_year(1.0):2014; 1991; 2014; | actor.birth_year(1.0):1999; 2003; 1993; | producer.birth_year(1.0):1993; 1997; 1995; | writer.birth_year(1.0):1993; 1994; 1998; | 
499. after: OT; >; ; (0) 
How, WRB
many, JJ
movies, NNS
about, IN
Persians, NNP
were, VBD
released, VBN
after, IN
1990, CD
advmod(many-2, How-1)
dep(released-7, many-2)
nsubjpass(released-7, movies-3)
case(Persians-5, about-4)
nmod(movies-3, Persians-5)
auxpass(released-7, were-6)
root(ROOT-0, released-7)
case(1990-9, after-8)
nmod(released-7, 1990-9)

PARSE TREE:(490) ROOT ROOT
    (493) How many CMT
        (494) movies NT
            (495) Persians VTTEXT
            (491) released NT
                (498) 1990 VTNUM
                    (499) after OT


===========
TRANSLATIONS
===========
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [count(distinct(movie_0.title))]; preds: [cast_0.role = "Persian",movie_0.release_year > 1990]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [count(distinct(movie_0.title))]; preds: [keyword_0.keyword = "persian",movie_0.release_year > 1990]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [count(distinct(movie_0.title))]; preds: [cast_0.role = "Persian",tv_series_0.release_year > 1990]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [count(distinct(movie_0.title))]; preds: [keyword_0.keyword = "persian",tv_series_0.release_year > 1990]; havings: []; superlative: []; blanks: 0
TOT: 0.938774317844795; NL: 0.936592398786078; NL+AG: 0.9772495308342077; NL+QF: 0.938774317844795; rels: []; projs: [count(distinct(movie_0.title))]; preds: [movie_0.title = "Persian Version",movie_0.release_year > 1990]; havings: []; superlative: []; blanks: 0
TOT: 0.936592398786078; NL: 0.936592398786078; NL+AG: 0.9772495308342077; NL+QF: 0.936592398786078; rels: []; projs: [count(distinct(movie_0.title))]; preds: [movie_0.title = "Persian Version",tv_series_0.release_year > 1990]; havings: []; superlative: []; blanks: 0
TOT: 0.9356150334650815; NL: 0.9039125735618705; NL+AG: 0.9744973003694231; NL+QF: 0.9356150334650815; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Luke Persian",movie_0.release_year > 1990]; havings: []; superlative: []; blanks: 0
TOT: 0.9202610931284728; NL: 0.9039125735618705; NL+AG: 0.9744973003694231; NL+QF: 0.9202610931284728; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Persian Lamb",movie_0.release_year > 1990]; havings: []; superlative: []; blanks: 0
TOT: 0.9197930938122945; NL: 0.9039125735618705; NL+AG: 0.9744973003694231; NL+QF: 0.9197930938122945; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Luke Persian",tv_series_0.release_year > 1990]; havings: []; superlative: []; blanks: 0
TOT: 0.9179163170625435; NL: 0.9039125735618705; NL+AG: 0.9744973003694231; NL+QF: 0.9179163170625435; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Persian Lamb",tv_series_0.release_year > 1990]; havings: []; superlative: []; blanks: 0
TOT: 0.9134802127015484; NL: 0.9134802127015484; NL+AG: 0.9717124183006537; NL+QF: 0.9134802127015484; rels: []; projs: [count(distinct(actor_0.name))]; preds: [cast_0.role = "Persian",movie_0.release_year > 1990]; havings: []; superlative: []; blanks: 0
TOT: 0.9134802127015484; NL: 0.9134802127015484; NL+AG: 0.9717124183006537; NL+QF: 0.9134802127015484; rels: []; projs: [count(distinct(actor_0.name))]; preds: [keyword_0.keyword = "persian",movie_0.release_year > 1990]; havings: []; superlative: []; blanks: 0
TOT: 0.9134802127015484; NL: 0.9134802127015484; NL+AG: 0.9717124183006537; NL+QF: 0.9134802127015484; rels: []; projs: [count(distinct(actor_0.name))]; preds: [cast_0.role = "Persian",tv_series_0.release_year > 1990]; havings: []; superlative: []; blanks: 0
TOT: 0.9134802127015484; NL: 0.9134802127015484; NL+AG: 0.9717124183006537; NL+QF: 0.9134802127015484; rels: []; projs: [count(distinct(actor_0.name))]; preds: [keyword_0.keyword = "persian",tv_series_0.release_year > 1990]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.8225496641820191; TR: 1.0; QF: 0.3302752293577982; select count(distinct(movie_0.title)) from cast as cast_0, movie as movie_0 where cast_0.role = "Persian" and movie_0.release_year > 1990 and cast_0.msid = movie_0.mid
TOT: 0.7681136141550597; TR: 1.0; QF: 0.18468468468468469; select count(distinct(movie_0.title)) from keyword as keyword_0, movie as movie_0, tags as tags_0 where keyword_0.keyword = "persian" and movie_0.release_year > 1990 and keyword_0.id = tags_0.kid and movie_0.mid = tags_0.msid
TOT: 0.7390340947855691; TR: 0.9356150334650815; QF: 0.24438131313131314; select count(distinct(movie_0.title)) from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Luke Persian" and movie_0.release_year > 1990 and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.7294465104927874; TR: 0.9202610931284728; QF: 0.24203618756371048; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Persian Lamb" and movie_0.release_year > 1990 and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7253779822366329; TR: 0.9134802127015484; QF: 0.24203618756371048; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, movie as movie_0 where cast_0.role = "Persian" and movie_0.release_year > 1990 and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7199981802509168; TR: 1.0; QF: 0.07916823331829348; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0, tv_series as tv_series_0 where cast_0.role = "Persian" and tv_series_0.release_year > 1990 and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid
TOT: 0.7161961277848548; TR: 1.0; QF: 0.05540540540540541; select count(distinct(movie_0.title)) from keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where keyword_0.keyword = "persian" and tv_series_0.release_year > 1990 and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid
TOT: 0.7101875457617928; TR: 0.9134802127015484; QF: 0.14709595959595959; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, tv_series as tv_series_0 where cast_0.role = "Persian" and tv_series_0.release_year > 1990 and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid
TOT: 0.7093227275113456; TR: 1.0; QF: 0.07089461125011584; select count(distinct(movie_0.title)) from cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where cast_0.role = "Persian" and tv_series_0.release_year > 1990 and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid
TOT: 0.7077810065038018; TR: 1.0; QF: 0.061258854952967144; select count(distinct(movie_0.title)) from cast as cast_0, company as company_0, copyright as copyright_0, copyright as copyright_1, movie as movie_0, tv_series as tv_series_0 where cast_0.role = "Persian" and tv_series_0.release_year > 1990 and cast_0.msid = movie_0.mid and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid


02:22  INFO: ================
02:22  INFO: QUERY 91: What is the number of movies directed by "Woody Allen" per year?
02:22  INFO: ================
02:26  INFO: ================
02:26  INFO: QUERY 130: Find the latest movie which "Gabriele Ferzetti" acted in
02:26  INFO: ================
514. ROOT: ROOT; NA; ; (0) 
515. Find: CMT; NA; ; (0) 
516. movie: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movie; Movies; Movie Movie; | keyword.keyword(0.83):movie-in-movie; b-movie; z-movie; | actor.name(0.76):| actor(0.76):| 
518. latest: FT; max; ; (0) 
519. acted: NT; NA; ; (0) movie.release_year(0.63):| tv_series.release_year(0.63):| actor.name(0.62):| actor(0.62):| genre.genre(0.62):| genre(0.62):| made_by(0.61):| 
521. Gabriele Ferzetti: VTTEXT; NA; ; (0) actor.name(1.0):Gabriele Ferzetti; Gabriele Ferzetti; Gabriel Ferzetti; | director.name(0.73):Gabriele Ferluga; Gabriele Ferluga; Gabriele Mainetti; | writer.name(0.73):Gabriele Ferluga; Gabriele Ferluga; Gabriele Kiefer; | cast.role(0.71):Gabriele Cercetti; Gabriele Cercetti; Gabriele Cercetti; | producer.name(0.69):Gabriele Mainetti; Gabriele Mainetti; Gabriele Gauler; | movie.title(0.53):Gabriele Dambrone; Gabriele Dambrone; For Gabriele; | company.name(0.53):San Gabriele; San Gabriele; Kranzelbinder Gabrie; | 
Find, VB
the, DT
latest, JJS
movie, NN
which, WDT
Gabriele Ferzetti, NNP
acted, VBD
in, RP
root(ROOT-0, Find-1)
det(movie-4, the-2)
amod(movie-4, latest-3)
dobj(Find-1, movie-4)
dobj(acted-7, which-5)
nsubj(acted-7, Gabriele Ferzetti-6)
acl:relcl(movie-4, acted-7)
compound:prt(acted-7, in-8)

PARSE TREE:(514) ROOT ROOT
    (515) Find CMT
        (516) movie NT
            (519) acted NT
                (521) Gabriele Ferzetti VTTEXT


===========
TRANSLATIONS
===========

===========
RESULTS
===========


02:26  INFO: ================
02:26  INFO: QUERY 122: Find the movie which is classified in the most number of genres
02:26  INFO: ================
02:28  INFO: ================
02:28  INFO: QUERY 62: Find all actors from Italy born after 1980
02:28  INFO: ================
02:30  INFO: ================
02:30  INFO: QUERY 27: What was the budget of the movie Juno from 2007?
02:30  INFO: ================
02:33  INFO: ================
02:33  INFO: QUERY 20: Find the actor who played "Captain Miller" in the movie "Saving Private Ryan"
02:33  INFO: ================
02:37  INFO: ================
02:37  INFO: QUERY 117: Find all movies featuring "Benedict Cumberbatch" and "Keira Knightley"
02:37  INFO: ================
02:39  INFO: ================
02:39  INFO: QUERY 119: What is the maximum number of movies in which "Brad Pitt" act in a given year?
02:39  INFO: ================
581. ROOT: ROOT; NA; ; (0) 
582. What: CMT; NA; ; (0) 
584. number of: FT; count; ; (0) 
586. maximum: FT; max; ; (0) 
587. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
589. act: NT; NA; ; (0) movie.release_year(0.63):| tv_series.release_year(0.63):| actor.name(0.62):| actor(0.62):| genre.genre(0.62):| genre(0.62):| made_by(0.61):| 
592. Brad Pitt: VTTEXT; NA; ; (0) actor.name(1.0):Brad Pitt; Brad Pitt; bRad sPitt; | cast.role(1.0):Brad Pitt'; Brad Pitt'; Brad Pitt #1; | producer.name(1.0):Brad Pitt; Brad Pitt; Mad Pitt; | director.name(0.78):Brad Pruitt; Brad Pruitt; Brad Witty; | writer.name(0.78):Brad Pruitt; Brad Pruitt; Brad Witt; | movie.title(0.72):Brad Pitt Video Port; Brad Pitt Video Port; Brad; | actor.birth_city(0.61):Brad; Brad; Pitt Meadows; | 
593. year: NT; NA; ; (0) movie.release_year(1.0):| director.birth_year(1.0):| tv_series.release_year(1.0):| actor.birth_year(1.0):| producer.birth_year(1.0):| writer.birth_year(1.0):| movie.title(0.95):Year; Years; Years; | 
596. given: NT; NA; ; (0) made_by(0.8):| directed_by(0.68):| written_by(0.67):| cast.role(0.66):| cast(0.66):| movie.release_year(0.59):| tv_series.release_year(0.59):| 
What, WP
is, VBZ
the, DT
maximum, JJ
number, NN
of, IN
movies, NNS
in, IN
which, WDT
Brad Pitt, NNP
act, VBP
in, IN
a, DT
given, VBN
year, NN
root(ROOT-0, What-1)
cop(What-1, is-2)
det(number-5, the-3)
amod(number-5, maximum-4)
nsubj(What-1, number-5)
case(movies-7, of-6)
nmod(number-5, movies-7)
case(which-9, in-8)
nmod(act-11, which-9)
nsubj(act-11, Brad Pitt-10)
acl:relcl(movies-7, act-11)
case(year-15, in-12)
det(year-15, a-13)
amod(year-15, given-14)
nmod(act-11, year-15)

PARSE TREE:(581) ROOT ROOT
    (582) What CMT
        (584) number of FT
            (586) maximum FT
            (587) movies NT
                (589) act NT
                    (592) Brad Pitt VTTEXT
                    (593) year NT
                        (596) given NT


===========
TRANSLATIONS
===========
TOT: 0.7791182611450765; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7791182611450765; rels: []; projs: [actor_0.birth_year]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7743081244497138; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7743081244497138; rels: []; projs: [movie_0.release_year]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [director_0.birth_year]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [tv_series_0.release_year]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [producer_0.birth_year]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [writer_0.birth_year]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [movie_0.release_year]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [director_0.birth_year]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [tv_series_0.release_year]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [actor_0.birth_year]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [producer_0.birth_year]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [writer_0.birth_year]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [movie_0.release_year]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [director_0.birth_year]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [tv_series_0.release_year]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [actor_0.birth_year]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [producer_0.birth_year]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2
TOT: 0.7717313085512446; NL: 0.7717313085512446; NL+AG: 0.9323354200596522; NL+QF: 0.7717313085512446; rels: []; projs: [writer_0.birth_year]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: [count(distinct(movie_0.title)) desc limit 1]; blanks: 2

===========
RESULTS
===========
TOT: 0.685588449312766; TR: 0.7717313085512446; QF: 0.3302752293577982; select movie_0.release_year from cast as cast_0, movie as movie_0 where cast_0.role = "Brad Pitt'" and cast_0.msid = movie_0.mid group by movie_0.release_year order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6447608113027498; TR: 0.7791182611450765; QF: 0.24203618756371048; select actor_0.birth_year from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Brad Pitt" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid group by actor_0.birth_year order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.641874729285532; TR: 0.7743081244497138; QF: 0.24203618756371048; select movie_0.release_year from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Brad Pitt" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid group by movie_0.release_year order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6403286397464506; TR: 0.7717313085512446; QF: 0.24203618756371048; select actor_0.birth_year from actor as actor_0, cast as cast_0, movie as movie_0 where cast_0.role = "Brad Pitt'" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid group by actor_0.birth_year order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6290102571436643; TR: 0.7717313085512446; QF: 0.17129629629629628; select movie_0.release_year from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Brad Pitt" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid group by movie_0.release_year order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6290102571436643; TR: 0.7717313085512446; QF: 0.17129629629629628; select producer_0.birth_year from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Brad Pitt" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid group by producer_0.birth_year order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6113966296307931; TR: 0.7717313085512446; QF: 0.1772365281252896; select director_0.birth_year from cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where cast_0.role = "Brad Pitt'" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid group by director_0.birth_year order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6059201986543621; TR: 0.7717313085512446; QF: 0.143008834522596; select writer_0.birth_year from cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where cast_0.role = "Brad Pitt'" and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid group by writer_0.birth_year order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.6055498282839917; TR: 0.7717313085512446; QF: 0.14069401970778117; select producer_0.birth_year from cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where cast_0.role = "Brad Pitt'" and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid group by producer_0.birth_year order by count(distinct(movie_0.title)) desc limit 1
TOT: 0.5937180880840978; TR: 0.7717313085512446; QF: 0.14592525020850708; select director_0.birth_year from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.name = "Brad Pitt" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid group by director_0.birth_year order by count(distinct(movie_0.title)) desc limit 1


02:41  INFO: ================
02:41  INFO: QUERY 116: What movies have the same director as the movie "Revolutionary Road"?
02:41  INFO: ================
02:43  INFO: ================
02:43  INFO: QUERY 47: What are the series featuring "Kerry Washington"?
02:43  INFO: ================
610. ROOT: ROOT; NA; ; (0) 
611. featuring: NT; NA; ; (0) tv_series.title(0.69):| tv_series(0.69):| movie.release_year(0.64):| tv_series.release_year(0.64):| made_by(0.64):| movie.title_aka(0.62):| tv_series.title_aka(0.62):| 
612. What: CMT; NA; ; (0) 
614. series: NT; NA; ; (0) tv_series.title(1.0):| tv_series(1.0):| keyword.keyword(0.95):series; series; series-in-series; | company.name(0.87):Series+; Series+; T-Series; | movie.title(0.8):Series 4; Series 4; Chinese Series; | actor.name(0.79):Eric Series; Eric Series; series editor; | tv_series.num_of_episodes(0.68):| 
616. Kerry Washington: VTTEXT; NA; ; (0) actor.name(1.0):Kerry Washington; Kerry Washington; Jerry Washington; | producer.name(1.0):Kerry Washington; Kerry Washington; Terry Washington; | director.name(0.93):Jerry Washington; Leroy Washington; Tony Washington; | writer.name(0.93):Jerry Washington; Ellery Washington; Leroy Washington; | cast.role(0.91):Sherry Washington; Roy Washington; Amy Washington; | director.birth_city(0.77):Washington; Washington; Washington; | actor.birth_city(0.77):Washington; Washington; Washington; | 
What, WP
are, VBP
the, DT
series, NN
featuring, VBG
Kerry Washington, NNP
dep(featuring-5, What-1)
aux(featuring-5, are-2)
det(series-4, the-3)
nsubj(featuring-5, series-4)
root(ROOT-0, featuring-5)
dobj(featuring-5, Kerry Washington-6)

PARSE TREE:(610) ROOT ROOT
    (612) What CMT
        (614) series NT
            (611) featuring NT
                (616) Kerry Washington VTTEXT


===========
TRANSLATIONS
===========
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [tv_series_0.title]; preds: [actor_0.name = "Kerry Washington"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [tv_series_0.title]; preds: [producer_0.name = "Kerry Washington"]; havings: []; superlative: []; blanks: 0
TOT: 0.9660917830792959; NL: 0.9660917830792959; NL+AG: 0.9963144161774299; NL+QF: 0.9660917830792959; rels: []; projs: [tv_series_0.title]; preds: [director_0.name = "Jerry Washington"]; havings: []; superlative: []; blanks: 0
TOT: 0.9660917830792959; NL: 0.9660917830792959; NL+AG: 0.9963144161774299; NL+QF: 0.9660917830792959; rels: []; projs: [tv_series_0.title]; preds: [writer_0.name = "Jerry Washington"]; havings: []; superlative: []; blanks: 0
TOT: 0.9554427922043668; NL: 0.9554427922043668; NL+AG: 0.9951831775913925; NL+QF: 0.9554427922043668; rels: []; projs: [tv_series_0.title]; preds: [cast_0.role = "Sherry Washington"]; havings: []; superlative: []; blanks: 0
TOT: 0.8801117367933934; NL: 0.8801117367933934; NL+AG: 0.9889432485322897; NL+QF: 0.8801117367933934; rels: []; projs: [tv_series_0.title]; preds: [director_0.birth_city = "Washington"]; havings: []; superlative: []; blanks: 0
TOT: 0.8801117367933934; NL: 0.8801117367933934; NL+AG: 0.9889432485322897; NL+QF: 0.8801117367933934; rels: []; projs: [tv_series_0.title]; preds: [actor_0.birth_city = "Washington"]; havings: []; superlative: []; blanks: 0
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [tv_series_0.title]; preds: [actor_0.name = "Kerry Washington"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [tv_series_0.title]; preds: [producer_0.name = "Kerry Washington"]; havings: []; superlative: []; blanks: 1
TOT: 0.846544991160274; NL: 0.846544991160274; NL+AG: 0.9549358938904248; NL+QF: 0.846544991160274; rels: []; projs: [tv_series_0.title]; preds: [director_0.name = "Jerry Washington"]; havings: []; superlative: []; blanks: 1
TOT: 0.846544991160274; NL: 0.846544991160274; NL+AG: 0.9549358938904248; NL+QF: 0.846544991160274; rels: []; projs: [tv_series_0.title]; preds: [writer_0.name = "Jerry Washington"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.7728497788912244; TR: 1.0; QF: 0.21428571428571427; select tv_series_0.title from made_by as made_by_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Kerry Washington" and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.7620994181408637; TR: 1.0; QF: 0.14709595959595959; select tv_series_0.title from actor as actor_0, cast as cast_0, tv_series as tv_series_0 where actor_0.name = "Kerry Washington" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid
TOT: 0.7502440300801188; TR: 0.9554427922043668; QF: 0.045454545454545456; select tv_series_0.title from cast as cast_0, tv_series as tv_series_0 where cast_0.role = "Sherry Washington" and cast_0.msid = tv_series_0.sid
TOT: 0.7451516857727358; TR: 0.9660917830792959; QF: 0.1683284457478006; select tv_series_0.title from directed_by as directed_by_0, director as director_0, tv_series as tv_series_0 where director_0.name = "Jerry Washington" and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.7448858011197543; TR: 0.9660917830792959; QF: 0.16666666666666666; select tv_series_0.title from tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Jerry Washington" and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.701829587823815; TR: 1.0; QF: 0.06948821438500337; select tv_series_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Kerry Washington" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid
TOT: 0.7007283585327123; TR: 1.0; QF: 0.06260553131561145; select tv_series_0.title from actor as actor_0, cast as cast_0, company as company_0, copyright as copyright_0, copyright as copyright_1, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Kerry Washington" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid
TOT: 0.700658682833238; TR: 1.0; QF: 0.062170058193896365; select tv_series_0.title from actor as actor_0, cast as cast_0, cast as cast_1, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Kerry Washington" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.7004650934593207; TR: 1.0; QF: 0.060960124606913586; select tv_series_0.title from actor as actor_0, cast as cast_0, classification as classification_0, classification as classification_1, genre as genre_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Kerry Washington" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = tv_series_0.sid
TOT: 0.7004650934593207; TR: 1.0; QF: 0.0609601246069136; select tv_series_0.title from actor as actor_0, cast as cast_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where actor_0.name = "Kerry Washington" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid


02:45  INFO: ================
02:45  INFO: QUERY 69: Find all the directors who are from Afghanistan
02:45  INFO: ================
02:45  INFO: ================
02:45  INFO: QUERY 127: Who directed the latest movie by "NBCUniversal"
02:45  INFO: ================
628. ROOT: ROOT; NA; ; (0) 
629. directed: NT; NA; ; (0) directed_by(1.0):| director.name(0.72):| director(0.72):| written_by(0.68):| cast.role(0.67):| cast(0.67):| made_by(0.67):| 
630. Who: CMT; NA; ; (0) director.name(1.0):| actor.name(1.0):| producer.name(1.0):| writer.name(1.0):| 
631. movie: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movie; Movies; Movie Movie; | keyword.keyword(0.83):movie-in-movie; b-movie; z-movie; | actor.name(0.76):| actor(0.76):| 
633. latest: FT; max; ; (0) 
634. NBCUniversal: VTTEXT; NA; ; (0) company.name(1.0):NBCUniversal; NBCUniversal Media; NBCUniversal Skycast; | genre.genre(0.2):Commercial; Commercial; Experimental; | 
Who, WP
directed, VBD
the, DT
latest, JJS
movie, NN
by, IN
NBCUniversal, NNP
nsubj(directed-2, Who-1)
root(ROOT-0, directed-2)
det(movie-5, the-3)
amod(movie-5, latest-4)
dobj(directed-2, movie-5)
case(NBCUniversal-7, by-6)
nmod(directed-2, NBCUniversal-7)

PARSE TREE:(628) ROOT ROOT
    (630) Who CMT
        (629) directed NT
            (631) movie NT
            (634) NBCUniversal VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.9858214234596546; NL: 0.9830475724915585; NL+AG: 0.9947191844774439; NL+QF: 0.9858214234596546; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Movie",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 0
TOT: 0.9830475724915585; NL: 0.9830475724915585; NL+AG: 0.9947191844774439; NL+QF: 0.9830475724915585; rels: []; projs: [director_0.name]; preds: [cast_0.role = "Movie",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 0
TOT: 0.9830475724915585; NL: 0.9830475724915585; NL+AG: 0.9947191844774439; NL+QF: 0.9830475724915585; rels: []; projs: [producer_0.name]; preds: [cast_0.role = "Movie",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 0
TOT: 0.9830475724915585; NL: 0.9830475724915585; NL+AG: 0.9947191844774439; NL+QF: 0.9830475724915585; rels: []; projs: [writer_0.name]; preds: [cast_0.role = "Movie",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 0
TOT: 0.943605885173802; NL: 0.9355249205979076; NL+AG: 0.9778318463203914; NL+QF: 0.943605885173802; rels: []; projs: [director_0.name]; preds: [company_0.name = "NBCUniversal"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9734002230204892; NL+QF: 0.9174505626104981; rels: []; projs: [director_0.name]; preds: [company_0.name = "NBCUniversal"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9734002230204892; NL+QF: 0.9174505626104981; rels: []; projs: [actor_0.name]; preds: [company_0.name = "NBCUniversal"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9734002230204892; NL+QF: 0.9174505626104981; rels: []; projs: [producer_0.name]; preds: [company_0.name = "NBCUniversal"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9734002230204892; NL+QF: 0.9174505626104981; rels: []; projs: [writer_0.name]; preds: [company_0.name = "NBCUniversal"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8657117502352817; NL: 0.8582978647386919; NL+AG: 0.9512320693408807; NL+QF: 0.8657117502352817; rels: []; projs: [director_0.name]; preds: [company_0.name = "NBCUniversal"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8582978647386919; NL: 0.8582978647386919; NL+AG: 0.945088111145773; NL+QF: 0.8582978647386919; rels: []; projs: [director_0.name]; preds: []; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 2

===========
RESULTS
===========
TOT: 0.7198595755178281; TR: 0.9858214234596546; QF: 0.13147161576278404; select actor_0.name from actor as actor_0, cast as cast_0, company as company_0, copyright as copyright_0, movie as movie_0 where cast_0.role = "Movie" and company_0.name = "NBCUniversal" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid
TOT: 0.7161704373421031; TR: 0.9858214234596546; QF: 0.10841450216450217; select actor_0.name from actor as actor_0, cast as cast_0, company as company_0, copyright as copyright_0, tv_series as tv_series_0 where cast_0.role = "Movie" and company_0.name = "NBCUniversal" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid
TOT: 0.705429752018939; TR: 0.9830475724915585; QF: 0.11013511757922977; select director_0.name from cast as cast_0, company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where cast_0.role = "Movie" and company_0.name = "NBCUniversal" and cast_0.msid = movie_0.mid and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.7032391796283666; TR: 0.9830475724915585; QF: 0.09644404013815233; select writer_0.name from cast as cast_0, company as company_0, copyright as copyright_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where cast_0.role = "Movie" and company_0.name = "NBCUniversal" and cast_0.msid = movie_0.mid and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.7030910314802185; TR: 0.9830475724915585; QF: 0.09551811421222639; select producer_0.name from cast as cast_0, company as company_0, copyright as copyright_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where cast_0.role = "Movie" and company_0.name = "NBCUniversal" and cast_0.msid = movie_0.mid and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.7020072674053964; TR: 0.9830475724915585; QF: 0.08874458874458874; select producer_0.name from cast as cast_0, company as company_0, copyright as copyright_0, made_by as made_by_0, producer as producer_0, tv_series as tv_series_0 where cast_0.role = "Movie" and company_0.name = "NBCUniversal" and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.7005366348121832; TR: 0.9830475724915585; QF: 0.07955313503700599; select director_0.name from cast as cast_0, company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, tv_series as tv_series_0 where cast_0.role = "Movie" and company_0.name = "NBCUniversal" and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.7004834578815868; TR: 0.9830475724915585; QF: 0.0792207792207792; select writer_0.name from cast as cast_0, company as company_0, copyright as copyright_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where cast_0.role = "Movie" and company_0.name = "NBCUniversal" and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6946428185735615; TR: 0.943605885173802; QF: 0.13217515343306482; select director_0.name from company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where company_0.name = "NBCUniversal" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid order by movie_0.title desc limit 1
TOT: 0.6926437935497354; TR: 0.8582978647386919; QF: 0.24438131313131314; select director_0.name from directed_by as directed_by_0, director as director_0, movie as movie_0 where directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid order by movie_0.title desc limit 1


02:46  INFO: ================
02:46  INFO: QUERY 82: which company funded the "Mickey Mouse" series
02:46  INFO: ================
02:48  INFO: ================
02:48  INFO: QUERY 25: Find all movies written and produced by "Woody Allen"
02:48  INFO: ================
645. ROOT: ROOT; NA; ; (0) 
646. Find: CMT; NA; ; (0) 
647. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
649. written: NT; NA; ; (0) written_by(1.0):| writer.name(0.78):| writer(0.78):| directed_by(0.68):| movie.title_aka(0.66):| tv_series.title_aka(0.66):| made_by(0.65):| 
651. produced: NT; NA; ; (0) made_by(0.74):| directed_by(0.69):| producer.name(0.68):| producer(0.68):| cast.role(0.63):| cast(0.63):| written_by(0.63):| 
652. Woody Allen: VTTEXT; NA; ; (0) director.name(1.0):Woody Allen; Woody Allen; Moody Allen; | actor.name(1.0):Woody Allen; Woody Allen; Jody Allen; | producer.name(1.0):Woody Allen; Woody Allen; Moody Allen; | writer.name(1.0):Woody Allen; Woody Allen; Moody Allen; | cast.role(0.85):Woody Allen Jr.; Woody Allen Jr.; Young Woody Allen; | movie.title(0.82):F.U. Woody Allen; F.U. Woody Allen; Woody Before Allen; | tv_series.title(0.73):The Woody Allen Show; The Woody Allen Show; Dave Allen; | 
Find, VB
all, DT
movies, NNS
written, VBN
and, CC
produced, VBN
by, IN
Woody Allen, NNP
root(ROOT-0, Find-1)
det(movies-3, all-2)
dobj(Find-1, movies-3)
acl(movies-3, written-4)
cc(written-4, and-5)
conj(written-4, produced-6)
case(Woody Allen-8, by-7)
nmod(written-4, Woody Allen-8)

PARSE TREE:(645) ROOT ROOT
    (646) Find CMT
        (647) movies NT
            (649) written NT
                (652) Woody Allen VTTEXT
            (651) produced NT


===========
TRANSLATIONS
===========
TOT: 0.9460310846547597; NL: 0.9126261813556491; NL+AG: 0.966581842152465; NL+QF: 0.9460310846547597; rels: [written_by,directed_by]; projs: [movie_0.title]; preds: [director_0.name = "Woody Allen"]; havings: []; superlative: []; blanks: 0
TOT: 0.9456709988576465; NL: 0.9282851983280498; NL+AG: 0.966581842152465; NL+QF: 0.9456709988576465; rels: [made_by,written_by]; projs: [movie_0.title]; preds: [producer_0.name = "Woody Allen"]; havings: []; superlative: []; blanks: 0
TOT: 0.9303945400494207; NL: 0.9073176753710547; NL+AG: 0.966581842152465; NL+QF: 0.9303945400494207; rels: [producer,written_by]; projs: [movie_0.title]; preds: [producer_0.name = "Woody Allen"]; havings: []; superlative: []; blanks: 0
TOT: 0.9299064329246562; NL: 0.9282851983280498; NL+AG: 0.966581842152465; NL+QF: 0.9299064329246562; rels: [made_by,written_by]; projs: [movie_0.title]; preds: [actor_0.name = "Woody Allen"]; havings: []; superlative: []; blanks: 0
TOT: 0.9294511702808901; NL: 0.9126261813556491; NL+AG: 0.966581842152465; NL+QF: 0.9294511702808901; rels: [written_by,directed_by]; projs: [movie_0.title]; preds: [actor_0.name = "Woody Allen"]; havings: []; superlative: []; blanks: 0
TOT: 0.9282851983280498; NL: 0.9282851983280498; NL+AG: 0.966581842152465; NL+QF: 0.9282851983280498; rels: [made_by,written_by]; projs: [movie_0.title]; preds: [director_0.name = "Woody Allen"]; havings: []; superlative: []; blanks: 0
TOT: 0.9282851983280498; NL: 0.9282851983280498; NL+AG: 0.966581842152465; NL+QF: 0.9282851983280498; rels: [made_by,written_by]; projs: [movie_0.title]; preds: [writer_0.name = "Woody Allen"]; havings: []; superlative: []; blanks: 0
TOT: 0.9238231225476615; NL: 0.9126261813556491; NL+AG: 0.966581842152465; NL+QF: 0.9238231225476615; rels: [written_by,directed_by]; projs: [movie_0.title]; preds: [producer_0.name = "Woody Allen"]; havings: []; superlative: []; blanks: 0
TOT: 0.9238231225476615; NL: 0.9126261813556491; NL+AG: 0.966581842152465; NL+QF: 0.9238231225476615; rels: [written_by,directed_by]; projs: [movie_0.title]; preds: [writer_0.name = "Woody Allen"]; havings: []; superlative: []; blanks: 0
TOT: 0.9094891672581761; NL: 0.9073176753710547; NL+AG: 0.966581842152465; NL+QF: 0.9094891672581761; rels: [producer,written_by]; projs: [movie_0.title]; preds: [actor_0.name = "Woody Allen"]; havings: []; superlative: []; blanks: 0
TOT: 0.9073176753710547; NL: 0.9073176753710547; NL+AG: 0.966581842152465; NL+QF: 0.9073176753710547; rels: [producer,written_by]; projs: [movie_0.title]; preds: [director_0.name = "Woody Allen"]; havings: []; superlative: []; blanks: 0
TOT: 0.9073176753710547; NL: 0.9073176753710547; NL+AG: 0.966581842152465; NL+QF: 0.9073176753710547; rels: [producer,written_by]; projs: [movie_0.title]; preds: [writer_0.name = "Woody Allen"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.6670331960416399; TR: 0.9456709988576465; QF: 0.055744520030234314; select movie_0.title from made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where producer_0.name = "Woody Allen" and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid and movie_0.mid = written_by_0.msid and tv_series_0.sid = written_by_1.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid
TOT: 0.6661987956676126; TR: 0.9460310846547597; QF: 0.0491791959533895; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where director_0.name = "Woody Allen" and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid and movie_0.mid = written_by_0.msid and tv_series_0.sid = written_by_1.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid
TOT: 0.655407460243912; TR: 0.9282851983280498; QF: 0.04828042328042328; select movie_0.title from made_by as made_by_0, made_by as made_by_1, movie as movie_0, producer as producer_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Woody Allen" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid and made_by_1.msid = tv_series_0.sid and made_by_1.pid = producer_0.pid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6544007294461939; TR: 0.9238231225476615; QF: 0.05872113997113997; select movie_0.title from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Woody Allen" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid


02:49  INFO: ================
02:49  INFO: QUERY 105: How many movies did "Steven Spielberg" direct?
02:49  INFO: ================
02:51  INFO: ================
02:51  INFO: QUERY 23: Who acted "John Nash" in the movie "A Beautiful Mind"?
02:51  INFO: ================
02:56  INFO: ===== FOLD 2 =====
02:56  INFO: ===== Parsing Results =====
02:56  INFO: Total Queries: 98
02:56  INFO: Correctly Parsed: 97/98

02:56  INFO: ================
02:56  INFO: QUERY 120: Find the actor with the most number of films
02:56  INFO: ================
02:57  INFO: ================
02:57  INFO: QUERY 108: How many actors are in the movie "Saving Private Ryan"?
02:57  INFO: ================
683. ROOT: ROOT; NA; ; (0) 
685. actors: NT; NA; ; (0) actor.name(1.0):| actor(1.0):| movie.title(0.95):Actors; Actors; Actors; | tv_series.title(0.95):Actors; Actor; The Actor Factor; | cast.role(0.95):Actors; Actors; Actors; | keyword.keyword(0.95):actors; actor-director; no-actors; | company.name(0.79):For Actors by Actors; Actors Loft; Actors Pool; | 
687. How many: CMT; count; ; (0) 
688. Saving Private Ryan: VTTEXT; NA; ; (0) movie.title(1.0):Saving Private Ryan; Saving Private Ryan; Saving Ryan's Privat; | cast.role(1.0):Saving Private Ryan; Saving Private Ryan; Saving Private Ryan; | tv_series.title(0.8):Saving Private K-9; Saving Private K-9; Private; | company.name(0.6):Private USA; Private Man; Private USA; | director.name(0.58):Kate Ryan; Catherine Ryan; Ryan Printz; | writer.name(0.58):Kate Ryan; Kate Ryan; Kate Ryan; | actor.name(0.58):Private; Private; Gary Private; | 
691. movie: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movie; Movies; Movie Movie; | keyword.keyword(0.83):movie-in-movie; b-movie; z-movie; | actor.name(0.76):| actor(0.76):| 
How, WRB
many, JJ
actors, NNS
are, VBP
in, IN
the, DT
movie, NN
Saving Private Ryan, NN
advmod(many-2, How-1)
amod(actors-3, many-2)
nsubj(are-4, actors-3)
root(ROOT-0, are-4)
case(Saving Private Ryan-8, in-5)
det(Saving Private Ryan-8, the-6)
compound(Saving Private Ryan-8, movie-7)
nmod(are-4, Saving Private Ryan-8)

PARSE TREE:(683) ROOT ROOT
    (687) How many CMT
        (685) actors NT
            (688) Saving Private Ryan VTTEXT
                (691) movie NT


===========
TRANSLATIONS
===========
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [count(distinct(actor_0.name))]; preds: [movie_0.title = "Saving Private Ryan"]; havings: []; superlative: []; blanks: 0
TOT: 0.9134802127015484; NL: 0.9134802127015484; NL+AG: 0.9623803610291506; NL+QF: 0.9134802127015484; rels: []; projs: [count(distinct(actor_0.name))]; preds: [movie_0.title = "Saving Private Ryan"]; havings: []; superlative: []; blanks: 1
TOT: 0.9134802127015484; NL: 0.9134802127015484; NL+AG: 0.9623803610291506; NL+QF: 0.9134802127015484; rels: []; projs: [count(distinct(actor_0.name))]; preds: [cast_0.role = "Saving Private Ryan"]; havings: []; superlative: []; blanks: 1
TOT: 0.9134802127015484; NL: 0.9134802127015484; NL+AG: 0.9711081309696877; NL+QF: 0.9134802127015484; rels: []; projs: [count(distinct(movie_0.title))]; preds: [movie_0.title = "Saving Private Ryan"]; havings: []; superlative: []; blanks: 1
TOT: 0.9134802127015484; NL: 0.9134802127015484; NL+AG: 0.9711081309696877; NL+QF: 0.9134802127015484; rels: []; projs: [count(distinct(movie_0.title))]; preds: [cast_0.role = "Saving Private Ryan"]; havings: []; superlative: []; blanks: 1
TOT: 0.8730692985095742; NL: 0.8730692985095742; NL+AG: 0.9775294117647059; NL+QF: 0.8730692985095742; rels: []; projs: [count(distinct(movie_0.title))]; preds: [movie_0.title = "Saving Private Ryan"]; havings: []; superlative: []; blanks: 0
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9588728368520408; NL+QF: 0.8662391053409028; rels: [movie]; projs: [count(distinct(actor_0.name))]; preds: []; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(actor_0.name))]; preds: [movie_0.title = "Saving Private Ryan"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(actor_0.name))]; preds: [cast_0.role = "Saving Private Ryan"]; havings: []; superlative: []; blanks: 1
TOT: 0.8661408661412991; NL: 0.8661408661412991; NL+AG: 0.9775294117647059; NL+QF: 0.8661408661412991; rels: []; projs: [count(distinct(cast_0.role))]; preds: [movie_0.title = "Saving Private Ryan"]; havings: []; superlative: []; blanks: 0
TOT: 0.8661408661412991; NL: 0.8661408661412991; NL+AG: 0.9775294117647059; NL+QF: 0.8661408661412991; rels: []; projs: [count(distinct(cast_0.role))]; preds: [movie_0.title = "Saving Private Ryan"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.7817937551057005; TR: 0.9134802127015484; QF: 0.4; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0 where cast_0.role = "Saving Private Ryan" and actor_0.aid = cast_0.aid
TOT: 0.7768444384372859; TR: 1.0; QF: 0.2392523364485981; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, movie as movie_0 where movie_0.title = "Saving Private Ryan" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7686348766010276; TR: 0.9134802127015484; QF: 0.3177570093457944; select count(distinct(movie_0.title)) from cast as cast_0, movie as movie_0 where cast_0.role = "Saving Private Ryan" and cast_0.msid = movie_0.mid
TOT: 0.740231268664878; TR: 0.8661408661412991; QF: 0.3177570093457944; select count(distinct(cast_0.role)) from cast as cast_0, movie as movie_0 where movie_0.title = "Saving Private Ryan" and cast_0.msid = movie_0.mid
TOT: 0.6998719980218695; TR: 1.0; QF: 0.05725327812284335; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where movie_0.title = "Saving Private Ryan" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid
TOT: 0.6986479814587224; TR: 1.0; QF: 0.04960317460317461; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, company as company_0, copyright as copyright_0, copyright as copyright_1, movie as movie_0, tv_series as tv_series_0 where movie_0.title = "Saving Private Ryan" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid
TOT: 0.6985844893952304; TR: 1.0; QF: 0.04920634920634921; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where movie_0.title = "Saving Private Ryan" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid
TOT: 0.6984883932991343; TR: 1.0; QF: 0.04860574860574861; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where movie_0.title = "Saving Private Ryan" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and movie_0.mid = written_by_0.msid and tv_series_0.sid = written_by_1.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid
TOT: 0.6983896644332821; TR: 1.0; QF: 0.04798869319417265; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, classification as classification_0, classification as classification_1, genre as genre_0, movie as movie_0, tv_series as tv_series_0 where movie_0.title = "Saving Private Ryan" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = tv_series_0.sid
TOT: 0.6983896644332821; TR: 1.0; QF: 0.04798869319417265; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, made_by as made_by_0, made_by as made_by_1, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where movie_0.title = "Saving Private Ryan" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid and made_by_1.msid = tv_series_0.sid and made_by_1.pid = producer_0.pid


02:59  INFO: ================
02:59  INFO: QUERY 34: Find all actors who were born in "New York City" in 1984
02:59  INFO: ================
03:02  INFO: ================
03:02  INFO: QUERY 19: Who is the director of the movie "Catch Me If You Can"?
03:02  INFO: ================
03:04  INFO: ================
03:04  INFO: QUERY 59: Find all the female actors from Austin
03:04  INFO: ================
03:08  INFO: ================
03:08  INFO: QUERY 32: What company produced the movie "Juno"?
03:08  INFO: ================
03:08  INFO: ================
03:08  INFO: QUERY 7: In what year was "Benedict Cumberbatch" born
03:08  INFO: ================
03:09  INFO: ================
03:09  INFO: QUERY 11: Where is the birthplace of "Kevin Spacey"
03:09  INFO: ================
03:10  INFO: ================
03:10  INFO: QUERY 66: Who is the actor playing "Alan Turing" in "The Imitation Game"?
03:10  INFO: ================
748. ROOT: ROOT; NA; ; (0) 
749. Who: CMT; NA; ; (0) 
751. Alan Turing: VTTEXT; NA; ; (0) cast.role(1.0):Alan Turing; Alan Turing; Alana Turing; | movie.title(0.79):Decoding Alan Turing; Decoding Alan Turing; Dear Alan: A Tribute; | director.name(0.76):Allen Turing; Alan Tang; Alan Tang; | actor.name(0.76):Allen Turing; Alan King; Alan King; | writer.name(0.76):Allen Turing; Alan Tang; Alan Tang; | producer.name(0.7):Alan Tang; Alan Tang; Alan King; | company.name(0.63):Allan Alan Pictures; Allan Alan Pictures; Alan Trading Company; | 
753. actor: NT; NA; ; (0) actor.name(1.0):| actor(1.0):| movie.title(0.95):Actor; Actor; Actor; | tv_series.title(0.95):Actor; Actors; The Actor Factor; | cast.role(0.95):Actors; Actors; Actors; | keyword.keyword(0.95):actors; actor-director; ex-actor; | movie.title(0.76):| 
754. playing: VTTEXT; NA; ; (0) movie.title(0.95):Playing; Playing; Playing 25; | cast.role(0.95):playing; Playing; Playing; | keyword.keyword(0.95):playing; playing-gin; playing-go; | tv_series.title(0.7):Playing Dead; Multi Playing; Playing Hooky; | tv_series.num_of_seasons(0.68):| movie.title_aka(0.66):| tv_series.title_aka(0.66):| 
755. The Imitation Game: VTTEXT; NA; ; (0) movie.title(1.0):The Imitation Game; The Imitation Game; The Imitation Game; | cast.role(0.84):The Imitation Game &; The Imitation Game &; The Imitation Game &; | tv_series.title(0.74):The Temptation Game; The Game; The Game; | keyword.keyword(0.69):imitation; imitation; camel-imitation; | company.name(0.67):Game Station, the; Game Station; Imagination Games; | actor.name(0.64):The Game; The Game; Simon Game; | producer.name(0.64):The Game; The Game; Simon Game; | 
Who, WP
is, VBZ
the, DT
actor, NN
playing, NN
Alan Turing, NN
in, IN
The Imitation Game, NNP
root(ROOT-0, Who-1)
cop(Who-1, is-2)
det(Alan Turing-6, the-3)
compound(Alan Turing-6, actor-4)
compound(Alan Turing-6, playing-5)
nsubj(Who-1, Alan Turing-6)
case(The Imitation Game-8, in-7)
nmod(Alan Turing-6, The Imitation Game-8)

PARSE TREE:(748) ROOT ROOT
    (749) Who CMT
        (751) Alan Turing VTTEXT
            (753) actor NT
            (754) playing VTTEXT
            (755) The Imitation Game VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.839125174031199; NL: 0.839125174031199; NL+AG: 0.9370478431708781; NL+QF: 0.839125174031199; rels: []; projs: [actor_0.aid]; preds: [actor_0.name = "Allen Turing",movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 1
TOT: 0.8144063193621914; NL: 0.7550415303475492; NL+AG: 0.9526353085710749; NL+QF: 0.8144063193621914; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Alan Turing",movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 1
TOT: 0.803374959172446; NL: 0.803374959172446; NL+AG: 0.912151489047044; NL+QF: 0.803374959172446; rels: []; projs: [actor_0.aid]; preds: [actor_0.name = "Allen Turing",cast_0.role = "The Imitation Game & Selma"]; havings: []; superlative: []; blanks: 1
TOT: 0.798706103448217; NL: 0.798706103448217; NL+AG: 0.9058946798781093; NL+QF: 0.798706103448217; rels: []; projs: [movie_0.mid]; preds: [movie_0.title = "Decoding Alan Turing",movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 1
TOT: 0.798634547539037; NL: 0.7758393689196864; NL+AG: 0.9357307115480753; NL+QF: 0.798634547539037; rels: []; projs: [actor_0.aid]; preds: [actor_0.name = "Allen Turing",cast_0.role = "playing",movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.7970571170539851; NL: 0.6980972118841674; NL+AG: 0.9707079544146425; NL+QF: 0.7970571170539851; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Alan Turing",cast_0.role = "playing",movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.796288502884526; NL: 0.6980972118841674; NL+AG: 0.9707079544146425; NL+QF: 0.796288502884526; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Alan Turing",movie_0.title = "Playing",movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.7891634855442764; NL: 0.6683553734916184; NL+AG: 0.9539260136854839; NL+QF: 0.7891634855442764; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Alan Turing",movie_0.title = "Playing",cast_0.role = "The Imitation Game & Selma"]; havings: []; superlative: []; blanks: 0
TOT: 0.7867665196818688; NL: 0.7228736276644114; NL+AG: 0.9347270555952513; NL+QF: 0.7867665196818688; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Alan Turing",cast_0.role = "The Imitation Game & Selma"]; havings: []; superlative: []; blanks: 1
TOT: 0.7858049356222503; NL: 0.7384686557246904; NL+AG: 0.9059869188468588; NL+QF: 0.7858049356222503; rels: []; projs: [movie_0.mid]; preds: [movie_0.title = "Decoding Alan Turing",cast_0.role = "playing",movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.7804668247676972; NL: 0.6584082067266795; NL+AG: 0.9497084724300678; NL+QF: 0.7804668247676972; rels: []; projs: [actor_0.name]; preds: [movie_0.title = "Decoding Alan Turing",cast_0.role = "playing",movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.715730602988239; TR: 0.803374959172446; QF: 0.4; select actor_0.aid from actor as actor_0, cast as cast_0 where actor_0.name = "Allen Turing" and cast_0.role = "The Imitation Game & Selma" and actor_0.aid = cast_0.aid
TOT: 0.6803195428560052; TR: 0.839125174031199; QF: 0.2392523364485981; select actor_0.aid from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Allen Turing" and movie_0.title = "The Imitation Game" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6654882300546008; TR: 0.8144063193621914; QF: 0.2392523364485981; select actor_0.name from actor as actor_0, cast as cast_0, movie as movie_0 where cast_0.role = "Alan Turing" and movie_0.title = "The Imitation Game" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.656025166960708; TR: 0.798634547539037; QF: 0.2392523364485981; select actor_0.aid from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Allen Turing" and cast_0.role = "playing" and movie_0.title = "The Imitation Game" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6365550108973901; TR: 0.7867665196818688; QF: 0.1620689655172414; select actor_0.name from actor as actor_0, cast as cast_0, cast as cast_1 where cast_0.role = "Alan Turing" and cast_1.role = "The Imitation Game & Selma" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid
TOT: 0.6196733077229915; TR: 0.7970571170539851; QF: 0.1339939843162531; select actor_0.name from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0 where cast_0.role = "Alan Turing" and cast_1.role = "playing" and movie_0.title = "The Imitation Game" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid
TOT: 0.6196733077229915; TR: 0.7970571170539851; QF: 0.1339939843162531; select actor_0.name from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0 where cast_0.role = "playing" and cast_1.role = "Alan Turing" and movie_0.title = "The Imitation Game" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid
TOT: 0.6191522349260566; TR: 0.7970571170539851; QF: 0.13073727933541016; select actor_0.name from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0 where cast_0.role = "playing" and cast_1.role = "Alan Turing" and movie_0.title = "The Imitation Game" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_0.mid
TOT: 0.6191522349260566; TR: 0.7970571170539851; QF: 0.13073727933541016; select actor_0.name from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0 where cast_0.role = "Alan Turing" and cast_1.role = "playing" and movie_0.title = "The Imitation Game" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_0.mid
TOT: 0.6149371288171663; TR: 0.7891634855442764; QF: 0.1339939843162531; select actor_0.name from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0 where cast_0.role = "The Imitation Game & Selma" and cast_1.role = "Alan Turing" and movie_0.title = "Playing" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid


03:13  INFO: ================
03:13  INFO: QUERY 109: How many movies did "Shahab Hosseini" act in
03:13  INFO: ================
758. ROOT: ROOT; NA; ; (0) 
759. act: NT; NA; ; (0) movie.release_year(0.63):| tv_series.release_year(0.63):| actor.name(0.62):| actor(0.62):| genre.genre(0.62):| genre(0.62):| made_by(0.61):| 
760. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
762. How many: CMT; count; ; (0) 
764. Shahab Hosseini: VTTEXT; NA; ; (0) actor.name(1.0):Shahab Hosseini; Shahab Hosseini; Khaled Hosseini; | writer.name(1.0):Shahab Hosseini; Shahab Hosseini; Saham Hosseini; | director.name(0.78):Shahram Shah Hossein; Saham Hosseini; Shaun Hosseini; | producer.name(0.76):Shaun Hosseini; Saham Hosseini; Shahrokh Hosseini; | cast.role(0.61):Zolfaghar Hosseini; Zolfaghar Hosseini; Zolfaghar Hosseini; | company.name(0.49):Zack Hosseini Films; Hosseini Pictures; | keyword.keyword(0.39):reference-to-ali-hos; | 
How, WRB
many, JJ
movies, NNS
did, VBD
Shahab Hosseini, NNP
act, VB
in, RP
advmod(many-2, How-1)
amod(movies-3, many-2)
dobj(act-6, movies-3)
aux(act-6, did-4)
nsubj(act-6, Shahab Hosseini-5)
root(ROOT-0, act-6)
compound:prt(act-6, in-7)

PARSE TREE:(758) ROOT ROOT
    (762) How many CMT
        (760) movies NT
            (759) act NT
                (764) Shahab Hosseini VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Shahab Hosseini"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(movie_0.title))]; preds: [writer_0.name = "Shahab Hosseini"]; havings: []; superlative: []; blanks: 1
TOT: 0.8216649331663136; NL: 0.7989057703421542; NL+AG: 0.9336787348794631; NL+QF: 0.8216649331663136; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Shahram Shah Hosseini"]; havings: []; superlative: []; blanks: 1
TOT: 0.791452383694395; NL: 0.791452383694395; NL+AG: 0.9336787348794631; NL+QF: 0.791452383694395; rels: []; projs: [count(distinct(movie_0.title))]; preds: [producer_0.name = "Shaun Hosseini"]; havings: []; superlative: []; blanks: 1
TOT: 0.7912922821972069; NL: 0.7912922821972069; NL+AG: 0.9334884919988383; NL+QF: 0.7912922821972069; rels: []; projs: [count(distinct(actor_0.name))]; preds: [actor_0.name = "Shahab Hosseini"]; havings: []; superlative: []; blanks: 1
TOT: 0.7912922821972069; NL: 0.7912922821972069; NL+AG: 0.9334884919988383; NL+QF: 0.7912922821972069; rels: []; projs: [count(distinct(actor_0.name))]; preds: [writer_0.name = "Shahab Hosseini"]; havings: []; superlative: []; blanks: 1
TOT: 0.7645314458836486; NL: 0.7645314458836486; NL+AG: 0.9334884919988383; NL+QF: 0.7645314458836486; rels: []; projs: [count(distinct(tv_series_0.title))]; preds: [actor_0.name = "Shahab Hosseini"]; havings: []; superlative: []; blanks: 1
TOT: 0.7645314458836486; NL: 0.7645314458836486; NL+AG: 0.9334884919988383; NL+QF: 0.7645314458836486; rels: []; projs: [count(distinct(tv_series_0.title))]; preds: [writer_0.name = "Shahab Hosseini"]; havings: []; superlative: []; blanks: 1
TOT: 0.7645314458836486; NL: 0.7645314458836486; NL+AG: 0.9334884919988383; NL+QF: 0.7645314458836486; rels: []; projs: [count(distinct(tv_series_0.title))]; preds: [actor_0.name = "Shahab Hosseini"]; havings: []; superlative: []; blanks: 1
TOT: 0.7645314458836486; NL: 0.7645314458836486; NL+AG: 0.9334884919988383; NL+QF: 0.7645314458836486; rels: []; projs: [count(distinct(tv_series_0.title))]; preds: [writer_0.name = "Shahab Hosseini"]; havings: []; superlative: []; blanks: 1
TOT: 0.7503701876218076; NL: 0.7503701876218076; NL+AG: 0.9177456737040814; NL+QF: 0.7503701876218076; rels: []; projs: [count(distinct(movie_0.title))]; preds: []; havings: []; superlative: []; blanks: 2

===========
RESULTS
===========
TOT: 0.8502221125730846; TR: 0.7503701876218076; QF: 1.0; select count(distinct(movie_0.title)) from movie as movie_0
TOT: 0.6965879016418275; TR: 0.8662391053409028; QF: 0.2392523364485981; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Shahab Hosseini" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6878570773596014; TR: 0.8662391053409028; QF: 0.18468468468468469; select count(distinct(movie_0.title)) from movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Shahab Hosseini" and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6686644737806606; TR: 0.8216649331663136; QF: 0.2318840579710145; select count(distinct(movie_0.title)) from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Shahram Shah Hosseini" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6422939423107317; TR: 0.791452383694395; QF: 0.18036529680365296; select count(distinct(movie_0.title)) from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Shaun Hosseini" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.623949598802366; TR: 0.7645314458836486; QF: 0.16666666666666666; select count(distinct(tv_series_0.title)) from tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Shahab Hosseini" and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6221718210245882; TR: 0.7645314458836486; QF: 0.15555555555555556; select count(distinct(tv_series_0.title)) from actor as actor_0, cast as cast_0, tv_series as tv_series_0 where actor_0.name = "Shahab Hosseini" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid
TOT: 0.6203898998193087; TR: 0.8662391053409028; QF: 0.062093519328453264; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Shahab Hosseini" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6198694294803794; TR: 0.8662391053409028; QF: 0.05884057971014493; select count(distinct(movie_0.title)) from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Shahab Hosseini" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6196154612264111; TR: 0.8662391053409028; QF: 0.05725327812284335; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Shahab Hosseini" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid


03:14  INFO: ================
03:14  INFO: QUERY 103: How many movies did "Quentin Tarantino" direct before 2002 and after 2010?
03:14  INFO: ================
767. ROOT: ROOT; NA; ; (0) 
768. direct: NT; NA; ; (0) directed_by(1.0):| director.name(0.72):| director(0.72):| written_by(0.68):| cast.role(0.67):| cast(0.67):| made_by(0.67):| 
769. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
771. How many: CMT; count; ; (0) 
773. Quentin Tarantino: VTTEXT; NA; ; (0) director.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | actor.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | producer.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | writer.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | cast.role(0.85):Quentin Tarrantino '; Quentin Tarrantino '; Quentin Tarrantino '; | movie.title(0.84):21 Years: Quentin Ta; 21 Years: Quentin Ta; Quentin Tarantino's ; | writer.birth_city(0.74):San Quentin; San Quentin; Saint-Quentin; | 
774. 2002: VTNUM; NA; ; (0) movie.release_year(1.0):1963; 1971; 1913; | director.birth_year(1.0):1927; 1958; 1924; | tv_series.release_year(1.0):1987; 1991; 1968; | actor.birth_year(1.0):1935; 1958; 1924; | producer.birth_year(1.0):1926; 1964; 1985; | writer.birth_year(1.0):1955; 1926; 1985; | 
775. before: OT; <; ; (0) 
777. 2010: VTNUM; NA; ; (0) movie.release_year(1.0):2012; 2014; 2015; | tv_series.release_year(1.0):2014; 2014; 2013; | actor.birth_year(1.0):2011; 2013; 2013; | 
778. after: OT; >; ; (0) 
How, WRB
many, JJ
movies, NNS
did, VBD
Quentin Tarantino, NNP
direct, VB
before, IN
2002, CD
and, CC
after, IN
2010, CD
advmod(many-2, How-1)
amod(movies-3, many-2)
dobj(direct-6, movies-3)
aux(direct-6, did-4)
nsubj(direct-6, Quentin Tarantino-5)
root(ROOT-0, direct-6)
case(2002-8, before-7)
nmod(direct-6, 2002-8)
cc(2002-8, and-9)
case(2010-11, after-10)
conj(2002-8, 2010-11)

PARSE TREE:(767) ROOT ROOT
    (771) How many CMT
        (769) movies NT
            (768) direct NT
                (773) Quentin Tarantino VTTEXT
                (774) 2002 VTNUM
                    (775) before OT
                (777) 2010 VTNUM
                    (778) after OT


===========
TRANSLATIONS
===========
TOT: 0.920066463578981; NL: 0.920066463578981; NL+AG: 0.9625; NL+QF: 0.920066463578981; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Quentin Tarantino",movie_0.release_year > 2010]; havings: [count(distinct(director_0.name)) < 2002]; superlative: []; blanks: 0
TOT: 0.920066463578981; NL: 0.920066463578981; NL+AG: 0.9625; NL+QF: 0.920066463578981; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Quentin Tarantino",tv_series_0.release_year > 2010]; havings: [count(distinct(director_0.name)) < 2002]; superlative: []; blanks: 0
TOT: 0.920066463578981; NL: 0.920066463578981; NL+AG: 0.9625; NL+QF: 0.920066463578981; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Quentin Tarantino",actor_0.birth_year > 2010]; havings: [count(distinct(director_0.name)) < 2002]; superlative: []; blanks: 0
TOT: 0.920066463578981; NL: 0.920066463578981; NL+AG: 0.9625; NL+QF: 0.920066463578981; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Quentin Tarantino",movie_0.release_year > 2010]; havings: [count(distinct(director_0.name)) < 2002]; superlative: []; blanks: 0
TOT: 0.920066463578981; NL: 0.920066463578981; NL+AG: 0.9625; NL+QF: 0.920066463578981; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Quentin Tarantino",tv_series_0.release_year > 2010]; havings: [count(distinct(director_0.name)) < 2002]; superlative: []; blanks: 0
TOT: 0.920066463578981; NL: 0.920066463578981; NL+AG: 0.9625; NL+QF: 0.920066463578981; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Quentin Tarantino",actor_0.birth_year > 2010]; havings: [count(distinct(director_0.name)) < 2002]; superlative: []; blanks: 0
TOT: 0.920066463578981; NL: 0.920066463578981; NL+AG: 0.9625; NL+QF: 0.920066463578981; rels: []; projs: [count(distinct(movie_0.title))]; preds: [producer_0.name = "Quentin Tarantino",movie_0.release_year > 2010]; havings: [count(distinct(director_0.name)) < 2002]; superlative: []; blanks: 0
TOT: 0.920066463578981; NL: 0.920066463578981; NL+AG: 0.9625; NL+QF: 0.920066463578981; rels: []; projs: [count(distinct(movie_0.title))]; preds: [producer_0.name = "Quentin Tarantino",tv_series_0.release_year > 2010]; havings: [count(distinct(director_0.name)) < 2002]; superlative: []; blanks: 0
TOT: 0.920066463578981; NL: 0.920066463578981; NL+AG: 0.9625; NL+QF: 0.920066463578981; rels: []; projs: [count(distinct(movie_0.title))]; preds: [producer_0.name = "Quentin Tarantino",actor_0.birth_year > 2010]; havings: [count(distinct(director_0.name)) < 2002]; superlative: []; blanks: 0
TOT: 0.920066463578981; NL: 0.920066463578981; NL+AG: 0.9625; NL+QF: 0.920066463578981; rels: []; projs: [count(distinct(movie_0.title))]; preds: [writer_0.name = "Quentin Tarantino",movie_0.release_year > 2010]; havings: [count(distinct(director_0.name)) < 2002]; superlative: []; blanks: 0
TOT: 0.920066463578981; NL: 0.920066463578981; NL+AG: 0.9625; NL+QF: 0.920066463578981; rels: []; projs: [count(distinct(movie_0.title))]; preds: [writer_0.name = "Quentin Tarantino",tv_series_0.release_year > 2010]; havings: [count(distinct(director_0.name)) < 2002]; superlative: []; blanks: 0
TOT: 0.920066463578981; NL: 0.920066463578981; NL+AG: 0.9625; NL+QF: 0.920066463578981; rels: []; projs: [count(distinct(movie_0.title))]; preds: [writer_0.name = "Quentin Tarantino",actor_0.birth_year > 2010]; havings: [count(distinct(director_0.name)) < 2002]; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.68198568799952; TR: 0.920066463578981; QF: 0.1413409183258838; select count(*) from (select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.name = "Quentin Tarantino" and movie_0.release_year > 2010 and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid group by movie_0.title having count(distinct(director_0.name)) < 2002) as subquery
TOT: 0.68198568799952; TR: 0.920066463578981; QF: 0.1413409183258838; select count(*) from (select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.birth_year > 2010 and actor_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid group by movie_0.title having count(distinct(director_0.name)) < 2002) as subquery
TOT: 0.6793664407148521; TR: 0.920066463578981; QF: 0.12497062279670976; select count(*) from (select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where movie_0.release_year > 2010 and writer_0.name = "Quentin Tarantino" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid group by movie_0.title having count(distinct(director_0.name)) < 2002) as subquery
TOT: 0.6791591100965626; TR: 0.920066463578981; QF: 0.12367480643240025; select count(*) from (select movie_0.title from directed_by as directed_by_0, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where movie_0.release_year > 2010 and producer_0.name = "Quentin Tarantino" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid group by movie_0.title having count(distinct(director_0.name)) < 2002) as subquery
TOT: 0.6707269279626633; TR: 0.920066463578981; QF: 0.0709736680955297; select count(*) from (select movie_0.title from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, director as director_1, movie as movie_0 where director_0.name = "Quentin Tarantino" and movie_0.release_year > 2010 and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_1.did and directed_by_1.msid = movie_0.mid group by movie_0.title having count(distinct(director_1.name)) < 2002) as subquery
TOT: 0.6577415477634156; TR: 0.920066463578981; QF: 0.0936887255863282; select count(*) from (select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where actor_0.birth_year > 2010 and writer_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid group by movie_0.title having count(distinct(director_0.name)) < 2002) as subquery
TOT: 0.6576428188975636; TR: 0.920066463578981; QF: 0.09307167017475225; select count(*) from (select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where actor_0.birth_year > 2010 and producer_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid group by movie_0.title having count(distinct(director_0.name)) < 2002) as subquery
TOT: 0.6541769979919694; TR: 0.920066463578981; QF: 0.07141028951478869; select count(*) from (select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Quentin Tarantino" and tv_series_0.release_year > 2010 and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid group by movie_0.title having count(distinct(director_0.name)) < 2002) as subquery
TOT: 0.6538249454468134; TR: 0.920066463578981; QF: 0.06920996110756371; select count(*) from (select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Quentin Tarantino" and tv_series_0.release_year > 2010 and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid group by movie_0.title having count(distinct(director_0.name)) < 2002) as subquery
TOT: 0.6536274940718972; TR: 0.920066463578981; QF: 0.0679758900143377; select count(*) from (select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, director as director_1, movie as movie_0 where actor_0.birth_year > 2010 and director_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_1.did and directed_by_1.msid = movie_0.mid group by movie_0.title having count(distinct(director_1.name)) < 2002) as subquery


03:17  INFO: ================
03:17  INFO: QUERY 77: List all the movies directed by "Asghar Farhadi" in which "Taraneh Alidoosti" played
03:17  INFO: ================
03:18  INFO: ================
03:18  INFO: QUERY 79: who acted the role of "Mr. Bean"
03:18  INFO: ================
03:19  INFO: ================
03:19  INFO: QUERY 96: What is the number of movies that "Brad Pitt" acts in per year?
03:19  INFO: ================
801. ROOT: ROOT; NA; ; (0) 
802. What: CMT; NA; ; (0) 
804. number of: FT; count; ; (0) 
806. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
808. acts: NT; NA; ; (0) movie.release_year(0.63):| tv_series.release_year(0.63):| actor.name(0.62):| actor(0.62):| genre.genre(0.62):| genre(0.62):| made_by(0.61):| 
810. Brad Pitt: VTTEXT; NA; ; (0) actor.name(1.0):Brad Pitt; Brad Pitt; bRad sPitt; | cast.role(1.0):Brad Pitt'; Brad Pitt'; Brad Pitt #1; | producer.name(1.0):Brad Pitt; Brad Pitt; Mad Pitt; | director.name(0.78):Brad Pruitt; Brad Pruitt; Brad Witty; | writer.name(0.78):Brad Pruitt; Brad Pruitt; Brad Witt; | movie.title(0.72):Brad Pitt Video Port; Brad Pitt Video Port; Brad; | actor.birth_city(0.61):Brad; Brad; Pitt Meadows; | 
812. year: NT; NA; each; (0) movie.release_year(1.0):| director.birth_year(1.0):| tv_series.release_year(1.0):| actor.birth_year(1.0):| producer.birth_year(1.0):| writer.birth_year(1.0):| movie.title(0.95):Year; Years; Years; | 
What, WP
is, VBZ
the, DT
number, NN
of, IN
movies, NNS
that, IN
Brad Pitt, NNP
acts, VBZ
in, RP
per, IN
year, NN
root(ROOT-0, What-1)
cop(What-1, is-2)
det(number-4, the-3)
nsubj(What-1, number-4)
case(movies-6, of-5)
nmod(number-4, movies-6)
mark(acts-9, that-7)
nsubj(acts-9, Brad Pitt-8)
dep(movies-6, acts-9)
compound:prt(acts-9, in-10)
case(year-12, per-11)
nmod(acts-9, year-12)

PARSE TREE:(801) ROOT ROOT
    (802) What CMT
        (804) number of FT
            (806) movies NT
                (808) acts NT
                    (810) Brad Pitt VTTEXT
                    (812) year NT


===========
TRANSLATIONS
===========
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [movie_0.release_year,count(distinct(movie_0.title))]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [director_0.birth_year,count(distinct(movie_0.title))]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [tv_series_0.release_year,count(distinct(movie_0.title))]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [actor_0.birth_year,count(distinct(movie_0.title))]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [producer_0.birth_year,count(distinct(movie_0.title))]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [writer_0.birth_year,count(distinct(movie_0.title))]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [movie_0.release_year,count(distinct(movie_0.title))]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [director_0.birth_year,count(distinct(movie_0.title))]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [tv_series_0.release_year,count(distinct(movie_0.title))]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [actor_0.birth_year,count(distinct(movie_0.title))]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [producer_0.birth_year,count(distinct(movie_0.title))]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [writer_0.birth_year,count(distinct(movie_0.title))]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [movie_0.release_year,count(distinct(movie_0.title))]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [director_0.birth_year,count(distinct(movie_0.title))]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [tv_series_0.release_year,count(distinct(movie_0.title))]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [actor_0.birth_year,count(distinct(movie_0.title))]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [producer_0.birth_year,count(distinct(movie_0.title))]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9744248149088094; NL+QF: 0.9174505626104981; rels: []; projs: [writer_0.birth_year,count(distinct(movie_0.title))]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.7710170865463973; TR: 0.9174505626104981; QF: 0.3177570093457944; select count(distinct(movie_0.title)), movie_0.release_year from cast as cast_0, movie as movie_0 where cast_0.role = "Brad Pitt'" and cast_0.msid = movie_0.mid group by movie_0.release_year
TOT: 0.7273147760035847; TR: 0.9174505626104981; QF: 0.2392523364485981; select movie_0.release_year, count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Brad Pitt" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid group by movie_0.release_year
TOT: 0.7273147760035847; TR: 0.9174505626104981; QF: 0.2392523364485981; select actor_0.birth_year, count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Brad Pitt" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid group by actor_0.birth_year
TOT: 0.7273147760035847; TR: 0.9174505626104981; QF: 0.2392523364485981; select actor_0.birth_year, count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, movie as movie_0 where cast_0.role = "Brad Pitt'" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid group by actor_0.birth_year
TOT: 0.7178928496603935; TR: 0.9174505626104981; QF: 0.18036529680365296; select movie_0.release_year, count(distinct(movie_0.title)) from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Brad Pitt" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid group by movie_0.release_year
TOT: 0.7178928496603935; TR: 0.9174505626104981; QF: 0.18036529680365296; select producer_0.birth_year, count(distinct(movie_0.title)) from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Brad Pitt" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid group by producer_0.birth_year
TOT: 0.6974945824532012; TR: 0.9174505626104981; QF: 0.16890153054313964; select count(distinct(movie_0.title)), director_0.birth_year from cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where cast_0.role = "Brad Pitt'" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid group by director_0.birth_year
TOT: 0.6937186325902948; TR: 0.9174505626104981; QF: 0.14530184389997475; select count(distinct(movie_0.title)), writer_0.birth_year from cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where cast_0.role = "Brad Pitt'" and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid group by writer_0.birth_year
TOT: 0.6933730815598123; TR: 0.9174505626104981; QF: 0.14314214995945887; select count(distinct(movie_0.title)), producer_0.birth_year from cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where cast_0.role = "Brad Pitt'" and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid group by producer_0.birth_year
TOT: 0.6804161474184302; TR: 0.9174505626104981; QF: 0.1413409183258838; select director_0.birth_year, count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.name = "Brad Pitt" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid group by director_0.birth_year


03:21  INFO: ================
03:21  INFO: QUERY 104: What is the number of movies featuring "Brad Pitt"?
03:21  INFO: ================
815. ROOT: ROOT; NA; ; (0) 
816. What: CMT; NA; ; (0) 
818. number of: FT; count; ; (0) 
820. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
822. featuring: NT; NA; ; (0) tv_series.title(0.69):| tv_series(0.69):| movie.release_year(0.64):| tv_series.release_year(0.64):| made_by(0.64):| movie.title_aka(0.62):| tv_series.title_aka(0.62):| 
823. Brad Pitt: VTTEXT; NA; ; (0) actor.name(1.0):Brad Pitt; Brad Pitt; bRad sPitt; | cast.role(1.0):Brad Pitt'; Brad Pitt'; Brad Pitt #1; | producer.name(1.0):Brad Pitt; Brad Pitt; Mad Pitt; | director.name(0.78):Brad Pruitt; Brad Pruitt; Brad Witty; | writer.name(0.78):Brad Pruitt; Brad Pruitt; Brad Witt; | movie.title(0.72):Brad Pitt Video Port; Brad Pitt Video Port; Brad; | actor.birth_city(0.61):Brad; Brad; Pitt Meadows; | 
What, WP
is, VBZ
the, DT
number, NN
of, IN
movies, NNS
featuring, VBG
Brad Pitt, NNP
root(ROOT-0, What-1)
cop(What-1, is-2)
det(number-4, the-3)
nsubj(What-1, number-4)
case(movies-6, of-5)
nmod(number-4, movies-6)
acl(movies-6, featuring-7)
dobj(featuring-7, Brad Pitt-8)

PARSE TREE:(815) ROOT ROOT
    (816) What CMT
        (818) number of FT
            (820) movies NT
                (822) featuring NT
                    (823) Brad Pitt VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(movie_0.title))]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(movie_0.title))]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.8212630328102013; NL: 0.7982804026719519; NL+AG: 0.9336787348794631; NL+QF: 0.8212630328102013; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Brad Pruitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.7982804026719519; NL: 0.7982804026719519; NL+AG: 0.9336787348794631; NL+QF: 0.7982804026719519; rels: []; projs: [count(distinct(movie_0.title))]; preds: [writer_0.name = "Brad Pruitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.7912922821972069; NL: 0.7912922821972069; NL+AG: 0.9334884919988383; NL+QF: 0.7912922821972069; rels: []; projs: [count(distinct(actor_0.name))]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.7912922821972069; NL: 0.7912922821972069; NL+AG: 0.9334884919988383; NL+QF: 0.7912922821972069; rels: []; projs: [count(distinct(actor_0.name))]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 1
TOT: 0.7912922821972069; NL: 0.7912922821972069; NL+AG: 0.9334884919988383; NL+QF: 0.7912922821972069; rels: []; projs: [count(distinct(actor_0.name))]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.7783173787653892; NL: 0.7783173787653892; NL+AG: 0.9334884919988383; NL+QF: 0.7783173787653892; rels: []; projs: [count(distinct(tv_series_0.title))]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.7783173787653892; NL: 0.7783173787653892; NL+AG: 0.9334884919988383; NL+QF: 0.7783173787653892; rels: []; projs: [count(distinct(tv_series_0.title))]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 1
TOT: 0.7783173787653892; NL: 0.7783173787653892; NL+AG: 0.9334884919988383; NL+QF: 0.7783173787653892; rels: []; projs: [count(distinct(tv_series_0.title))]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.7783173787653892; NL: 0.7783173787653892; NL+AG: 0.9334884919988383; NL+QF: 0.7783173787653892; rels: []; projs: [count(distinct(tv_series_0.title))]; preds: [actor_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1
TOT: 0.7783173787653892; NL: 0.7783173787653892; NL+AG: 0.9334884919988383; NL+QF: 0.7783173787653892; rels: []; projs: [count(distinct(tv_series_0.title))]; preds: [cast_0.role = "Brad Pitt'"]; havings: []; superlative: []; blanks: 1
TOT: 0.7783173787653892; NL: 0.7783173787653892; NL+AG: 0.9334884919988383; NL+QF: 0.7783173787653892; rels: []; projs: [count(distinct(tv_series_0.title))]; preds: [producer_0.name = "Brad Pitt"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.7402902121846402; TR: 0.8662391053409028; QF: 0.3177570093457944; select count(distinct(movie_0.title)) from cast as cast_0, movie as movie_0 where cast_0.role = "Brad Pitt'" and cast_0.msid = movie_0.mid
TOT: 0.7084809968030956; TR: 0.7912922821972069; QF: 0.4; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0 where cast_0.role = "Brad Pitt'" and actor_0.aid = cast_0.aid
TOT: 0.6965879016418275; TR: 0.8662391053409028; QF: 0.2392523364485981; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Brad Pitt" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6871659752986363; TR: 0.8662391053409028; QF: 0.18036529680365296; select count(distinct(movie_0.title)) from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Brad Pitt" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6684233335669932; TR: 0.8212630328102013; QF: 0.2318840579710145; select count(distinct(movie_0.title)) from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Brad Pruitt" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6473627214106716; TR: 0.7783173787653892; QF: 0.06666666666666667; select count(distinct(tv_series_0.title)) from cast as cast_0, tv_series as tv_series_0 where cast_0.role = "Brad Pitt'" and cast_0.msid = tv_series_0.sid
TOT: 0.6470818557582309; TR: 0.7982804026719519; QF: 0.18468468468468469; select count(distinct(movie_0.title)) from movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Brad Pruitt" and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6322211585314104; TR: 0.7783173787653892; QF: 0.16666666666666666; select count(distinct(tv_series_0.title)) from made_by as made_by_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Brad Pitt" and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6304433807536326; TR: 0.7783173787653892; QF: 0.15555555555555556; select count(distinct(tv_series_0.title)) from actor as actor_0, cast as cast_0, tv_series as tv_series_0 where actor_0.name = "Brad Pitt" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid
TOT: 0.6262811205487191; TR: 0.8662391053409028; QF: 0.053487922705314016; select count(distinct(movie_0.title)) from cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where cast_0.role = "Brad Pitt'" and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid


03:22  INFO: ================
03:22  INFO: QUERY 12: In what city was "Kevin Spacey" born?
03:22  INFO: ================
03:24  INFO: ================
03:24  INFO: QUERY 124: Find the actors who played in the latest movie by "Quentin Tarantino"
03:24  INFO: ================
833. ROOT: ROOT; NA; ; (0) 
834. Find: CMT; NA; ; (0) 
835. actors: NT; NA; ; (0) actor.name(1.0):| actor(1.0):| movie.title(0.95):Actors; Actors; Actors; | tv_series.title(0.95):Actors; Actor; The Actor Factor; | cast.role(0.95):Actors; Actors; Actors; | keyword.keyword(0.95):actors; actor-director; no-actors; | company.name(0.79):For Actors by Actors; Actors Loft; Actors Pool; | 
837. played: NT; NA; ; (0) tv_series.num_of_seasons(0.67):| cast.role(0.66):| directed_by(0.64):| actor.name(0.63):| actor(0.63):| cast(0.63):| movie.title_aka(0.63):| 
839. movie: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movie; Movies; Movie Movie; | keyword.keyword(0.83):movie-in-movie; b-movie; z-movie; | actor.name(0.76):| actor(0.76):| 
842. latest: FT; max; ; (0) 
843. Quentin Tarantino: VTTEXT; NA; ; (0) director.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | actor.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | producer.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | writer.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | cast.role(0.85):Quentin Tarrantino '; Quentin Tarrantino '; Quentin Tarrantino '; | movie.title(0.84):21 Years: Quentin Ta; 21 Years: Quentin Ta; Quentin Tarantino's ; | writer.birth_city(0.74):San Quentin; San Quentin; Saint-Quentin; | 
Find, VB
the, DT
actors, NNS
who, WP
played, VBD
in, IN
the, DT
latest, JJS
movie, NN
by, IN
Quentin Tarantino, NNP
root(ROOT-0, Find-1)
det(actors-3, the-2)
dobj(Find-1, actors-3)
nsubj(played-5, who-4)
acl:relcl(actors-3, played-5)
case(movie-9, in-6)
det(movie-9, the-7)
amod(movie-9, latest-8)
nmod(played-5, movie-9)
case(Quentin Tarantino-11, by-10)
nmod(played-5, Quentin Tarantino-11)

PARSE TREE:(833) ROOT ROOT
    (834) Find CMT
        (835) actors NT
            (837) played NT
                (839) movie NT
                (843) Quentin Tarantino VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9734002230204892; NL+QF: 0.9174505626104981; rels: []; projs: [actor_0.name]; preds: [director_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9734002230204892; NL+QF: 0.9174505626104981; rels: []; projs: [actor_0.name]; preds: [actor_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9734002230204892; NL+QF: 0.9174505626104981; rels: []; projs: [actor_0.name]; preds: [producer_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.9174505626104981; NL: 0.9174505626104981; NL+AG: 0.9734002230204892; NL+QF: 0.9174505626104981; rels: []; projs: [actor_0.name]; preds: [writer_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8916787961450712; NL: 0.8879579826791157; NL+AG: 0.9557508540140572; NL+QF: 0.8916787961450712; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Quentin Tarrantino 'esque' Patient"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.890089387885766; NL: 0.8862129230052637; NL+AG: 0.9547774891905295; NL+QF: 0.890089387885766; rels: []; projs: [actor_0.name]; preds: [movie_0.title = "21 Years: Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8813956643737827; NL: 0.8689647470148877; NL+AG: 0.9512320693408807; NL+QF: 0.8813956643737827; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8780097432658712; NL: 0.8689647470148877; NL+AG: 0.9512320693408807; NL+QF: 0.8780097432658712; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8746299582599715; NL: 0.8689647470148877; NL+AG: 0.9512320693408807; NL+QF: 0.8746299582599715; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8736234161838105; NL: 0.8689647470148877; NL+AG: 0.9512320693408807; NL+QF: 0.8736234161838105; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8675415861861546; NL: 0.8675415861861546; NL+AG: 0.9512320693408807; NL+QF: 0.8675415861861546; rels: []; projs: [cast_0.role]; preds: [director_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8675415861861546; NL: 0.8675415861861546; NL+AG: 0.9512320693408807; NL+QF: 0.8675415861861546; rels: []; projs: [cast_0.role]; preds: [actor_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8675415861861546; NL: 0.8675415861861546; NL+AG: 0.9512320693408807; NL+QF: 0.8675415861861546; rels: []; projs: [cast_0.role]; preds: [producer_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8675415861861546; NL: 0.8675415861861546; NL+AG: 0.9512320693408807; NL+QF: 0.8675415861861546; rels: []; projs: [cast_0.role]; preds: [writer_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8675415861861546; NL: 0.8675415861861546; NL+AG: 0.9512320693408807; NL+QF: 0.8675415861861546; rels: []; projs: [cast_0.role]; preds: [director_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8675415861861546; NL: 0.8675415861861546; NL+AG: 0.9512320693408807; NL+QF: 0.8675415861861546; rels: []; projs: [cast_0.role]; preds: [actor_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8675415861861546; NL: 0.8675415861861546; NL+AG: 0.9512320693408807; NL+QF: 0.8675415861861546; rels: []; projs: [cast_0.role]; preds: [producer_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1
TOT: 0.8675415861861546; NL: 0.8675415861861546; NL+AG: 0.9512320693408807; NL+QF: 0.8675415861861546; rels: []; projs: [cast_0.role]; preds: [writer_0.name = "Quentin Tarantino"]; havings: []; superlative: [movie_0.title desc limit 1]; blanks: 1

===========
RESULTS
===========
TOT: 0.7118517161243285; TR: 0.8916787961450712; QF: 0.2392523364485981; select actor_0.name from actor as actor_0, cast as cast_0, movie as movie_0 where cast_0.role = "Quentin Tarrantino 'esque' Patient" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid order by movie_0.title desc limit 1
TOT: 0.6973693901489786; TR: 0.8675415861861546; QF: 0.2392523364485981; select cast_0.role from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid order by movie_0.title desc limit 1
TOT: 0.6804161474184302; TR: 0.9174505626104981; QF: 0.1413409183258838; select actor_0.name from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid order by movie_0.title desc limit 1
TOT: 0.6783523793024882; TR: 0.9174505626104981; QF: 0.1284423676012461; select actor_0.name from actor as actor_0, actor as actor_1, cast as cast_0, cast as cast_1, movie as movie_0 where actor_1.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and actor_1.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_0.mid order by movie_0.title desc limit 1
TOT: 0.6781505775006863; TR: 0.9174505626104981; QF: 0.12718110633998486; select actor_0.name from actor as actor_0, cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid order by movie_0.title desc limit 1
TOT: 0.6779432468823967; TR: 0.9174505626104981; QF: 0.12588528997567533; select actor_0.name from actor as actor_0, cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid order by movie_0.title desc limit 1
TOT: 0.6675491965985951; TR: 0.8675415861861546; QF: 0.16890153054313964; select cast_0.role from cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Quentin Tarantino" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid order by movie_0.title desc limit 1
TOT: 0.6637732467356887; TR: 0.8675415861861546; QF: 0.14530184389997475; select cast_0.role from cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Quentin Tarantino" and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid order by movie_0.title desc limit 1
TOT: 0.6634276957052062; TR: 0.8675415861861546; QF: 0.14314214995945887; select cast_0.role from cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Quentin Tarantino" and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid order by movie_0.title desc limit 1
TOT: 0.6542483181458097; TR: 0.890089387885766; QF: 0.08039639058975186; select actor_0.name from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0, movie as movie_1 where movie_0.title = "21 Years: Quentin Tarantino" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_1.mid order by movie_1.title desc limit 1


03:26  INFO: ================
03:26  INFO: QUERY 2: What is the nationality of the actress "Ellen Page"?
03:26  INFO: ================
03:28  INFO: ================
03:28  INFO: QUERY 68: Find all movies about Iraq war
03:28  INFO: ================
856. ROOT: ROOT; NA; ; (0) 
857. Find: CMT; NA; ; (0) 
858. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
860. war: VTTEXT; NA; ; (0) movie.title(0.95):Wars; Wars; Hardware Wars; | tv_series.title(0.95):War; Car Wars; War Walks; | actor.name(0.95):War; War; War; | genre.genre(0.95):War; War; Documentary; | producer.name(0.95):War; Johnny Star Wars; Vivian War; | company.name(0.95):War; War on Want; NWA War Zone; | writer.name(0.95):War; Johnny Star Wars; Men Of War; | 
862. Iraq: VTTEXT; NA; ; (0) movie.title(1.0):Iraq; Iraq; Ski Iraq; | director.nationality(1.0):Iraq; Iraq; Iraq; | actor.nationality(1.0):Iraq; Iraq; Iraq; | producer.nationality(1.0):Iraq; Iraq; Iraq; | writer.nationality(1.0):Iraq; Iraq; Iraq; | cast.role(0.8):Ira - Iraq; Iraq Vet; Iraq Veteran; | keyword.keyword(0.72):iraq-iran-war; basra-iraq; hatra-iraq; | 
Find, VB
all, DT
movies, NNS
about, IN
Iraq, NNP
war, NN
root(ROOT-0, Find-1)
det(movies-3, all-2)
dobj(Find-1, movies-3)
case(war-6, about-4)
compound(war-6, Iraq-5)
nmod(Find-1, war-6)

PARSE TREE:(856) ROOT ROOT
    (857) Find CMT
        (858) movies NT
        (860) war VTTEXT
            (862) Iraq VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.984061024314923; NL: 0.9830475724915585; NL+AG: 0.9947191844774439; NL+QF: 0.984061024314923; rels: []; projs: [movie_0.title]; preds: [genre_0.genre = "War",movie_0.title = "Iraq"]; havings: []; superlative: []; blanks: 0
TOT: 0.984061024314923; NL: 0.9830475724915585; NL+AG: 0.9947191844774439; NL+QF: 0.984061024314923; rels: []; projs: [movie_0.title]; preds: [genre_0.genre = "War",director_0.nationality = "Iraq"]; havings: []; superlative: []; blanks: 0
TOT: 0.984061024314923; NL: 0.9830475724915585; NL+AG: 0.9947191844774439; NL+QF: 0.984061024314923; rels: []; projs: [movie_0.title]; preds: [genre_0.genre = "War",actor_0.nationality = "Iraq"]; havings: []; superlative: []; blanks: 0
TOT: 0.984061024314923; NL: 0.9830475724915585; NL+AG: 0.9947191844774439; NL+QF: 0.984061024314923; rels: []; projs: [movie_0.title]; preds: [genre_0.genre = "War",producer_0.nationality = "Iraq"]; havings: []; superlative: []; blanks: 0
TOT: 0.984061024314923; NL: 0.9830475724915585; NL+AG: 0.9947191844774439; NL+QF: 0.984061024314923; rels: []; projs: [movie_0.title]; preds: [genre_0.genre = "War",writer_0.nationality = "Iraq"]; havings: []; superlative: []; blanks: 0
TOT: 0.9157566744585615; NL: 0.9128241092785631; NL+AG: 0.9736635980475375; NL+QF: 0.9157566744585615; rels: []; projs: [movie_0.title]; preds: [genre_0.genre = "War",cast_0.role = "Ira - Iraq"]; havings: []; superlative: []; blanks: 0
TOT: 0.91404448511991; NL: 0.8979945056153297; NL+AG: 0.9848909609505903; NL+QF: 0.91404448511991; rels: []; projs: [actor_0.name]; preds: [genre_0.genre = "War",movie_0.title = "Iraq"]; havings: []; superlative: []; blanks: 0
TOT: 0.9138113744029706; NL: 0.8979945056153297; NL+AG: 0.9848909609505903; NL+QF: 0.9138113744029706; rels: []; projs: [actor_0.name]; preds: [genre_0.genre = "War",actor_0.nationality = "Iraq"]; havings: []; superlative: []; blanks: 0
TOT: 0.8979945056153297; NL: 0.8979945056153297; NL+AG: 0.9848909609505903; NL+QF: 0.8979945056153297; rels: []; projs: [actor_0.name]; preds: [genre_0.genre = "War",director_0.nationality = "Iraq"]; havings: []; superlative: []; blanks: 0
TOT: 0.8979945056153297; NL: 0.8979945056153297; NL+AG: 0.9848909609505903; NL+QF: 0.8979945056153297; rels: []; projs: [actor_0.name]; preds: [genre_0.genre = "War",producer_0.nationality = "Iraq"]; havings: []; superlative: []; blanks: 0
TOT: 0.8979945056153297; NL: 0.8979945056153297; NL+AG: 0.9848909609505903; NL+QF: 0.8979945056153297; rels: []; projs: [actor_0.name]; preds: [genre_0.genre = "War",writer_0.nationality = "Iraq"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.7179095239050517; TR: 0.984061024314923; QF: 0.12588528997567533; select movie_0.title from actor as actor_0, cast as cast_0, classification as classification_0, genre as genre_0, movie as movie_0 where actor_0.nationality = "Iraq" and genre_0.genre = "War" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid
TOT: 0.7175558465381278; TR: 0.984061024314923; QF: 0.12367480643240025; select movie_0.title from classification as classification_0, directed_by as directed_by_0, director as director_0, genre as genre_0, movie as movie_0 where director_0.nationality = "Iraq" and genre_0.genre = "War" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.7152902766203839; TR: 0.984061024314923; QF: 0.1095149944465013; select movie_0.title from classification as classification_0, genre as genre_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where genre_0.genre = "War" and writer_0.nationality = "Iraq" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.7150829460020944; TR: 0.984061024314923; QF: 0.10821917808219177; select movie_0.title from classification as classification_0, genre as genre_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where genre_0.genre = "War" and producer_0.nationality = "Iraq" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.7064254117555191; TR: 0.984061024314923; QF: 0.05410958904109588; select movie_0.title from classification as classification_0, classification as classification_1, genre as genre_0, movie as movie_0, movie as movie_1 where genre_0.genre = "War" and movie_1.title = "Iraq" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = movie_1.mid
TOT: 0.6946852162203037; TR: 0.984061024314923; QF: 0.08460705068209537; select movie_0.title from classification as classification_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, genre as genre_0, movie as movie_0, movie as movie_1 where genre_0.genre = "War" and movie_1.title = "Iraq" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = movie_1.mid
TOT: 0.6946852162203037; TR: 0.984061024314923; QF: 0.08460705068209537; select movie_1.title from classification as classification_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, genre as genre_0, movie as movie_0, movie as movie_1 where genre_0.genre = "War" and movie_0.title = "Iraq" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = movie_1.mid
TOT: 0.6923567486686503; TR: 0.9157566744585615; QF: 0.14314214995945887; select movie_0.title from cast as cast_0, classification as classification_0, genre as genre_0, movie as movie_0 where cast_0.role = "Ira - Iraq" and genre_0.genre = "War" and cast_0.msid = movie_0.mid and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid
TOT: 0.6913961627497092; TR: 0.984061024314923; QF: 0.06405046649087988; select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, classification as classification_0, genre as genre_0, movie as movie_0, movie as movie_1 where genre_0.genre = "War" and movie_1.title = "Iraq" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_1.mid and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid
TOT: 0.6913961627497092; TR: 0.984061024314923; QF: 0.06405046649087988; select movie_1.title from actor as actor_0, cast as cast_0, cast as cast_1, classification as classification_0, genre as genre_0, movie as movie_0, movie as movie_1 where genre_0.genre = "War" and movie_0.title = "Iraq" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_1.mid and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid


03:30  INFO: ================
03:30  INFO: QUERY 21: What is the genre of the movie "Jurassic Park"?
03:30  INFO: ================
03:32  INFO: ================
03:32  INFO: QUERY 75: List "James Bond" directors
03:32  INFO: ================
03:35  INFO: ================
03:35  INFO: QUERY 76: find all films in which "Rowan Atkinson" acted as "Mr. Bean"
03:35  INFO: ================
03:37  INFO: ================
03:37  INFO: QUERY 112: How many actors from China have acted in "Rush Hour 3"
03:37  INFO: ================
890. ROOT: ROOT; NA; ; (0) 
891. acted: NT; NA; ; (0) movie.release_year(0.63):| tv_series.release_year(0.63):| actor.name(0.62):| actor(0.62):| genre.genre(0.62):| genre(0.62):| made_by(0.61):| 
893. How many: CMT; count; ; (0) 
894. actors: NT; NA; ; (0) actor.name(1.0):| actor(1.0):| movie.title(0.95):Actors; Actors; Actors; | tv_series.title(0.95):Actors; Actor; The Actor Factor; | cast.role(0.95):Actors; Actors; Actors; | keyword.keyword(0.95):actors; actor-director; no-actors; | company.name(0.79):For Actors by Actors; Actors Loft; Actors Pool; | 
895. China: VTTEXT; NA; ; (0) movie.title(1.0):China; China; China; | director.nationality(1.0):China; China; China; | director.name(1.0):China; China Chung; China Chung; | actor.nationality(1.0):China; China; China; | actor.name(1.0):China; China; China; | producer.nationality(1.0):China; China; China; | producer.name(1.0):China; Ed China; China Chung; | 
898. Rush Hour 3: VTTEXT; NA; ; (0) movie.title(0.95):Rush Hour 3; Rush Hour 3; Rush Hour 2; | tv_series.title(0.85):Rush Hour; Rush Hour; Rush Hour; | cast.role(0.7):Rush Hour Driver; Rush Hour Driver; Rush Hour Driver; | actor.name(0.64):Rush Holt; Rush Holt; Rush; | keyword.keyword(0.64):rush-hour; rush-hour; hour; | company.name(0.62):Rush Hour Production; Rush Hour Production; Rush HD; | director.name(0.52):Rush; Rush; Rush; | 
How, WRB
many, JJ
actors, NNS
from, IN
China, NNP
have, VBP
acted, VBN
in, IN
Rush Hour 3, NNS
advmod(many-2, How-1)
dep(acted-7, many-2)
nsubj(acted-7, actors-3)
case(China-5, from-4)
nmod(actors-3, China-5)
aux(acted-7, have-6)
root(ROOT-0, acted-7)
case(Rush Hour 3-9, in-8)
nmod(acted-7, Rush Hour 3-9)

PARSE TREE:(890) ROOT ROOT
    (893) How many CMT
        (894) actors NT
            (895) China VTTEXT
            (891) acted NT
                (898) Rush Hour 3 VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.806225774829855; NL: 0.806225774829855; NL+AG: 0.9326779061577943; NL+QF: 0.806225774829855; rels: []; projs: [count(distinct(actor_0.name))]; preds: [movie_0.title = "China"]; havings: []; superlative: []; blanks: 2
TOT: 0.806225774829855; NL: 0.806225774829855; NL+AG: 0.9326779061577943; NL+QF: 0.806225774829855; rels: []; projs: [count(distinct(actor_0.name))]; preds: [director_0.nationality = "China"]; havings: []; superlative: []; blanks: 2
TOT: 0.806225774829855; NL: 0.806225774829855; NL+AG: 0.9326779061577943; NL+QF: 0.806225774829855; rels: []; projs: [count(distinct(actor_0.name))]; preds: [director_0.name = "China"]; havings: []; superlative: []; blanks: 2
TOT: 0.806225774829855; NL: 0.806225774829855; NL+AG: 0.9326779061577943; NL+QF: 0.806225774829855; rels: []; projs: [count(distinct(actor_0.name))]; preds: [actor_0.nationality = "China"]; havings: []; superlative: []; blanks: 2
TOT: 0.806225774829855; NL: 0.806225774829855; NL+AG: 0.9326779061577943; NL+QF: 0.806225774829855; rels: []; projs: [count(distinct(actor_0.name))]; preds: [actor_0.name = "China"]; havings: []; superlative: []; blanks: 2
TOT: 0.806225774829855; NL: 0.806225774829855; NL+AG: 0.9326779061577943; NL+QF: 0.806225774829855; rels: []; projs: [count(distinct(actor_0.name))]; preds: [producer_0.nationality = "China"]; havings: []; superlative: []; blanks: 2
TOT: 0.806225774829855; NL: 0.806225774829855; NL+AG: 0.9326779061577943; NL+QF: 0.806225774829855; rels: []; projs: [count(distinct(actor_0.name))]; preds: [producer_0.name = "China"]; havings: []; superlative: []; blanks: 2
TOT: 0.7714547017937957; NL: 0.7533226692667779; NL+AG: 0.9057922005575166; NL+QF: 0.7714547017937957; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "China"]; havings: []; superlative: []; blanks: 2
TOT: 0.7640212239889288; NL: 0.7533226692667779; NL+AG: 0.9057922005575166; NL+QF: 0.7640212239889288; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "China"]; havings: []; superlative: []; blanks: 2
TOT: 0.7624312687459628; NL: 0.7454212025910731; NL+AG: 0.9430496236604987; NL+QF: 0.7624312687459628; rels: []; projs: [count(distinct(actor_0.name))]; preds: [actor_0.nationality = "China",movie_0.title = "Rush Hour 3"]; havings: []; superlative: []; blanks: 1
TOT: 0.7546121633668027; NL: 0.7454212025910731; NL+AG: 0.9430496236604987; NL+QF: 0.7546121633668027; rels: []; projs: [count(distinct(actor_0.name))]; preds: [movie_0.title = "China",movie_0.title = "Rush Hour 3"]; havings: []; superlative: []; blanks: 1
TOT: 0.7546121633668027; NL: 0.7454212025910731; NL+AG: 0.9430496236604987; NL+QF: 0.7546121633668027; rels: []; projs: [count(distinct(actor_0.name))]; preds: [director_0.nationality = "China",movie_0.title = "Rush Hour 3"]; havings: []; superlative: []; blanks: 1
TOT: 0.7546121633668027; NL: 0.7454212025910731; NL+AG: 0.9430496236604987; NL+QF: 0.7546121633668027; rels: []; projs: [count(distinct(actor_0.name))]; preds: [director_0.name = "China",movie_0.title = "Rush Hour 3"]; havings: []; superlative: []; blanks: 1
TOT: 0.7546121633668027; NL: 0.7454212025910731; NL+AG: 0.9430496236604987; NL+QF: 0.7546121633668027; rels: []; projs: [count(distinct(actor_0.name))]; preds: [actor_0.name = "China",movie_0.title = "Rush Hour 3"]; havings: []; superlative: []; blanks: 1
TOT: 0.7546121633668027; NL: 0.7454212025910731; NL+AG: 0.9430496236604987; NL+QF: 0.7546121633668027; rels: []; projs: [count(distinct(actor_0.name))]; preds: [producer_0.nationality = "China",movie_0.title = "Rush Hour 3"]; havings: []; superlative: []; blanks: 1
TOT: 0.7546121633668027; NL: 0.7454212025910731; NL+AG: 0.9430496236604987; NL+QF: 0.7546121633668027; rels: []; projs: [count(distinct(actor_0.name))]; preds: [producer_0.name = "China",movie_0.title = "Rush Hour 3"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.883735464897913; TR: 0.806225774829855; QF: 1.0; select count(distinct(actor_0.name)) from actor as actor_0 where actor_0.nationality = "China"
TOT: 0.6605799033351989; TR: 0.806225774829855; QF: 0.2392523364485981; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, movie as movie_0 where movie_0.title = "China" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6385383349571498; TR: 0.7714547017937957; QF: 0.2318840579710145; select count(distinct(movie_0.title)) from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "China" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6352571728306431; TR: 0.7640212239889288; QF: 0.2392523364485981; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "China" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6343031996848636; TR: 0.7624312687459628; QF: 0.2392523364485981; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.nationality = "China" and movie_0.title = "Rush Hour 3" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6136812747500443; TR: 0.806225774829855; QF: 0.1413409183258838; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.nationality = "China" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6136812747500443; TR: 0.806225774829855; QF: 0.1413409183258838; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "China" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6116175066341023; TR: 0.806225774829855; QF: 0.1284423676012461; select count(distinct(actor_0.name)) from actor as actor_0, actor as actor_1, cast as cast_0, cast as cast_1, movie as movie_0 where actor_1.name = "China" and actor_0.aid = cast_0.aid and actor_1.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_0.mid
TOT: 0.6112083742140109; TR: 0.806225774829855; QF: 0.12588528997567533; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.nationality = "China" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6112083742140109; TR: 0.806225774829855; QF: 0.12588528997567533; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "China" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid


03:39  INFO: ================
03:39  INFO: QUERY 78: where is the director of "The Past" from
03:39  INFO: ================
901. ROOT: ROOT; NA; ; (0) 
903. where: CMT; NA; ; (0) director.birth_city(1.0):| actor.birth_city(1.0):| producer.birth_city(1.0):| writer.birth_city(1.0):| 
904. director: NT; NA; ; (0) director.name(1.0):| director(1.0):| movie.title(0.95):Director; Director; Director; | producer.name(0.95):Director; Co-Director; Director GT; | company.name(0.95):Director; Directors; Directors; | writer.name(0.95):Director; Director X; Director X.; | tv_series.title(0.86):Directors on Directo; The Directors; The Directors; | 
906. The Past: VTTEXT; NA; ; (0) movie.title(1.0):The Past; The Past; Fix the Past; | cast.role(1.0):The Past; The Past; The Past; | keyword.keyword(0.71):the-past; past; stuck-in-the-past; | tv_series.title(0.71):Ancyal/The Past; Out of the Past; Out of the Past; | company.name(0.62):Shadows of the Past; Future Past Films; Past Due Pictures; | director.name(0.62):The Nostalgia Plotho; | actor.name(0.62):The Nostalgia Plotho; Melodie Past; Pavel Past; | 
where, WRB
is, VBZ
the, DT
director, NN
of, IN
The Past, NNP
from, IN
advmod(is-2, where-1)
root(ROOT-0, is-2)
det(director-4, the-3)
nsubj(is-2, director-4)
case(The Past-6, of-5)
nmod(director-4, The Past-6)
dep(is-2, from-7)

PARSE TREE:(901) ROOT ROOT
    (903) where CMT
        (904) director NT
            (906) The Past VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [director_0.name]; preds: [movie_0.title = "The Past"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [director_0.name]; preds: [cast_0.role = "The Past"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [director_0.birth_city]; preds: [movie_0.title = "The Past"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [director_0.birth_city]; preds: [cast_0.role = "The Past"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [actor_0.birth_city]; preds: [movie_0.title = "The Past"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [actor_0.birth_city]; preds: [cast_0.role = "The Past"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [producer_0.birth_city]; preds: [movie_0.title = "The Past"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [producer_0.birth_city]; preds: [cast_0.role = "The Past"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [writer_0.birth_city]; preds: [movie_0.title = "The Past"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [writer_0.birth_city]; preds: [cast_0.role = "The Past"]; havings: []; superlative: []; blanks: 1
TOT: 0.8254818122236567; NL: 0.7802453753539424; NL+AG: 0.9788767379097759; NL+QF: 0.8254818122236567; rels: []; projs: [director_0.birth_city]; preds: [movie_0.title = "Director",cast_0.role = "The Past"]; havings: []; superlative: []; blanks: 0
TOT: 0.8254818122236567; NL: 0.7802453753539424; NL+AG: 0.9788767379097759; NL+QF: 0.8254818122236567; rels: []; projs: [actor_0.birth_city]; preds: [movie_0.title = "Director",cast_0.role = "The Past"]; havings: []; superlative: []; blanks: 0
TOT: 0.8254818122236567; NL: 0.7802453753539424; NL+AG: 0.9788767379097759; NL+QF: 0.8254818122236567; rels: []; projs: [producer_0.birth_city]; preds: [movie_0.title = "Director",cast_0.role = "The Past"]; havings: []; superlative: []; blanks: 0
TOT: 0.8254818122236567; NL: 0.7802453753539424; NL+AG: 0.9788767379097759; NL+QF: 0.8254818122236567; rels: []; projs: [writer_0.birth_city]; preds: [movie_0.title = "Director",cast_0.role = "The Past"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.7534490906893131; TR: 0.8662391053409028; QF: 0.4; select actor_0.birth_city from actor as actor_0, cast as cast_0 where cast_0.role = "The Past" and actor_0.aid = cast_0.aid
TOT: 0.6965879016418275; TR: 0.8662391053409028; QF: 0.2392523364485981; select actor_0.birth_city from actor as actor_0, cast as cast_0, movie as movie_0 where movie_0.title = "The Past" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6954089770854142; TR: 0.8662391053409028; QF: 0.2318840579710145; select director_0.name from directed_by as directed_by_0, director as director_0, movie as movie_0 where movie_0.title = "The Past" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6954089770854142; TR: 0.8662391053409028; QF: 0.2318840579710145; select director_0.birth_city from directed_by as directed_by_0, director as director_0, movie as movie_0 where movie_0.title = "The Past" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6878570773596014; TR: 0.8662391053409028; QF: 0.18468468468468469; select writer_0.birth_city from movie as movie_0, writer as writer_0, written_by as written_by_0 where movie_0.title = "The Past" and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6871659752986363; TR: 0.8662391053409028; QF: 0.18036529680365296; select producer_0.birth_city from made_by as made_by_0, movie as movie_0, producer as producer_0 where movie_0.title = "The Past" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6721335257714798; TR: 0.8254818122236567; QF: 0.2392523364485981; select actor_0.birth_city from actor as actor_0, cast as cast_0, movie as movie_0 where cast_0.role = "The Past" and movie_0.title = "Director" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.666767708091444; TR: 0.8662391053409028; QF: 0.16890153054313964; select director_0.name from cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where cast_0.role = "The Past" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.666767708091444; TR: 0.8662391053409028; QF: 0.16890153054313964; select director_0.birth_city from cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where cast_0.role = "The Past" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6629917582285376; TR: 0.8662391053409028; QF: 0.14530184389997475; select writer_0.birth_city from cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where cast_0.role = "The Past" and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid


03:40  INFO: ================
03:40  INFO: QUERY 4: Find all actors born in "Los Angeles"
03:40  INFO: ================
03:42  INFO: ================
03:42  INFO: QUERY 42: What are all the tv series created by "Shonda Rhimes"?
03:42  INFO: ================
03:44  INFO: ================
03:44  INFO: QUERY 92: What is the number of movies produced in 2013?
03:44  INFO: ================
03:44  INFO: ================
03:44  INFO: QUERY 101: How many movies did "Quentin Tarantino" direct after 2010?
03:44  INFO: ================
03:46  INFO: ================
03:46  INFO: QUERY 80: what are the genres of movies directed by "Asghar Farhadi"
03:46  INFO: ================
950. ROOT: ROOT; NA; ; (0) 
951. directed: NT; NA; ; (0) directed_by(1.0):| director.name(0.72):| director(0.72):| written_by(0.68):| cast.role(0.67):| cast(0.67):| made_by(0.67):| 
952. what: CMT; NA; ; (0) 
954. genres: NT; NA; ; (0) genre.genre(1.0):| genre(1.0):| movie.title(0.95):Genre; Genre; All Genres; | keyword.keyword(0.95):genre; sui-genres; genre-mix; | movie.title(0.73):| movie(0.73):| movie.title_aka(0.68):| 
956. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
958. Asghar Farhadi: VTTEXT; NA; ; (0) director.name(1.0):Asghar Farhadi; Asghar Farhadi; Asghar Tharani; | actor.name(1.0):Asghar Farhadi; Asghar Farhadi; Farhad Asghar; | producer.name(1.0):Asghar Farhadi; Asghar Farhadi; Asghar Bichareh; | company.name(1.0):Asghar Farhadi; Asghar Farhadi; Farhadi Film Product; | writer.name(1.0):Asghar Farhadi; Asghar Farhadi; Asghar Saffar; | movie.title(0.71):Untitled Asghar Farh; Untitled Asghar Farh; Asghar Farhadi sinem; | cast.role(0.66):Abed Farhadi; Asghar Diesel; Asghar Diesel; | 
what, WP
are, VBP
the, DT
genres, NNS
of, IN
movies, NNS
directed, VBN
by, IN
Asghar Farhadi, NNP
dobj(directed-7, what-1)
auxpass(directed-7, are-2)
det(genres-4, the-3)
nsubjpass(directed-7, genres-4)
case(movies-6, of-5)
nmod(genres-4, movies-6)
root(ROOT-0, directed-7)
case(Asghar Farhadi-9, by-8)
nmod(directed-7, Asghar Farhadi-9)

PARSE TREE:(950) ROOT ROOT
    (952) what CMT
        (954) genres NT
            (956) movies NT
            (951) directed NT
                (958) Asghar Farhadi VTTEXT


===========
TRANSLATIONS
===========
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [movie,directed_by]; projs: [genre_0.genre]; preds: [director_0.name = "Asghar Farhadi"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [movie,directed_by]; projs: [genre_0.genre]; preds: [actor_0.name = "Asghar Farhadi"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [movie,directed_by]; projs: [genre_0.genre]; preds: [producer_0.name = "Asghar Farhadi"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [movie,directed_by]; projs: [genre_0.genre]; preds: [company_0.name = "Asghar Farhadi"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [movie,directed_by]; projs: [genre_0.genre]; preds: [writer_0.name = "Asghar Farhadi"]; havings: []; superlative: []; blanks: 0
TOT: 0.9641061147493116; NL: 0.9254437559447964; NL+AG: 0.9764535317387539; NL+QF: 0.9641061147493116; rels: [movie,directed_by]; projs: [movie_0.title]; preds: [actor_0.name = "Asghar Farhadi"]; havings: []; superlative: []; blanks: 0
TOT: 0.9641061147493116; NL: 0.9254437559447964; NL+AG: 0.9764535317387539; NL+QF: 0.9641061147493116; rels: [movie,directed_by]; projs: [movie_0.title]; preds: [actor_0.name = "Asghar Farhadi"]; havings: []; superlative: []; blanks: 0
TOT: 0.9641061147493116; NL: 0.9254437559447964; NL+AG: 0.9764535317387539; NL+QF: 0.9641061147493116; rels: [movie,directed_by]; projs: [movie_0.title]; preds: [actor_0.name = "Asghar Farhadi"]; havings: []; superlative: []; blanks: 0
TOT: 0.9591908693911565; NL: 0.9254437559447964; NL+AG: 0.9764535317387539; NL+QF: 0.9591908693911565; rels: [movie,directed_by]; projs: [movie_0.title]; preds: [director_0.name = "Asghar Farhadi"]; havings: []; superlative: []; blanks: 0
TOT: 0.9591908693911565; NL: 0.9254437559447964; NL+AG: 0.9764535317387539; NL+QF: 0.9591908693911565; rels: [movie,directed_by]; projs: [movie_0.title]; preds: [director_0.name = "Asghar Farhadi"]; havings: []; superlative: []; blanks: 0
TOT: 0.9591908693911565; NL: 0.9254437559447964; NL+AG: 0.9764535317387539; NL+QF: 0.9591908693911565; rels: [movie,directed_by]; projs: [movie_0.title]; preds: [director_0.name = "Asghar Farhadi"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.7511800355155663; TR: 0.9591908693911565; QF: 0.2318840579710145; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Asghar Farhadi" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.7271192319491739; TR: 1.0; QF: 0.12367480643240025; select genre_0.genre from classification as classification_0, directed_by as directed_by_0, director as director_0, genre as genre_0, movie as movie_0 where director_0.name = "Asghar Farhadi" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6783356668714564; TR: 0.9641061147493116; QF: 0.05725327812284335; select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Asghar Farhadi" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid
TOT: 0.6765032632874182; TR: 0.9591908693911565; QF: 0.06423292581568583; select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where director_0.name = "Asghar Farhadi" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.6747587763853418; TR: 0.9591908693911565; QF: 0.053329882677708766; select movie_0.title from company as company_0, copyright as copyright_0, copyright as copyright_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where director_0.name = "Asghar Farhadi" and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.6746952843218497; TR: 0.9591908693911565; QF: 0.052933057280883364; select movie_0.title from directed_by as directed_by_0, director as director_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where director_0.name = "Asghar Farhadi" and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid
TOT: 0.6745991882257536; TR: 0.9591908693911565; QF: 0.05233245668028277; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where director_0.name = "Asghar Farhadi" and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid and movie_0.mid = written_by_0.msid and tv_series_0.sid = written_by_1.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid
TOT: 0.6745004593599014; TR: 0.9591908693911565; QF: 0.051715401268706794; select movie_0.title from directed_by as directed_by_0, director as director_0, made_by as made_by_0, made_by as made_by_1, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where director_0.name = "Asghar Farhadi" and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid and made_by_1.msid = tv_series_0.sid and made_by_1.pid = producer_0.pid
TOT: 0.6745004593599014; TR: 0.9591908693911565; QF: 0.051715401268706794; select movie_0.title from classification as classification_0, classification as classification_1, directed_by as directed_by_0, director as director_0, genre as genre_0, movie as movie_0, tv_series as tv_series_0 where director_0.name = "Asghar Farhadi" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid


03:47  INFO: ================
03:47  INFO: QUERY 86: List all the directors of movies about nuclear weapons
03:47  INFO: ================
961. ROOT: ROOT; NA; ; (0) 
962. List: CMT; NA; ; (0) 
963. directors: NT; NA; all; (0) director.name(1.0):| director(1.0):| movie.title(0.95):Director; Director; Director; | producer.name(0.95):Director; Co-Director; Director GT; | company.name(0.95):Directors; Directors; Director; | writer.name(0.95):Director; Director X; Director X.; | tv_series.title(0.88):Directors on Directo; The Directors; The Directors; | 
966. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
968. weapons: VTTEXT; NA; ; (0) movie.title(0.95):Weapons; Weapons; Weapons; | cast.role(0.95):Weapons; Weapons; Weapons; | keyword.keyword(0.95):weapon; weapon-x; power-weapon; | actor.name(0.74):The Weapons; Leatha Weapons; Letha Weapons; | tv_series.title(0.71):Weapons of Power; Weapon Wars; Weapons at War; | company.name(0.67):Weapon Films; Weapons Productions; No Weapon Production; | director.nationality(0.59):| 
970. nuclear: VTTEXT; NA; ; (0) movie.title(1.0):Nuclear; Nuclear Leak; Nuclear Day; | company.name(1.0):Nuclear; Nuclear; Nuclear Cat; | keyword.keyword(1.0):nuclear; nuclear-leak; nuclear-arms; | cast.role(0.79):Nuclear dealer; Nuclear Man; Nuclear Man; | tv_series.title(0.77):Nuclear Ned; Nuclear Coleslaw; Nuclear Family; | actor.name(0.68):Nuclear Family; Nuclear Wintour; El Físico Nuclear; | company.country_code(0.62):| 
List, VB
all, PDT
the, DT
directors, NNS
of, IN
movies, NNS
about, IN
nuclear, JJ
weapons, NNS
root(ROOT-0, List-1)
det:predet(directors-4, all-2)
det(directors-4, the-3)
dobj(List-1, directors-4)
case(movies-6, of-5)
nmod(directors-4, movies-6)
case(weapons-9, about-7)
amod(weapons-9, nuclear-8)
nmod(movies-6, weapons-9)

PARSE TREE:(961) ROOT ROOT
    (962) List CMT
        (963) directors NT
            (966) movies NT
                (968) weapons VTTEXT
                    (970) nuclear VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.966581842152465; NL+QF: 0.8979007600118484; rels: [movie]; projs: [director_0.name]; preds: [movie_0.title = "Nuclear"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.966581842152465; NL+QF: 0.8979007600118484; rels: [movie]; projs: [director_0.name]; preds: [company_0.name = "Nuclear"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.966581842152465; NL+QF: 0.8979007600118484; rels: [movie]; projs: [director_0.name]; preds: [keyword_0.keyword = "nuclear"]; havings: []; superlative: []; blanks: 1
TOT: 0.8706421479874179; NL: 0.8301821713362141; NL+AG: 0.9775911474238732; NL+QF: 0.8706421479874179; rels: [movie]; projs: [director_0.name]; preds: [movie_0.title = "Weapons",movie_0.title = "Nuclear"]; havings: []; superlative: []; blanks: 0
TOT: 0.8706421479874179; NL: 0.8301821713362141; NL+AG: 0.9775911474238732; NL+QF: 0.8706421479874179; rels: [movie]; projs: [director_0.name]; preds: [movie_0.title = "Weapons",company_0.name = "Nuclear"]; havings: []; superlative: []; blanks: 0
TOT: 0.8706421479874179; NL: 0.8301821713362141; NL+AG: 0.9775911474238732; NL+QF: 0.8706421479874179; rels: [movie]; projs: [director_0.name]; preds: [movie_0.title = "Weapons",keyword_0.keyword = "nuclear"]; havings: []; superlative: []; blanks: 0
TOT: 0.8636522447290672; NL: 0.8301821713362141; NL+AG: 0.9775911474238732; NL+QF: 0.8636522447290672; rels: [movie]; projs: [director_0.name]; preds: [cast_0.role = "Weapons",movie_0.title = "Nuclear"]; havings: []; superlative: []; blanks: 0
TOT: 0.850715628074582; NL: 0.8470827043267568; NL+AG: 0.942763618984786; NL+QF: 0.850715628074582; rels: [movie]; projs: [director_0.name]; preds: [cast_0.role = "Nuclear dealer"]; havings: []; superlative: []; blanks: 1
TOT: 0.8498919018967559; NL: 0.7831967519106005; NL+AG: 0.9551822948477464; NL+QF: 0.8498919018967559; rels: [movie]; projs: [director_0.name]; preds: [movie_0.title = "Weapons",cast_0.role = "Nuclear dealer"]; havings: []; superlative: []; blanks: 0
TOT: 0.8423590487037597; NL: 0.8423590487037597; NL+AG: 0.942763618984786; NL+QF: 0.8423590487037597; rels: [movie]; projs: [director_0.name]; preds: [tv_series_0.title = "Nuclear Ned"]; havings: []; superlative: []; blanks: 1
TOT: 0.8413340403902587; NL: 0.8176106028275605; NL+AG: 0.9331636843049301; NL+QF: 0.8413340403902587; rels: [tv_series]; projs: [director_0.name]; preds: [company_0.name = "Nuclear"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.7144059698879814; TR: 0.8979007600118484; QF: 0.2318840579710145; select director_0.name from directed_by as directed_by_0, director as director_0, movie as movie_0 where movie_0.title = "Nuclear" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6664021537097076; TR: 0.8979007600118484; QF: 0.12706521739130436; select director_0.name from company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where company_0.name = "Nuclear" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6662688203763742; TR: 0.8979007600118484; QF: 0.12623188405797103; select director_0.name from directed_by as directed_by_0, director as director_0, keyword as keyword_0, movie as movie_0, tags as tags_0 where keyword_0.keyword = "nuclear" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and keyword_0.id = tags_0.kid and movie_0.mid = tags_0.msid
TOT: 0.6652155917243426; TR: 0.8636522447290672; QF: 0.16890153054313964; select director_0.name from cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where cast_0.role = "Weapons" and movie_0.title = "Nuclear" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6574536217316516; TR: 0.850715628074582; QF: 0.16890153054313964; select director_0.name from cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where cast_0.role = "Nuclear dealer" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6569593860249558; TR: 0.8498919018967559; QF: 0.16890153054313964; select director_0.name from cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where cast_0.role = "Nuclear dealer" and movie_0.title = "Weapons" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6500469864950493; TR: 0.8706421479874179; QF: 0.12706521739130436; select director_0.name from company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where company_0.name = "Nuclear" and movie_0.title = "Weapons" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.649913653161716; TR: 0.8706421479874179; QF: 0.12623188405797103; select director_0.name from directed_by as directed_by_0, director as director_0, keyword as keyword_0, movie as movie_0, tags as tags_0 where keyword_0.keyword = "nuclear" and movie_0.title = "Weapons" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and keyword_0.id = tags_0.kid and movie_0.mid = tags_0.msid
TOT: 0.6494869864950493; TR: 0.8706421479874179; QF: 0.12356521739130435; select director_0.name from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, movie as movie_1 where movie_0.title = "Weapons" and movie_1.title = "Nuclear" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = movie_1.mid
TOT: 0.6397291976598333; TR: 0.8979007600118484; QF: 0.06423292581568583; select director_0.name from actor as actor_0, cast as cast_0, cast as cast_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where movie_0.title = "Nuclear" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid


03:49  INFO: ================
03:49  INFO: QUERY 102: How many movies did "Quentin Tarantino" direct before 2010?
03:49  INFO: ================
03:52  INFO: ================
03:52  INFO: QUERY 111: How many companies participated in producing "Camp X-Ray"
03:52  INFO: ================
03:56  INFO: ================
03:56  INFO: QUERY 84: List all male directors who worked with the "NBCUniversal" company
03:56  INFO: ================
991. ROOT: ROOT; NA; ; (0) 
992. List: CMT; NA; ; (0) 
993. directors: NT; NA; all; (0) director.name(1.0):| director(1.0):| movie.title(0.95):Director; Director; Director; | producer.name(0.95):Director; Co-Director; Director GT; | company.name(0.95):Directors; Directors; Director; | writer.name(0.95):Director; Director X; Director X.; | tv_series.title(0.88):Directors on Directo; The Directors; The Directors; | 
995. male: VTTEXT; NA; ; (0) movie.title(1.0):Male; Female/Male; Pale Male; | director.birth_city(1.0):Male; Wilkucice Male; | director.gender(1.0):male; male; male; | actor.gender(1.0):male; male; male; | actor.name(1.0):Male; Male; Coleman Male; | cast.role(1.0):Males; Males; Males; | producer.birth_city(1.0):Male; | 
996. worked: NT; NA; ; (0) directed_by(0.71):| made_by(0.64):| written_by(0.63):| director.name(0.62):| director(0.62):| cast.role(0.62):| cast(0.62):| 
998. company: NT; NA; ; (0) company.name(1.0):| company(1.0):| movie.title(0.95):Company; Company; Company; | cast.role(0.95):Company; Company; Company; | keyword.keyword(0.95):company; company-k; it-company; | tv_series.title(0.82):X Company; Eco Company; Company and Co; | actor.name(0.74):Eva Company; Angel Company; Marc Company; | 
1001. NBCUniversal: VTTEXT; NA; ; (0) company.name(1.0):NBCUniversal; NBCUniversal Media; NBCUniversal Skycast; | genre.genre(0.2):Commercial; Commercial; Experimental; | 
List, VB
all, DT
male, JJ
directors, NNS
who, WP
worked, VBD
with, IN
the, DT
NBCUniversal, NNP
company, NN
root(ROOT-0, List-1)
det(directors-4, all-2)
amod(directors-4, male-3)
dobj(List-1, directors-4)
nsubj(worked-6, who-5)
acl:relcl(directors-4, worked-6)
case(company-10, with-7)
det(company-10, the-8)
compound(company-10, NBCUniversal-9)
nmod(worked-6, company-10)

PARSE TREE:(991) ROOT ROOT
    (992) List CMT
        (993) directors NT
            (995) male VTTEXT
            (996) worked NT
                (998) company NT
                    (1001) NBCUniversal VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.9383734951578884; NL: 0.9168559143387582; NL+AG: 0.9685548245020893; NL+QF: 0.9383734951578884; rels: [directed_by]; projs: [director_0.name]; preds: [actor_0.name = "Male",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 0
TOT: 0.9383455831447247; NL: 0.9168559143387582; NL+AG: 0.9685548245020893; NL+QF: 0.9383455831447247; rels: [directed_by]; projs: [director_0.name]; preds: [movie_0.title = "Male",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 0
TOT: 0.9364746612214895; NL: 0.9168559143387582; NL+AG: 0.9685548245020893; NL+QF: 0.9364746612214895; rels: [directed_by]; projs: [director_0.name]; preds: [director_0.birth_city = "Male",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 0
TOT: 0.933875535029306; NL: 0.9168559143387582; NL+AG: 0.9685548245020893; NL+QF: 0.933875535029306; rels: [directed_by]; projs: [director_0.name]; preds: [director_0.gender = "male",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 0
TOT: 0.933875535029306; NL: 0.9168559143387582; NL+AG: 0.9685548245020893; NL+QF: 0.933875535029306; rels: [directed_by]; projs: [director_0.name]; preds: [actor_0.gender = "male",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 0
TOT: 0.933875535029306; NL: 0.9168559143387582; NL+AG: 0.9685548245020893; NL+QF: 0.933875535029306; rels: [directed_by]; projs: [director_0.name]; preds: [cast_0.role = "Males",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 0
TOT: 0.933875535029306; NL: 0.9168559143387582; NL+AG: 0.9685548245020893; NL+QF: 0.933875535029306; rels: [directed_by]; projs: [director_0.name]; preds: [producer_0.birth_city = "Male",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 0
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [director_0.name]; preds: [movie_0.title = "Male",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [director_0.name]; preds: [director_0.birth_city = "Male",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [director_0.name]; preds: [director_0.gender = "male",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [director_0.name]; preds: [actor_0.gender = "male",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [director_0.name]; preds: [actor_0.name = "Male",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [director_0.name]; preds: [cast_0.role = "Males",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [director_0.name]; preds: [producer_0.birth_city = "Male",company_0.name = "NBCUniversal"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.6906690475894334; TR: 0.9383455831447247; QF: 0.12706521739130436; select director_0.name from company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where company_0.name = "NBCUniversal" and movie_0.title = "Male" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6895464944354923; TR: 0.9364746612214895; QF: 0.12706521739130436; select director_0.name from company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where company_0.name = "NBCUniversal" and director_0.birth_city = "Male" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6894904557881493; TR: 0.9364746612214895; QF: 0.12671497584541064; select director_0.name from company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, tv_series as tv_series_0 where company_0.name = "NBCUniversal" and director_0.birth_city = "Male" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.6879870187201822; TR: 0.933875535029306; QF: 0.12706521739130436; select director_0.name from company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where company_0.name = "NBCUniversal" and director_0.gender = "male" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6879309800728391; TR: 0.933875535029306; QF: 0.12671497584541064; select director_0.name from company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, tv_series as tv_series_0 where company_0.name = "NBCUniversal" and director_0.gender = "male" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.675247942017005; TR: 0.933875535029306; QF: 0.10589394555058919; select director_0.name from cast as cast_0, company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where cast_0.role = "Males" and company_0.name = "NBCUniversal" and cast_0.msid = movie_0.mid and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.672532285930199; TR: 0.933875535029306; QF: 0.08892109500805152; select director_0.name from cast as cast_0, company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, tv_series as tv_series_0 where cast_0.role = "Males" and company_0.name = "NBCUniversal" and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.6688853548703482; TR: 0.9383734951578884; QF: 0.09468615158375418; select director_0.name from actor as actor_0, cast as cast_0, company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.name = "Male" and company_0.name = "NBCUniversal" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6669456005226296; TR: 0.9383734951578884; QF: 0.08256268691051301; select director_0.name from actor as actor_0, cast as cast_0, company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, tv_series as tv_series_0 where actor_0.name = "Male" and company_0.name = "NBCUniversal" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.6661865787931988; TR: 0.933875535029306; QF: 0.09468615158375418; select director_0.name from actor as actor_0, cast as cast_0, company as company_0, copyright as copyright_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.gender = "male" and company_0.name = "NBCUniversal" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid


04:18  INFO: ===== FOLD 3 =====
04:18  INFO: ===== Parsing Results =====
04:18  INFO: Total Queries: 99
04:18  INFO: Correctly Parsed: 98/99

04:18  INFO: ================
04:18  INFO: QUERY 85: What are the movies related to nuclear weapons
04:18  INFO: ================
1003. ROOT: ROOT; NA; ; (0) 
1004. related: NT; NA; ; (0) made_by(0.69):| written_by(0.66):| directed_by(0.66):| cast.role(0.61):| cast(0.6):| company.name(0.59):| company(0.59):| 
1005. What: CMT; NA; ; (0) 
1007. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
1009. weapons: VTTEXT; NA; ; (0) movie.title(0.95):Weapons; Weapons; Weapons; | cast.role(0.95):Weapons; Weapons; Weapons; | keyword.keyword(0.95):weapon; weapon-x; power-weapon; | actor.name(0.74):The Weapons; Leatha Weapons; Letha Weapons; | tv_series.title(0.71):Weapons of Power; Weapon Wars; Weapons at War; | company.name(0.67):Weapon Films; Weapons Productions; No Weapon Production; | director.nationality(0.59):| 
1011. nuclear: VTTEXT; NA; ; (0) movie.title(1.0):Nuclear; Nuclear Leak; Nuclear Day; | company.name(1.0):Nuclear; Nuclear; Nuclear Cat; | keyword.keyword(1.0):nuclear; nuclear-leak; nuclear-arms; | cast.role(0.79):Nuclear dealer; Nuclear Man; Nuclear Man; | tv_series.title(0.77):Nuclear Ned; Nuclear Coleslaw; Nuclear Family; | actor.name(0.68):Nuclear Family; Nuclear Wintour; El Físico Nuclear; | company.country_code(0.62):| 
What, WP
are, VBP
the, DT
movies, NNS
related, VBN
to, TO
nuclear, JJ
weapons, NNS
dobj(related-5, What-1)
auxpass(related-5, are-2)
det(movies-4, the-3)
nsubjpass(related-5, movies-4)
root(ROOT-0, related-5)
case(weapons-8, to-6)
amod(weapons-8, nuclear-7)
nmod(related-5, weapons-8)

PARSE TREE:(1003) ROOT ROOT
    (1005) What CMT
        (1007) movies NT
            (1004) related NT
                (1009) weapons VTTEXT
                    (1011) nuclear VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.831558987214801; NL: 0.8081260796742606; NL+AG: 0.9331636843049301; NL+QF: 0.831558987214801; rels: [directed_by]; projs: [movie_0.title]; preds: [movie_0.title = "Nuclear"]; havings: []; superlative: []; blanks: 1
TOT: 0.8263124226777906; NL: 0.8081260796742606; NL+AG: 0.9331636843049301; NL+QF: 0.8263124226777906; rels: [directed_by]; projs: [movie_0.title]; preds: [company_0.name = "Nuclear"]; havings: []; superlative: []; blanks: 1
TOT: 0.822986287803082; NL: 0.8193886719056226; NL+AG: 0.9331636843049301; NL+QF: 0.822986287803082; rels: [made_by]; projs: [movie_0.title]; preds: [movie_0.title = "Nuclear"]; havings: []; superlative: []; blanks: 1
TOT: 0.822986287803082; NL: 0.8193886719056226; NL+AG: 0.9331636843049301; NL+QF: 0.822986287803082; rels: [made_by]; projs: [movie_0.title]; preds: [company_0.name = "Nuclear"]; havings: []; superlative: []; blanks: 1
TOT: 0.822986287803082; NL: 0.8193886719056226; NL+AG: 0.9331636843049301; NL+QF: 0.822986287803082; rels: [made_by]; projs: [movie_0.title]; preds: [keyword_0.keyword = "nuclear"]; havings: []; superlative: []; blanks: 1
TOT: 0.8226528535190272; NL: 0.8081260796742606; NL+AG: 0.9331636843049301; NL+QF: 0.8226528535190272; rels: [directed_by]; projs: [movie_0.title]; preds: [keyword_0.keyword = "nuclear"]; havings: []; superlative: []; blanks: 1
TOT: 0.8225126100298767; NL: 0.8104255302688795; NL+AG: 0.9331636843049301; NL+QF: 0.8225126100298767; rels: [written_by]; projs: [movie_0.title]; preds: [movie_0.title = "Nuclear"]; havings: []; superlative: []; blanks: 1
TOT: 0.8188503008031688; NL: 0.8104255302688795; NL+AG: 0.9331636843049301; NL+QF: 0.8188503008031688; rels: [written_by]; projs: [movie_0.title]; preds: [company_0.name = "Nuclear"]; havings: []; superlative: []; blanks: 1
TOT: 0.8188503008031688; NL: 0.8104255302688795; NL+AG: 0.9331636843049301; NL+QF: 0.8188503008031688; rels: [written_by]; projs: [movie_0.title]; preds: [keyword_0.keyword = "nuclear"]; havings: []; superlative: []; blanks: 1
TOT: 0.806225774829855; NL: 0.806225774829855; NL+AG: 0.9331636843049301; NL+QF: 0.806225774829855; rels: []; projs: [movie_0.title]; preds: [movie_0.title = "Nuclear"]; havings: []; superlative: []; blanks: 2
TOT: 0.806225774829855; NL: 0.806225774829855; NL+AG: 0.9331636843049301; NL+QF: 0.806225774829855; rels: []; projs: [movie_0.title]; preds: [company_0.name = "Nuclear"]; havings: []; superlative: []; blanks: 2
TOT: 0.806225774829855; NL: 0.806225774829855; NL+AG: 0.9331636843049301; NL+QF: 0.806225774829855; rels: []; projs: [movie_0.title]; preds: [keyword_0.keyword = "nuclear"]; havings: []; superlative: []; blanks: 2

===========
RESULTS
===========
TOT: 0.6530687602726539; TR: 0.806225774829855; QF: 0.1923076923076923; select movie_0.title from keyword as keyword_0, movie as movie_0, tags as tags_0 where keyword_0.keyword = "nuclear" and keyword_0.id = tags_0.kid and movie_0.mid = tags_0.msid
TOT: 0.6529168134540404; TR: 0.806225774829855; QF: 0.19135802469135801; select movie_0.title from company as company_0, copyright as copyright_0, movie as movie_0 where company_0.name = "Nuclear" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid
TOT: 0.6261661588762092; TR: 0.831558987214801; QF: 0.12437189767086673; select movie_0.title from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, movie as movie_1 where movie_1.title = "Nuclear" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = movie_1.mid
TOT: 0.6097546145492075; TR: 0.822986287803082; QF: 0.05394736842105263; select movie_0.title from made_by as made_by_0, made_by as made_by_1, movie as movie_0, movie as movie_1, producer as producer_0 where movie_1.title = "Nuclear" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid and made_by_1.msid = movie_1.mid and made_by_1.pid = producer_0.pid
TOT: 0.6094788289379159; TR: 0.8225126100298767; QF: 0.054000000000000006; select movie_0.title from movie as movie_0, movie as movie_1, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where movie_1.title = "Nuclear" and movie_0.mid = written_by_0.msid and movie_1.mid = written_by_1.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid
TOT: 0.6035589515027548; TR: 0.806225774829855; QF: 0.0780763980303252; select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0, movie as movie_1 where movie_1.title = "Nuclear" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_1.mid
TOT: 0.6002974970486721; TR: 0.806225774829855; QF: 0.05769230769230769; select movie_0.title from keyword as keyword_0, movie as movie_0, movie as movie_1, tags as tags_0, tags as tags_1 where movie_1.title = "Nuclear" and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and movie_1.mid = tags_1.msid
TOT: 0.6002519130030881; TR: 0.806225774829855; QF: 0.05740740740740741; select movie_0.title from company as company_0, copyright as copyright_0, copyright as copyright_1, movie as movie_0, movie as movie_1 where movie_1.title = "Nuclear" and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = movie_1.mid
TOT: 0.6001056888568639; TR: 0.806225774829855; QF: 0.0564935064935065; select movie_0.title from classification as classification_0, classification as classification_1, genre as genre_0, movie as movie_0, movie as movie_1 where movie_1.title = "Nuclear" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = movie_1.mid
TOT: 0.5958607932350473; TR: 0.8263124226777906; QF: 0.05851166316348966; select movie_0.title from company as company_0, copyright as copyright_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where company_0.name = "Nuclear" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid and directed_by_1.did = director_0.did and directed_by_1.msid = movie_0.mid


04:19  INFO: ================
04:19  INFO: QUERY 3: Find all movies produced in 2015
04:19  INFO: ================
04:20  INFO: ================
04:20  INFO: QUERY 61: How many movies are there that are directed by "Steven Spielberg" and featuring "Matt Damon"?
04:20  INFO: ================
1021. ROOT: ROOT; NA; ; (0) 
1023. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
1025. How many: CMT; count; ; (0) 
1027. directed: NT; NA; ; (0) directed_by(1.0):| director.name(0.72):| director(0.72):| written_by(0.68):| cast.role(0.67):| cast(0.67):| made_by(0.67):| 
1033. featuring: NT; NA; ; (0) tv_series.title(0.69):| tv_series(0.69):| movie.release_year(0.64):| tv_series.release_year(0.64):| made_by(0.64):| movie.title_aka(0.62):| tv_series.title_aka(0.62):| 
1034. Matt Damon: VTTEXT; NA; ; (0) director.name(1.0):Matt Damon; Matt Diamond; Matt Diamond; | actor.name(1.0):Matt Damon; Matt Damon; Matt Diamond; | producer.name(1.0):Matt Damon; Matt Damon; Matt Diamond; | writer.name(1.0):Matt Damon; Matt Damon; Matt Diamond; | movie.title(0.76):I'm Not Matt Damon; I'm Not Matt Damon; Meeting Matt Damon; | cast.role(0.74):Matt Stamon; Matt Damien; Matt Demond; | tv_series.title(0.67):Damon; The Damon Elliott Sh; Matt Houston; | 
How, WRB
many, JJ
movies, NNS
are, VBP
there, EX
that, WDT
are, VBP
directed, VBN
by, IN
Steven Spielberg, VBG
and, CC
featuring, VBG
Matt Damon, NNP
advmod(many-2, How-1)
amod(movies-3, many-2)
nsubj(are-4, movies-3)
root(ROOT-0, are-4)
expl(are-4, there-5)
nsubjpass(directed-8, that-6)
auxpass(directed-8, are-7)
dep(are-4, directed-8)
mark(Steven Spielberg-10, by-9)
advcl(directed-8, Steven Spielberg-10)
cc(Steven Spielberg-10, and-11)
conj(Steven Spielberg-10, featuring-12)
dobj(Steven Spielberg-10, Matt Damon-13)

PARSE TREE:(1021) ROOT ROOT
    (1025) How many CMT
        (1023) movies NT
            (1027) directed NT
                (1034) Matt Damon VTTEXT
                (1033) featuring NT


===========
TRANSLATIONS
===========
TOT: 0.919751708767763; NL: 0.9100167166104893; NL+AG: 0.9663389530788972; NL+QF: 0.919751708767763; rels: [tv_series,directed_by]; projs: [count(distinct(movie_0.title))]; preds: [producer_0.name = "Matt Damon"]; havings: []; superlative: []; blanks: 0
TOT: 0.9143289387793889; NL: 0.9100167166104893; NL+AG: 0.9663389530788972; NL+QF: 0.9143289387793889; rels: [tv_series,directed_by]; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Matt Damon"]; havings: []; superlative: []; blanks: 0
TOT: 0.9121804722345871; NL: 0.9100167166104893; NL+AG: 0.9663389530788972; NL+QF: 0.9121804722345871; rels: [tv_series,directed_by]; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Matt Damon"]; havings: []; superlative: []; blanks: 0
TOT: 0.9121804722345871; NL: 0.9100167166104893; NL+AG: 0.9663389530788972; NL+QF: 0.9121804722345871; rels: [tv_series,directed_by]; projs: [count(distinct(movie_0.title))]; preds: [writer_0.name = "Matt Damon"]; havings: []; superlative: []; blanks: 0
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9663389530788972; NL+QF: 0.8979007600118484; rels: [directed_by]; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Matt Damon"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9663389530788972; NL+QF: 0.8979007600118484; rels: [directed_by]; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Matt Damon"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9663389530788972; NL+QF: 0.8979007600118484; rels: [directed_by]; projs: [count(distinct(movie_0.title))]; preds: [producer_0.name = "Matt Damon"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9663389530788972; NL+QF: 0.8979007600118484; rels: [directed_by]; projs: [count(distinct(movie_0.title))]; preds: [writer_0.name = "Matt Damon"]; havings: []; superlative: []; blanks: 1
TOT: 0.8656821285326051; NL: 0.8372758622495686; NL+AG: 0.9326779061577943; NL+QF: 0.8656821285326051; rels: [tv_series,director]; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Matt Damon"]; havings: []; superlative: []; blanks: 0
TOT: 0.8626215029222025; NL: 0.8261283769089807; NL+AG: 0.9326779061577943; NL+QF: 0.8626215029222025; rels: [director]; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Matt Damon"]; havings: []; superlative: []; blanks: 1
TOT: 0.8624276237213678; NL: 0.8217939593803067; NL+AG: 0.9326779061577943; NL+QF: 0.8624276237213678; rels: [made_by,tv_series]; projs: [count(distinct(movie_0.title))]; preds: [producer_0.name = "Matt Damon"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.7151917549259703; TR: 0.8979007600118484; QF: 0.23679521445844473; select count(distinct(movie_0.title)) from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Matt Damon" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6527310935837696; TR: 0.919751708767763; QF: 0.06355371750560754; select count(distinct(movie_0.title)) from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Matt Damon" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6485190101672074; TR: 0.9143289387793889; QF: 0.0575635836084969; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Matt Damon" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid
TOT: 0.6477338669068998; TR: 0.9121804722345871; QF: 0.06071318777458167; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, cast as cast_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where director_0.name = "Matt Damon" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.6474957109712233; TR: 0.9121804722345871; QF: 0.059224713176603216; select count(distinct(movie_0.title)) from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Matt Damon" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6461807933573366; TR: 0.9121804722345871; QF: 0.05100647808981142; select count(distinct(movie_0.title)) from directed_by as directed_by_0, director as director_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where director_0.name = "Matt Damon" and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid
TOT: 0.6461590866689633; TR: 0.9121804722345871; QF: 0.05087081128747795; select count(distinct(movie_0.title)) from company as company_0, copyright as copyright_0, copyright as copyright_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where director_0.name = "Matt Damon" and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.6460894561231422; TR: 0.9121804722345871; QF: 0.050435620376096564; select count(distinct(movie_0.title)) from classification as classification_0, classification as classification_1, directed_by as directed_by_0, director as director_0, genre as genre_0, movie as movie_0, tv_series as tv_series_0 where director_0.name = "Matt Damon" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.6458994746760178; TR: 0.9121804722345871; QF: 0.04924823633156967; select count(distinct(movie_0.title)) from directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where director_0.name = "Matt Damon" and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid and movie_0.mid = written_by_0.msid and tv_series_0.sid = written_by_1.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid
TOT: 0.6458954646509553; TR: 0.9121804722345871; QF: 0.04922317367492807; select count(distinct(movie_0.title)) from directed_by as directed_by_0, director as director_0, made_by as made_by_0, made_by as made_by_1, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where director_0.name = "Matt Damon" and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid and made_by_1.msid = tv_series_0.sid and made_by_1.pid = producer_0.pid


04:21  INFO: ================
04:21  INFO: QUERY 51: What are the series in which "Scott Foley" is an actor?
04:21  INFO: ================
04:22  INFO: ================
04:22  INFO: QUERY 110: find the number of actors from Iran who played in "Jim Jarmusch" movies
04:22  INFO: ================
1048. ROOT: ROOT; NA; ; (0) 
1049. find: CMT; NA; ; (0) 
1050. number of: FT; count; ; (0) 
1052. actors: NT; NA; ; (0) actor.name(1.0):| actor(1.0):| movie.title(0.95):Actors; Actors; Actors; | tv_series.title(0.95):Actors; Actor; The Actor Factor; | cast.role(0.95):Actors; Actors; Actors; | keyword.keyword(0.95):actors; actor-director; no-actors; | company.name(0.79):For Actors by Actors; Actors Loft; Actors Pool; | 
1054. Iran: VTTEXT; NA; ; (0) movie.title(1.0):Iran; Iran!; Ei Iran; | director.nationality(1.0):Iran; Iran; Iran; | actor.nationality(1.0):Iran; Iran; Iran; | actor.name(1.0):Iran; Iran Torabi; Iran Daniel; | producer.nationality(1.0):Iran; Iran; Iran; | writer.nationality(1.0):Iran; Iran; Iran; | keyword.keyword(0.77):tehran-iran; shiraz-iran; iraq-iran-war; | 
1056. played: NT; NA; ; (0) tv_series.num_of_seasons(0.67):| cast.role(0.66):| directed_by(0.64):| actor.name(0.63):| actor(0.63):| cast(0.63):| movie.title_aka(0.63):| 
1058. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
1060. Jim Jarmusch: VTTEXT; NA; ; (0) director.name(1.0):Jim Jarmusch; Jim Jarmusch; Tom Jarmusch; | actor.name(1.0):Jim Jarmusch; Jim Jarmusch; Tom Jarmusch; | producer.name(1.0):Jim Jarmusch; Jim Jarmusch; Tom Jarmusch; | writer.name(1.0):Jim Jarmusch; Jim Jarmusch; James R. Jarmusch; | movie.title(0.81):Behind Jim Jarmusch; Behind Jim Jarmusch; Focus on Jim Jarmusc; | cast.role(0.72):Jim Jarmusch's broth; Jim Jarmusch's broth; Jim Jamush; | tv_series.title(0.52):Earthworm Jim; Earthworm Jim; Jim Jam & Sunny; | 
find, VB
the, DT
number, NN
of, IN
actors, NNS
from, IN
Iran, NNP
who, WP
played, VBN
in, IN
Jim Jarmusch, NNP
movies, NNS
root(ROOT-0, find-1)
det(number-3, the-2)
dobj(find-1, number-3)
case(actors-5, of-4)
nmod(number-3, actors-5)
case(Iran-7, from-6)
nmod(actors-5, Iran-7)
nsubj(played-9, who-8)
acl:relcl(number-3, played-9)
case(movies-12, in-10)
compound(movies-12, Jim Jarmusch-11)
nmod(played-9, movies-12)

PARSE TREE:(1048) ROOT ROOT
    (1049) find CMT
        (1050) number of FT
            (1052) actors NT
                (1054) Iran VTTEXT
            (1056) played NT
                (1058) movies NT
                    (1060) Jim Jarmusch VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9683119354285215; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(actor_0.name))]; preds: [movie_0.title = "Iran",movie_0.title = "Behind Jim Jarmusch"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9683119354285215; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(actor_0.name))]; preds: [director_0.nationality = "Iran",movie_0.title = "Behind Jim Jarmusch"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9683119354285215; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(actor_0.name))]; preds: [actor_0.nationality = "Iran",movie_0.title = "Behind Jim Jarmusch"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9683119354285215; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(actor_0.name))]; preds: [actor_0.name = "Iran",movie_0.title = "Behind Jim Jarmusch"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9683119354285215; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(actor_0.name))]; preds: [producer_0.nationality = "Iran",movie_0.title = "Behind Jim Jarmusch"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9683119354285215; NL+QF: 0.8979007600118484; rels: []; projs: [count(distinct(actor_0.name))]; preds: [writer_0.nationality = "Iran",movie_0.title = "Behind Jim Jarmusch"]; havings: []; superlative: []; blanks: 1
TOT: 0.8871591603836416; NL: 0.8689647470148877; NL+AG: 0.950917492972429; NL+QF: 0.8871591603836416; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Iran",director_0.name = "Jim Jarmusch"]; havings: []; superlative: []; blanks: 2
TOT: 0.884650256050894; NL: 0.8689647470148877; NL+AG: 0.950917492972429; NL+QF: 0.884650256050894; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Iran",actor_0.name = "Jim Jarmusch"]; havings: []; superlative: []; blanks: 2
TOT: 0.8795453275278585; NL: 0.8689647470148877; NL+AG: 0.950917492972429; NL+QF: 0.8795453275278585; rels: []; projs: [count(distinct(movie_0.title))]; preds: [movie_0.title = "Iran",director_0.name = "Jim Jarmusch"]; havings: []; superlative: []; blanks: 2
TOT: 0.8795453275278585; NL: 0.8689647470148877; NL+AG: 0.950917492972429; NL+QF: 0.8795453275278585; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.nationality = "Iran",director_0.name = "Jim Jarmusch"]; havings: []; superlative: []; blanks: 2
TOT: 0.8795453275278585; NL: 0.8689647470148877; NL+AG: 0.950917492972429; NL+QF: 0.8795453275278585; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.nationality = "Iran",director_0.name = "Jim Jarmusch"]; havings: []; superlative: []; blanks: 2
TOT: 0.8795453275278585; NL: 0.8689647470148877; NL+AG: 0.950917492972429; NL+QF: 0.8795453275278585; rels: []; projs: [count(distinct(movie_0.title))]; preds: [producer_0.nationality = "Iran",director_0.name = "Jim Jarmusch"]; havings: []; superlative: []; blanks: 2
TOT: 0.8795453275278585; NL: 0.8689647470148877; NL+AG: 0.950917492972429; NL+QF: 0.8795453275278585; rels: []; projs: [count(distinct(movie_0.title))]; preds: [writer_0.nationality = "Iran",director_0.name = "Jim Jarmusch"]; havings: []; superlative: []; blanks: 2

===========
RESULTS
===========
TOT: 0.7159263983042643; TR: 0.8979007600118484; QF: 0.24138673557278212; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.nationality = "Iran" and movie_0.title = "Behind Jim Jarmusch" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7041784954355764; TR: 0.8795453275278585; QF: 0.23679521445844473; select count(distinct(movie_0.title)) from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Jim Jarmusch" and director_0.nationality = "Iran" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6690244525285978; TR: 0.8979007600118484; QF: 0.14345458500936806; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.nationality = "Iran" and movie_0.title = "Behind Jim Jarmusch" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6662982822345924; TR: 0.8979007600118484; QF: 0.12641602067183463; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where movie_0.title = "Behind Jim Jarmusch" and writer_0.nationality = "Iran" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6662982822345924; TR: 0.8979007600118484; QF: 0.12641602067183463; select count(distinct(actor_0.name)) from actor as actor_0, actor as actor_1, cast as cast_0, cast as cast_1, movie as movie_0 where actor_1.name = "Iran" and movie_0.title = "Behind Jim Jarmusch" and actor_0.aid = cast_0.aid and actor_1.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_0.mid
TOT: 0.6662898611819608; TR: 0.8979007600118484; QF: 0.12636338909288727; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where movie_0.title = "Behind Jim Jarmusch" and producer_0.nationality = "Iran" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6625794927516737; TR: 0.8871591603836416; QF: 0.14345458500936806; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.name = "Iran" and director_0.name = "Jim Jarmusch" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.658563942611951; TR: 0.8979007600118484; QF: 0.0780763980303252; select count(distinct(actor_0.name)) from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0, movie as movie_1 where movie_0.title = "Iran" and movie_1.title = "Behind Jim Jarmusch" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_1.mid
TOT: 0.6583479798580198; TR: 0.884650256050894; QF: 0.12641602067183463; select count(distinct(movie_0.title)) from actor as actor_0, actor as actor_1, cast as cast_0, cast as cast_1, movie as movie_0 where actor_0.name = "Iran" and actor_1.name = "Jim Jarmusch" and actor_0.aid = cast_0.aid and actor_1.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_0.mid
TOT: 0.6580111930382039; TR: 0.8795453275278585; QF: 0.14345458500936806; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.nationality = "Iran" and director_0.name = "Jim Jarmusch" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid


04:25  INFO: ================
04:25  INFO: QUERY 37: Find all movies produced by "Walt Disney" after 2010
04:25  INFO: ================
1062. ROOT: ROOT; NA; ; (0) 
1063. Find: CMT; NA; ; (0) 
1064. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
1066. produced: NT; NA; ; (0) made_by(0.74):| directed_by(0.69):| producer.name(0.68):| producer(0.68):| cast.role(0.63):| cast(0.63):| written_by(0.63):| 
1067. Walt Disney: VTTEXT; NA; ; (0) director.name(1.0):Walt Disney; Walt Disney; Walter Elias Disney; | actor.name(1.0):Walt Disney; Walt Disney; Walter Disney; | producer.name(1.0):Walt Disney; Walt Disney; Walter Disney; | company.name(1.0):Walt Disney; Walt Disney; Walt Disney; | writer.name(1.0):Walt Disney; Walt Disney; The Dutch Walt Disne; | cast.role(0.85):Adult Walt Disney; Adult Walt Disney; Adult Walt Disney; | movie.title(0.81):Walt Disney Is Dead; Walt Disney Is Dead; Praça Walt Disney; | 
1069. 2010: VTNUM; NA; ; (0) movie.release_year(1.0):2012; 2014; 2015; | tv_series.release_year(1.0):2014; 2014; 2013; | actor.birth_year(1.0):2011; 2013; 2013; | 
1070. after: OT; >; ; (0) 
Find, VB
all, DT
movies, NNS
produced, VBN
by, IN
Walt Disney, NNP
after, IN
2010, CD
root(ROOT-0, Find-1)
det(movies-3, all-2)
dobj(Find-1, movies-3)
acl(movies-3, produced-4)
case(Walt Disney-6, by-5)
nmod(produced-4, Walt Disney-6)
case(2010-8, after-7)
nmod(produced-4, 2010-8)

PARSE TREE:(1062) ROOT ROOT
    (1063) Find CMT
        (1064) movies NT
            (1066) produced NT
                (1067) Walt Disney VTTEXT
                (1069) 2010 VTNUM
                    (1070) after OT


===========
TRANSLATIONS
===========
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Walt Disney",movie_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Walt Disney",tv_series_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Walt Disney",actor_0.birth_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Walt Disney",movie_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Walt Disney",tv_series_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Walt Disney",actor_0.birth_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Walt Disney",movie_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Walt Disney",tv_series_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Walt Disney",actor_0.birth_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [company_0.name = "Walt Disney",movie_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [company_0.name = "Walt Disney",tv_series_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [company_0.name = "Walt Disney",actor_0.birth_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Walt Disney",movie_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Walt Disney",tv_series_0.release_year > 2010]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9687724970127387; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Walt Disney",actor_0.birth_year > 2010]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.7159263983042643; TR: 0.8979007600118484; QF: 0.24138673557278212; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Walt Disney" and movie_0.release_year > 2010 and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7159263983042643; TR: 0.8979007600118484; QF: 0.24138673557278212; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.birth_year > 2010 and actor_0.name = "Walt Disney" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.7151917549259703; TR: 0.8979007600118484; QF: 0.23679521445844473; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Walt Disney" and movie_0.release_year > 2010 and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.7079218045632364; TR: 0.8979007600118484; QF: 0.19135802469135801; select movie_0.title from company as company_0, copyright as copyright_0, movie as movie_0 where company_0.name = "Walt Disney" and movie_0.release_year > 2010 and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid
TOT: 0.7061045206126191; TR: 0.8979007600118484; QF: 0.18000000000000002; select movie_0.title from movie as movie_0, writer as writer_0, written_by as written_by_0 where movie_0.release_year > 2010 and writer_0.name = "Walt Disney" and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.7060764504371806; TR: 0.8979007600118484; QF: 0.17982456140350878; select movie_0.title from made_by as made_by_0, movie as movie_0, producer as producer_0 where movie_0.release_year > 2010 and producer_0.name = "Walt Disney" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6690244525285978; TR: 0.8979007600118484; QF: 0.14345458500936806; select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.birth_year > 2010 and director_0.name = "Walt Disney" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6668434674197776; TR: 0.8979007600118484; QF: 0.12982342807924202; select movie_0.title from actor as actor_0, cast as cast_0, company as company_0, copyright as copyright_0, movie as movie_0 where actor_0.birth_year > 2010 and company_0.name = "Walt Disney" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid
TOT: 0.6662982822345924; TR: 0.8979007600118484; QF: 0.12641602067183463; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where actor_0.birth_year > 2010 and writer_0.name = "Walt Disney" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6662898611819608; TR: 0.8979007600118484; QF: 0.12636338909288727; select movie_0.title from actor as actor_0, cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where actor_0.birth_year > 2010 and producer_0.name = "Walt Disney" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid


04:26  INFO: ================
04:26  INFO: QUERY 81: Which movie had the character "Daffy Duck"
04:26  INFO: ================
1072. ROOT: ROOT; NA; ; (0) 
1074. movie: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movie; Movies; Movie Movie; | keyword.keyword(0.83):movie-in-movie; b-movie; z-movie; | actor.name(0.76):| actor(0.76):| 
1075. Which: CMT; NA; ; (0) 
1076. Daffy Duck: VTTEXT; NA; ; (0) cast.role(1.0):Daffy Duck; Daffy Duck; Daffy Duck; | movie.title(0.8):Daffy Duck Hunt; Daffy Duck Hunt; The Daffy Duckaroo; | director.name(0.78):Deafy Duck; Duck; Tim Duck; | producer.name(0.78):Deafy Duck; Duck; Duck; | writer.name(0.78):Deafy Duck; Duck; Tuck the Duck; | tv_series.title(0.75):The Daffy Duck Show; The Daffy Duck Show; Mighty Ducks; | actor.name(0.59):Joey Duck; Baby Duck; Daffy O'Brick; | 
1078. character: VTTEXT; NA; ; (0) movie.title(0.95):Character; Character; Character; | tv_series.title(0.95):Character; Character; The Characters; | cast.role(0.95):Character; Character; Character; | company.name(0.85):Character 7; Character Matters; Character Tank; | keyword.keyword(0.81):character-arc; literary-character; character-actor; | actor.name(0.78):| actor(0.78):| 
Which, WDT
movie, NN
had, VBD
the, DT
character, NN
Daffy Duck, NN
det(movie-2, Which-1)
nsubj(had-3, movie-2)
root(ROOT-0, had-3)
det(Daffy Duck-6, the-4)
compound(Daffy Duck-6, character-5)
dobj(had-3, Daffy Duck-6)

PARSE TREE:(1072) ROOT ROOT
    (1075) Which CMT
        (1074) movie NT
            (1076) Daffy Duck VTTEXT
                (1078) character VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8790472375566201; NL: 0.84126862115985; NL+AG: 0.9394249139348947; NL+QF: 0.8790472375566201; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Daffy Duck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [cast_0.role = "Daffy Duck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8405472538994161; NL: 0.6677153471084913; NL+AG: 0.9394249139348947; NL+QF: 0.8405472538994161; rels: [actor]; projs: [actor_0.name]; preds: [cast_0.role = "Daffy Duck"]; havings: []; superlative: []; blanks: 0
TOT: 0.8285026065603092; NL: 0.7802453753539424; NL+AG: 0.9788767379097759; NL+QF: 0.8285026065603092; rels: []; projs: [movie_0.title]; preds: [cast_0.role = "Daffy Duck",movie_0.title = "Character"]; havings: []; superlative: []; blanks: 0
TOT: 0.8272216780551298; NL: 0.6573229797118848; NL+AG: 0.9393940905990484; NL+QF: 0.8272216780551298; rels: [movie]; projs: [movie_0.title]; preds: [movie_0.title = "Daffy Duck Hunt"]; havings: []; superlative: []; blanks: 0
TOT: 0.8268266250158401; NL: 0.7912922821972069; NL+AG: 0.9394249139348947; NL+QF: 0.8268266250158401; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Daffy Duck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8243301190555186; NL: 0.7815446045368232; NL+AG: 0.9160068407073386; NL+QF: 0.8243301190555186; rels: []; projs: [actor_0.name]; preds: [movie_0.title = "Daffy Duck Hunt"]; havings: []; superlative: []; blanks: 1
TOT: 0.8205588163723728; NL: 0.6978163242785356; NL+AG: 0.9628121638266046; NL+QF: 0.8205588163723728; rels: [cast]; projs: [movie_0.title]; preds: [cast_0.role = "Daffy Duck"]; havings: []; superlative: []; blanks: 0
TOT: 0.8185649530142607; NL: 0.7075542375813906; NL+AG: 0.9628121638266046; NL+QF: 0.8185649530142607; rels: [movie]; projs: [movie_0.title]; preds: [cast_0.role = "Daffy Duck"]; havings: []; superlative: []; blanks: 0
TOT: 0.8173683888832901; NL: 0.7722196592760566; NL+AG: 0.9186092792989894; NL+QF: 0.8173683888832901; rels: [movie]; projs: [movie_0.title]; preds: []; havings: []; superlative: []; blanks: 1
TOT: 0.8167529712876178; NL: 0.7287397777448834; NL+AG: 0.8816630030424233; NL+QF: 0.8167529712876178; rels: [actor]; projs: [actor_0.name]; preds: []; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.890421033329974; TR: 0.8173683888832901; QF: 1.0; select movie_0.title from movie as movie_0
TOT: 0.8900517827725707; TR: 0.8167529712876178; QF: 1.0; select actor_0.name from actor as actor_0
TOT: 0.7641107142047899; TR: 0.8790472375566201; QF: 0.4186046511627907; select actor_0.name from actor as actor_0, cast as cast_0 where cast_0.role = "Daffy Duck" and actor_0.aid = cast_0.aid
TOT: 0.738337979578202; TR: 0.8662391053409028; QF: 0.3055555555555556; select movie_0.title from cast as cast_0, movie as movie_0 where cast_0.role = "Daffy Duck" and cast_0.msid = movie_0.mid
TOT: 0.6717840137304665; TR: 0.8243301190555186; QF: 0.24138673557278212; select actor_0.name from actor as actor_0, cast as cast_0, movie as movie_0 where movie_0.title = "Daffy Duck Hunt" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6261521793651024; TR: 0.8662391053409028; QF: 0.052682040307709614; select movie_0.title from cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where cast_0.role = "Daffy Duck" and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid
TOT: 0.6243730231007227; TR: 0.8662391053409028; QF: 0.041562313655336906; select movie_0.title from cast as cast_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where cast_0.role = "Daffy Duck" and cast_0.msid = tv_series_0.sid and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid
TOT: 0.624342633737; TR: 0.8662391053409028; QF: 0.04137238013207006; select movie_0.title from cast as cast_0, company as company_0, copyright as copyright_0, copyright as copyright_1, movie as movie_0, tv_series as tv_series_0 where cast_0.role = "Daffy Duck" and cast_0.msid = tv_series_0.sid and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid
TOT: 0.6242451509728506; TR: 0.8662391053409028; QF: 0.04076311285613611; select movie_0.title from cast as cast_0, classification as classification_0, classification as classification_1, genre as genre_0, movie as movie_0, tv_series as tv_series_0 where cast_0.role = "Daffy Duck" and cast_0.msid = tv_series_0.sid and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = tv_series_0.sid
TOT: 0.6239791769468765; TR: 0.8662391053409028; QF: 0.03910077519379845; select movie_0.title from cast as cast_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where cast_0.role = "Daffy Duck" and cast_0.msid = tv_series_0.sid and movie_0.mid = written_by_0.msid and tv_series_0.sid = written_by_1.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid


04:28  INFO: ================
04:28  INFO: QUERY 118: Find all movies featuring both "Matt Damon" and "Ben Affleck"
04:28  INFO: ================
1080. ROOT: ROOT; NA; ; (0) 
1081. Find: CMT; NA; ; (0) 
1082. featuring: NT; NA; ; (0) tv_series.title(0.69):| tv_series(0.69):| movie.release_year(0.64):| tv_series.release_year(0.64):| made_by(0.64):| movie.title_aka(0.62):| tv_series.title_aka(0.62):| 
1083. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
1085. Matt Damon: VTTEXT; NA; ; (0) director.name(1.0):Matt Damon; Matt Diamond; Matt Diamond; | actor.name(1.0):Matt Damon; Matt Damon; Matt Diamond; | producer.name(1.0):Matt Damon; Matt Damon; Matt Diamond; | writer.name(1.0):Matt Damon; Matt Damon; Matt Diamond; | movie.title(0.76):I'm Not Matt Damon; I'm Not Matt Damon; Meeting Matt Damon; | cast.role(0.74):Matt Stamon; Matt Damien; Matt Demond; | tv_series.title(0.67):Damon; The Damon Elliott Sh; Matt Houston; | 
1088. Ben Affleck: VTTEXT; NA; ; (0) director.name(1.0):Ben Affleck; Ben Affleck; Affleck; | actor.name(1.0):Ben Affleck; Ben Affleck; Affleck; | producer.name(1.0):Ben Affleck; Ben Affleck; Affleck; | writer.name(1.0):Ben Affleck; Ben Affleck; Affleck; | cast.role(0.9):Ben Afflect; Ben Afflect; Ben Affleck Fan; | movie.title(0.59):Untitled Ben Affleck; Untitled Ben Affleck; Argo: Ben Affleck's ; | company.name(0.56):The Affleck/Middleto; Ben Fechler; Ben Fechler; | 
Find, VB
all, DT
movies, NNS
featuring, VBG
both, CC
Matt Damon, NNP
and, CC
Ben Affleck, NNP
root(ROOT-0, Find-1)
det(movies-3, all-2)
nsubj(featuring-4, movies-3)
dep(Find-1, featuring-4)
cc:preconj(Matt Damon-6, both-5)
dobj(featuring-4, Matt Damon-6)
cc(Matt Damon-6, and-7)
conj(Matt Damon-6, Ben Affleck-8)

PARSE TREE:(1080) ROOT ROOT
    (1081) Find CMT
        (1083) movies NT
            (1082) featuring NT
                (1085) Matt Damon VTTEXT
                (1088) Ben Affleck VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Matt Damon",director_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Matt Damon",actor_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Matt Damon",producer_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Matt Damon",writer_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Matt Damon",director_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Matt Damon",actor_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Matt Damon",producer_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Matt Damon",writer_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Matt Damon",director_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Matt Damon",actor_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Matt Damon",producer_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Matt Damon",writer_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Matt Damon",director_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Matt Damon",actor_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Matt Damon",producer_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1
TOT: 0.8979007600118484; NL: 0.8979007600118484; NL+AG: 0.9685548245020893; NL+QF: 0.8979007600118484; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Matt Damon",writer_0.name = "Ben Affleck"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.6690244525285978; TR: 0.8979007600118484; QF: 0.14345458500936806; select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.name = "Ben Affleck" and director_0.name = "Matt Damon" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6690244525285978; TR: 0.8979007600118484; QF: 0.14345458500936806; select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.name = "Matt Damon" and director_0.name = "Ben Affleck" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6662982822345924; TR: 0.8979007600118484; QF: 0.12641602067183463; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where actor_0.name = "Matt Damon" and writer_0.name = "Ben Affleck" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6662982822345924; TR: 0.8979007600118484; QF: 0.12641602067183463; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where actor_0.name = "Ben Affleck" and writer_0.name = "Matt Damon" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6662982822345924; TR: 0.8979007600118484; QF: 0.12641602067183463; select movie_0.title from actor as actor_0, actor as actor_1, cast as cast_0, cast as cast_1, movie as movie_0 where actor_0.name = "Matt Damon" and actor_1.name = "Ben Affleck" and actor_0.aid = cast_0.aid and actor_1.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = movie_0.mid
TOT: 0.6662898611819608; TR: 0.8979007600118484; QF: 0.12636338909288727; select movie_0.title from actor as actor_0, cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where actor_0.name = "Matt Damon" and producer_0.name = "Ben Affleck" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6662898611819608; TR: 0.8979007600118484; QF: 0.12636338909288727; select movie_0.title from actor as actor_0, cast as cast_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where actor_0.name = "Ben Affleck" and producer_0.name = "Matt Damon" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6660778892211042; TR: 0.8979007600118484; QF: 0.1250385643375334; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where director_0.name = "Matt Damon" and writer_0.name = "Ben Affleck" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6660778892211042; TR: 0.8979007600118484; QF: 0.1250385643375334; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where director_0.name = "Ben Affleck" and writer_0.name = "Matt Damon" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6660694681684727; TR: 0.8979007600118484; QF: 0.12498593275858605; select movie_0.title from directed_by as directed_by_0, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where director_0.name = "Matt Damon" and producer_0.name = "Ben Affleck" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid


04:30  INFO: ================
04:30  INFO: QUERY 73: Find the actors who played in the movie "Camp X-Ray"
04:30  INFO: ================
04:32  INFO: ================
04:32  INFO: QUERY 54: Find all movies produced by Netflix
04:32  INFO: ================
1101. ROOT: ROOT; NA; ; (0) 
1102. Find: CMT; NA; ; (0) 
1103. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
1105. produced: NT; NA; ; (0) made_by(0.74):| directed_by(0.69):| producer.name(0.68):| producer(0.68):| cast.role(0.63):| cast(0.63):| written_by(0.63):| 
1106. Netflix: VTTEXT; NA; ; (0) company.name(1.0):Netflix; Netflix; Netflix; | keyword.keyword(1.0):netflix; netflix-series; netflix-production; | tv_series.title(0.78):| tv_series(0.78):| cast.role(0.77):Netflix guy; | movie.title(0.74):| movie(0.74):| 
Find, VB
all, DT
movies, NNS
produced, VBN
by, IN
Netflix, NNP
root(ROOT-0, Find-1)
det(movies-3, all-2)
dobj(Find-1, movies-3)
acl(movies-3, produced-4)
case(Netflix-6, by-5)
nmod(produced-4, Netflix-6)

PARSE TREE:(1101) ROOT ROOT
    (1102) Find CMT
        (1103) movies NT
            (1105) produced NT
                (1106) Netflix VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.9097088792229623; NL: 0.9055419360254962; NL+AG: 0.9628121638266046; NL+QF: 0.9097088792229623; rels: [made_by]; projs: [movie_0.title]; preds: [company_0.name = "Netflix"]; havings: []; superlative: []; blanks: 0
TOT: 0.9097088792229623; NL: 0.9055419360254962; NL+AG: 0.9628121638266046; NL+QF: 0.9097088792229623; rels: [made_by]; projs: [movie_0.title]; preds: [keyword_0.keyword = "netflix"]; havings: []; superlative: []; blanks: 0
TOT: 0.9077995444082381; NL: 0.8852322584043497; NL+AG: 0.9628121638266046; NL+QF: 0.9077995444082381; rels: [directed_by]; projs: [movie_0.title]; preds: [company_0.name = "Netflix"]; havings: []; superlative: []; blanks: 0
TOT: 0.9032287827813593; NL: 0.8852322584043497; NL+AG: 0.9628121638266046; NL+QF: 0.9032287827813593; rels: [directed_by]; projs: [movie_0.title]; preds: [keyword_0.keyword = "netflix"]; havings: []; superlative: []; blanks: 0
TOT: 0.884627969098385; NL: 0.8002271178074418; NL+AG: 0.9186092792989894; NL+QF: 0.884627969098385; rels: [movie,directed_by]; projs: [movie_0.title]; preds: []; havings: []; superlative: []; blanks: 0
TOT: 0.8839082369618275; NL: 0.8783733725393061; NL+AG: 0.9628121638266046; NL+QF: 0.8839082369618275; rels: [producer]; projs: [movie_0.title]; preds: [company_0.name = "Netflix"]; havings: []; superlative: []; blanks: 0
TOT: 0.8839082369618275; NL: 0.8783733725393061; NL+AG: 0.9628121638266046; NL+QF: 0.8839082369618275; rels: [producer]; projs: [movie_0.title]; preds: [keyword_0.keyword = "netflix"]; havings: []; superlative: []; blanks: 0
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [company_0.name = "Netflix"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [keyword_0.keyword = "netflix"]; havings: []; superlative: []; blanks: 1
TOT: 0.8546611142088849; NL: 0.8352193753498772; NL+AG: 0.9186092792989894; NL+QF: 0.8546611142088849; rels: [made_by,tv_series]; projs: [movie_0.title]; preds: []; havings: []; superlative: []; blanks: 0
TOT: 0.8511062822142672; NL: 0.8185865422772004; NL+AG: 0.9186092792989894; NL+QF: 0.8511062822142672; rels: [made_by,movie]; projs: [movie_0.title]; preds: []; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.6890767585792826; TR: 0.8662391053409028; QF: 0.1923076923076923; select movie_0.title from keyword as keyword_0, movie as movie_0, tags as tags_0 where keyword_0.keyword = "netflix" and keyword_0.id = tags_0.kid and movie_0.mid = tags_0.msid
TOT: 0.6889248117606691; TR: 0.8662391053409028; QF: 0.19135802469135801; select movie_0.title from company as company_0, copyright as copyright_0, movie as movie_0 where company_0.name = "Netflix" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid
TOT: 0.6462770607962516; TR: 0.9097088792229623; QF: 0.06087662337662337; select movie_0.title from company as company_0, copyright as copyright_0, made_by as made_by_0, made_by as made_by_1, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where company_0.name = "Netflix" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid and made_by_1.msid = movie_0.mid and made_by_1.pid = producer_0.pid
TOT: 0.6447530662733156; TR: 0.9077995444082381; QF: 0.05851166316348966; select movie_0.title from company as company_0, copyright as copyright_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where company_0.name = "Netflix" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid and directed_by_1.did = director_0.did and directed_by_1.msid = movie_0.mid
TOT: 0.6444566005547387; TR: 0.9097088792229623; QF: 0.049498746867167924; select movie_0.title from keyword as keyword_0, made_by as made_by_0, made_by as made_by_1, movie as movie_0, producer as producer_0, tags as tags_0, tv_series as tv_series_0 where keyword_0.keyword = "netflix" and keyword_0.id = tags_0.kid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid and made_by_1.msid = tv_series_0.sid and made_by_1.pid = producer_0.pid and tags_0.msid = tv_series_0.sid
TOT: 0.6421246972992867; TR: 0.9032287827813593; QF: 0.059224713176603216; select movie_0.title from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tv_series as tv_series_0 where keyword_0.keyword = "netflix" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and keyword_0.id = tags_0.kid and tags_0.msid = tv_series_0.sid
TOT: 0.6202131384814477; TR: 0.8662391053409028; QF: 0.06098876096682153; select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, keyword as keyword_0, movie as movie_0, tags as tags_0, tv_series as tv_series_0 where keyword_0.keyword = "netflix" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and keyword_0.id = tags_0.kid and tags_0.msid = tv_series_0.sid
TOT: 0.6199728037946013; TR: 0.8662391053409028; QF: 0.05948666917403205; select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, company as company_0, copyright as copyright_0, movie as movie_0, tv_series as tv_series_0 where company_0.name = "Netflix" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = tv_series_0.sid and cast_1.msid = movie_0.mid and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid
TOT: 0.6195025557743753; TR: 0.8662391053409028; QF: 0.05654761904761905; select movie_0.title from company as company_0, copyright as copyright_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where company_0.name = "Netflix" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and movie_0.mid = written_by_1.msid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid
TOT: 0.6195025557743753; TR: 0.8662391053409028; QF: 0.05654761904761905; select movie_0.title from company as company_0, copyright as copyright_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where company_0.name = "Netflix" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_1.msid and tags_0.msid = tv_series_0.sid


04:34  INFO: ================
04:34  INFO: QUERY 60: Find all actors from Austin born after 1980
04:34  INFO: ================
04:37  INFO: ================
04:37  INFO: QUERY 71: Who is the writer of "The Truman Show"
04:37  INFO: ================
1119. ROOT: ROOT; NA; ; (0) 
1120. Who: CMT; NA; ; (0) 
1122. writer: NT; NA; ; (0) writer.name(1.0):| writer(1.0):| movie.title(0.95):Writer; Writer; Writer; | tv_series.title(0.95):Writers; Writers 2 Writers; Writers on Writing; | cast.role(0.95):Writers; A Writer; Writer 5; | producer.name(0.95):writer; co-writer; Jon Writer; | keyword.keyword(0.8):bitter-writer; tv-writer; writer-hero; | 
1124. The Truman Show: VTTEXT; NA; ; (0) movie.title(1.0):The Truman Show; The Truman Show; The Dan Show; | tv_series.title(0.8):The Truman and Otis ; The Truman and Otis ; The Dan Show; | cast.role(0.79):Man at the Show; Townie at the Truman; Townie at the Truman; | actor.name(0.71):The Show; Dan Truman; Dan Truman; | producer.name(0.71):The Show; The Show; Dan Truman; | writer.name(0.71):The Show; Dan Truman; Dan Truman; | company.name(0.65):The Animation Show; Animation Show of Sh; Animation Show of Sh; | 
Who, WP
is, VBZ
the, DT
writer, NN
of, IN
The Truman Show, NNP
root(ROOT-0, Who-1)
cop(Who-1, is-2)
det(writer-4, the-3)
nsubj(Who-1, writer-4)
case(The Truman Show-6, of-5)
nmod(writer-4, The Truman Show-6)

PARSE TREE:(1119) ROOT ROOT
    (1120) Who CMT
        (1122) writer NT
            (1124) The Truman Show VTTEXT


===========
TRANSLATIONS
===========
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: []; projs: [writer_0.name]; preds: [movie_0.title = "The Truman Show"]; havings: []; superlative: []; blanks: 0
TOT: 0.8954237688029468; NL: 0.8954237688029468; NL+AG: 0.9890418595931076; NL+QF: 0.8954237688029468; rels: []; projs: [writer_0.name]; preds: [tv_series_0.title = "The Truman and Otis Show"]; havings: []; superlative: []; blanks: 0
TOT: 0.8864052604279183; NL: 0.8864052604279183; NL+AG: 0.9889432485322897; NL+QF: 0.8864052604279183; rels: []; projs: [writer_0.name]; preds: [cast_0.role = "Man at the Show"]; havings: []; superlative: []; blanks: 0
TOT: 0.845931439302264; NL: 0.845931439302264; NL+AG: 0.9889432485322897; NL+QF: 0.845931439302264; rels: []; projs: [producer_0.name]; preds: [movie_0.title = "The Truman Show"]; havings: []; superlative: []; blanks: 0
TOT: 0.8408964152537146; NL: 0.8408964152537146; NL+AG: 0.9889432485322897; NL+QF: 0.8408964152537146; rels: []; projs: [writer_0.name]; preds: [actor_0.name = "The Show"]; havings: []; superlative: []; blanks: 0
TOT: 0.8408964152537146; NL: 0.8408964152537146; NL+AG: 0.9889432485322897; NL+QF: 0.8408964152537146; rels: []; projs: [writer_0.name]; preds: [producer_0.name = "The Show"]; havings: []; superlative: []; blanks: 0
TOT: 0.8408964152537146; NL: 0.8408964152537146; NL+AG: 0.9889432485322897; NL+QF: 0.8408964152537146; rels: []; projs: [writer_0.name]; preds: [writer_0.name = "The Show"]; havings: []; superlative: []; blanks: 0
TOT: 0.806225774829855; NL: 0.806225774829855; NL+AG: 0.9584354392113631; NL+QF: 0.806225774829855; rels: []; projs: [writer_0.name]; preds: []; havings: []; superlative: []; blanks: 1
TOT: 0.767018322189458; NL: 0.767018322189458; NL+AG: 0.9531015201170175; NL+QF: 0.767018322189458; rels: []; projs: [movie_0.mid]; preds: [movie_0.title = "Writer",movie_0.title = "The Truman Show"]; havings: []; superlative: []; blanks: 0
TOT: 0.767018322189458; NL: 0.767018322189458; NL+AG: 0.9531015201170175; NL+QF: 0.767018322189458; rels: []; projs: [tv_series_0.sid]; preds: [tv_series_0.title = "Writers",movie_0.title = "The Truman Show"]; havings: []; superlative: []; blanks: 0
TOT: 0.767018322189458; NL: 0.767018322189458; NL+AG: 0.9531015201170175; NL+QF: 0.767018322189458; rels: []; projs: [producer_0.pid]; preds: [producer_0.name = "writer",movie_0.title = "The Truman Show"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.883735464897913; TR: 0.806225774829855; QF: 1.0; select writer_0.name from writer as writer_0
TOT: 0.7673640646055102; TR: 1.0; QF: 0.18000000000000002; select writer_0.name from movie as movie_0, writer as writer_0, written_by as written_by_0 where movie_0.title = "The Truman Show" and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.7024849925539449; TR: 0.8954237688029468; QF: 0.16666666666666666; select writer_0.name from tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where tv_series_0.title = "The Truman and Otis Show" and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.700469675276906; TR: 1.0; QF: 0.06098876096682153; select writer_0.name from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where movie_0.title = "The Truman Show" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.700187427630471; TR: 1.0; QF: 0.059224713176603216; select writer_0.name from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where movie_0.title = "The Truman Show" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6989166017273427; TR: 1.0; QF: 0.05128205128205128; select writer_0.name from keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where movie_0.title = "The Truman Show" and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6988948950389694; TR: 1.0; QF: 0.05114638447971781; select writer_0.name from company as company_0, copyright as copyright_0, copyright as copyright_1, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where movie_0.title = "The Truman Show" and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6988252644931483; TR: 1.0; QF: 0.05071119356833643; select writer_0.name from classification as classification_0, classification as classification_1, genre as genre_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where movie_0.title = "The Truman Show" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = tv_series_0.sid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6986312730209614; TR: 1.0; QF: 0.049498746867167924; select writer_0.name from made_by as made_by_0, made_by as made_by_1, movie as movie_0, producer as producer_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where movie_0.title = "The Truman Show" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid and made_by_1.msid = tv_series_0.sid and made_by_1.pid = producer_0.pid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.67489485801143; TR: 0.845931439302264; QF: 0.17982456140350878; select producer_0.name from made_by as made_by_0, movie as movie_0, producer as producer_0 where movie_0.title = "The Truman Show" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid


04:38  INFO: ================
04:38  INFO: QUERY 56: Who is the director of the series "House of Cards" produced by Netflix?
04:38  INFO: ================
04:48  INFO: ================
04:48  INFO: QUERY 41: Find all movies directed by "Woody Allen" and featuring "Scarlett Johansson"
04:48  INFO: ================
04:52  INFO: ================
04:52  INFO: QUERY 18: Find all movies directed by "Steven Spielberg" after 2006
04:52  INFO: ================
04:54  INFO: ================
04:54  INFO: QUERY 5: Find all actors who are from Canada
04:54  INFO: ================
04:55  INFO: ================
04:55  INFO: QUERY 67: What year was the movie "The Imitation Game" produced
04:55  INFO: ================
1170. ROOT: ROOT; NA; ; (0) 
1171. produced: NT; NA; ; (0) made_by(0.74):| directed_by(0.69):| producer.name(0.68):| producer(0.68):| cast.role(0.63):| cast(0.63):| written_by(0.63):| 
1172. year: NT; NA; ; (0) movie.release_year(1.0):| director.birth_year(1.0):| tv_series.release_year(1.0):| actor.birth_year(1.0):| producer.birth_year(1.0):| writer.birth_year(1.0):| movie.title(0.95):Year; Years; Years; | 
1175. The Imitation Game: VTTEXT; NA; ; (0) movie.title(1.0):The Imitation Game; The Imitation Game; The Imitation Game; | cast.role(0.84):The Imitation Game &; The Imitation Game &; The Imitation Game &; | tv_series.title(0.74):The Temptation Game; The Game; The Game; | keyword.keyword(0.69):imitation; imitation; camel-imitation; | company.name(0.67):Game Station, the; Game Station; Imagination Games; | actor.name(0.64):The Game; The Game; Simon Game; | producer.name(0.64):The Game; The Game; Simon Game; | 
1177. movie: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movie; Movies; Movie Movie; | keyword.keyword(0.83):movie-in-movie; b-movie; z-movie; | actor.name(0.76):| actor(0.76):| 
What, WDT
year, NN
was, VBD
the, DT
movie, NN
The Imitation Game, NNP
produced, VBN
det(year-2, What-1)
nmod:tmod(produced-7, year-2)
auxpass(produced-7, was-3)
det(The Imitation Game-6, the-4)
compound(The Imitation Game-6, movie-5)
nsubjpass(produced-7, The Imitation Game-6)
root(ROOT-0, produced-7)

PARSE TREE:(1170) ROOT ROOT
    (1171) produced NT
        (1172) year NT
        (1175) The Imitation Game VTTEXT
            (1177) movie NT


===========
TRANSLATIONS
===========
TOT: 0.735618578791678; NL: 0.7026093091136248; NL+AG: 0.9272593056085746; NL+QF: 0.735618578791678; rels: [directed_by]; projs: [movie_0.release_year]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.7296922955689433; NL: 0.6453241615249634; NL+AG: 0.9046752173932157; NL+QF: 0.7296922955689433; rels: [movie,directed_by]; projs: [movie_0.release_year]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.7280696423218294; NL: 0.6890706686060093; NL+AG: 0.9096172160436841; NL+QF: 0.7280696423218294; rels: [directed_by]; projs: [movie_0.title]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 1
TOT: 0.7274949639993702; NL: 0.7187291109240963; NL+AG: 0.9272593056085746; NL+QF: 0.7274949639993702; rels: [made_by]; projs: [movie_0.release_year]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.7227329367682401; NL: 0.6890706686060093; NL+AG: 0.9027971890969206; NL+QF: 0.7227329367682401; rels: [movie,directed_by]; projs: [movie_0.release_year]; preds: []; havings: []; superlative: []; blanks: 1
TOT: 0.7187291109240963; NL: 0.7187291109240963; NL+AG: 0.9272593056085746; NL+QF: 0.7187291109240963; rels: [made_by]; projs: [director_0.birth_year]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.7187291109240963; NL: 0.7187291109240963; NL+AG: 0.9272593056085746; NL+QF: 0.7187291109240963; rels: [made_by]; projs: [tv_series_0.release_year]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.7187291109240963; NL: 0.7187291109240963; NL+AG: 0.9272593056085746; NL+QF: 0.7187291109240963; rels: [made_by]; projs: [actor_0.birth_year]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.7187291109240963; NL: 0.7187291109240963; NL+AG: 0.9272593056085746; NL+QF: 0.7187291109240963; rels: [made_by]; projs: [producer_0.birth_year]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.7187291109240963; NL: 0.7187291109240963; NL+AG: 0.9272593056085746; NL+QF: 0.7187291109240963; rels: [made_by]; projs: [writer_0.birth_year]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.71505032408569; NL: 0.7026093091136248; NL+AG: 0.9272593056085746; NL+QF: 0.71505032408569; rels: [directed_by]; projs: [director_0.birth_year]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.71505032408569; NL: 0.7026093091136248; NL+AG: 0.9272593056085746; NL+QF: 0.71505032408569; rels: [directed_by]; projs: [tv_series_0.release_year]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.71505032408569; NL: 0.7026093091136248; NL+AG: 0.9272593056085746; NL+QF: 0.71505032408569; rels: [directed_by]; projs: [actor_0.birth_year]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.71505032408569; NL: 0.7026093091136248; NL+AG: 0.9272593056085746; NL+QF: 0.71505032408569; rels: [directed_by]; projs: [producer_0.birth_year]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0
TOT: 0.71505032408569; NL: 0.7026093091136248; NL+AG: 0.9272593056085746; NL+QF: 0.71505032408569; rels: [directed_by]; projs: [writer_0.birth_year]; preds: [movie_0.title = "The Imitation Game"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.6054814933702753; TR: 0.71505032408569; QF: 0.23679521445844473; select director_0.birth_year from directed_by as directed_by_0, director as director_0, movie as movie_0 where movie_0.title = "The Imitation Game" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.5985734609845293; TR: 0.7187291109240963; QF: 0.17982456140350878; select producer_0.birth_year from made_by as made_by_0, movie as movie_0, producer as producer_0 where movie_0.title = "The Imitation Game" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.5640725519404262; TR: 0.7280696423218294; QF: 0.12437189767086673; select movie_0.title from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, movie as movie_1 where movie_1.title = "The Imitation Game" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = movie_1.mid
TOT: 0.5482609609987426; TR: 0.71505032408569; QF: 0.07437189767086674; select tv_series_0.release_year from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where movie_0.title = "The Imitation Game" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid
TOT: 0.5472003084218161; TR: 0.7187291109240963; QF: 0.05394736842105263; select tv_series_0.release_year from made_by as made_by_0, made_by as made_by_1, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where movie_0.title = "The Imitation Game" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid and made_by_1.msid = tv_series_0.sid and made_by_1.pid = producer_0.pid
TOT: 0.5323997825240044; TR: 0.7187291109240963; QF: 0.06531776529582585; select producer_0.birth_year from actor as actor_0, cast as cast_0, cast as cast_1, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where movie_0.title = "The Imitation Game" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.5321175348775695; TR: 0.7187291109240963; QF: 0.06355371750560754; select producer_0.birth_year from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where movie_0.title = "The Imitation Game" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.5308467089744412; TR: 0.7187291109240963; QF: 0.055611055611055615; select producer_0.birth_year from keyword as keyword_0, made_by as made_by_0, movie as movie_0, producer as producer_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where movie_0.title = "The Imitation Game" and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid and movie_0.mid = tags_0.msid and tags_1.msid = tv_series_0.sid
TOT: 0.5308250022860679; TR: 0.7187291109240963; QF: 0.055475388808722145; select producer_0.birth_year from company as company_0, copyright as copyright_0, copyright as copyright_1, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where movie_0.title = "The Imitation Game" and company_0.id = copyright_0.cid and company_0.id = copyright_1.cid and copyright_0.msid = movie_0.mid and copyright_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.5307553717402468; TR: 0.7187291109240963; QF: 0.05504019789734075; select producer_0.birth_year from classification as classification_0, classification as classification_1, genre as genre_0, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where movie_0.title = "The Imitation Game" and classification_0.gid = genre_0.gid and classification_0.msid = movie_0.mid and classification_1.gid = genre_0.gid and classification_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid


04:57  INFO: ================
04:57  INFO: QUERY 106: How many movies did Netflix produce?
04:57  INFO: ================
1179. ROOT: ROOT; NA; ; (0) 
1180. produce: NT; NA; ; (0) made_by(0.74):| directed_by(0.69):| producer.name(0.68):| producer(0.68):| cast.role(0.63):| cast(0.63):| written_by(0.63):| 
1181. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
1183. How many: CMT; count; ; (0) 
1185. Netflix: VTTEXT; NA; ; (0) company.name(1.0):Netflix; Netflix; Netflix; | keyword.keyword(1.0):netflix; netflix-series; netflix-production; | tv_series.title(0.78):| tv_series(0.78):| cast.role(0.77):Netflix guy; | movie.title(0.74):| movie(0.74):| 
How, WRB
many, JJ
movies, NNS
did, VBD
Netflix, NNP
produce, VB
advmod(many-2, How-1)
amod(movies-3, many-2)
dobj(produce-6, movies-3)
aux(produce-6, did-4)
nsubj(produce-6, Netflix-5)
root(ROOT-0, produce-6)

PARSE TREE:(1179) ROOT ROOT
    (1183) How many CMT
        (1181) movies NT
            (1180) produce NT
                (1185) Netflix VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.9128882742930282; NL: 0.8852322584043497; NL+AG: 0.9623803610291506; NL+QF: 0.9128882742930282; rels: [directed_by]; projs: [count(distinct(movie_0.title))]; preds: [company_0.name = "Netflix"]; havings: []; superlative: []; blanks: 0
TOT: 0.9083687093645647; NL: 0.8852322584043497; NL+AG: 0.9623803610291506; NL+QF: 0.9083687093645647; rels: [directed_by]; projs: [count(distinct(movie_0.title))]; preds: [keyword_0.keyword = "netflix"]; havings: []; superlative: []; blanks: 0
TOT: 0.9055419360254962; NL: 0.9055419360254962; NL+AG: 0.9623803610291506; NL+QF: 0.9055419360254962; rels: [made_by]; projs: [count(distinct(movie_0.title))]; preds: [company_0.name = "Netflix"]; havings: []; superlative: []; blanks: 0
TOT: 0.9055419360254962; NL: 0.9055419360254962; NL+AG: 0.9623803610291506; NL+QF: 0.9055419360254962; rels: [made_by]; projs: [count(distinct(movie_0.title))]; preds: [keyword_0.keyword = "netflix"]; havings: []; superlative: []; blanks: 0
TOT: 0.8844292701362244; NL: 0.8002271178074418; NL+AG: 0.9177456737040814; NL+QF: 0.8844292701362244; rels: [movie,directed_by]; projs: [count(distinct(movie_0.title))]; preds: []; havings: []; superlative: []; blanks: 0
TOT: 0.8783733725393061; NL: 0.8783733725393061; NL+AG: 0.9623803610291506; NL+QF: 0.8783733725393061; rels: [producer]; projs: [count(distinct(movie_0.title))]; preds: [company_0.name = "Netflix"]; havings: []; superlative: []; blanks: 0
TOT: 0.8783733725393061; NL: 0.8783733725393061; NL+AG: 0.9623803610291506; NL+QF: 0.8783733725393061; rels: [producer]; projs: [count(distinct(movie_0.title))]; preds: [keyword_0.keyword = "netflix"]; havings: []; superlative: []; blanks: 0
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(movie_0.title))]; preds: [company_0.name = "Netflix"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(movie_0.title))]; preds: [keyword_0.keyword = "netflix"]; havings: []; superlative: []; blanks: 1
TOT: 0.8508648798308472; NL: 0.8352193753498772; NL+AG: 0.9177456737040814; NL+QF: 0.8508648798308472; rels: [made_by,tv_series]; projs: [count(distinct(movie_0.title))]; preds: []; havings: []; superlative: []; blanks: 0
TOT: 0.8423552348322902; NL: 0.8185865422772004; NL+AG: 0.9177456737040814; NL+QF: 0.8423552348322902; rels: [made_by,movie]; projs: [count(distinct(movie_0.title))]; preds: []; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.6890767585792826; TR: 0.8662391053409028; QF: 0.1923076923076923; select count(distinct(movie_0.title)) from keyword as keyword_0, movie as movie_0, tags as tags_0 where keyword_0.keyword = "netflix" and keyword_0.id = tags_0.kid and movie_0.mid = tags_0.msid
TOT: 0.6889248117606691; TR: 0.8662391053409028; QF: 0.19135802469135801; select count(distinct(movie_0.title)) from company as company_0, copyright as copyright_0, movie as movie_0 where company_0.name = "Netflix" and company_0.id = copyright_0.cid and copyright_0.msid = movie_0.mid
TOT: 0.6478063042041897; TR: 0.9128882742930282; QF: 0.05851166316348966; select count(distinct(movie_0.title)) from company as company_0, copyright as copyright_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where company_0.name = "Netflix" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid and directed_by_1.did = director_0.did and directed_by_1.msid = movie_0.mid
TOT: 0.6452086532492098; TR: 0.9083687093645647; QF: 0.059224713176603216; select count(distinct(movie_0.title)) from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tv_series as tv_series_0 where keyword_0.keyword = "netflix" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and keyword_0.id = tags_0.kid and tags_0.msid = tv_series_0.sid
TOT: 0.6437768948777719; TR: 0.9055419360254962; QF: 0.06087662337662337; select count(distinct(movie_0.title)) from company as company_0, copyright as copyright_0, made_by as made_by_0, made_by as made_by_1, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where company_0.name = "Netflix" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid and made_by_1.msid = movie_0.mid and made_by_1.pid = producer_0.pid
TOT: 0.6419564346362591; TR: 0.9055419360254962; QF: 0.049498746867167924; select count(distinct(movie_0.title)) from keyword as keyword_0, made_by as made_by_0, made_by as made_by_1, movie as movie_0, producer as producer_0, tags as tags_0, tv_series as tv_series_0 where keyword_0.keyword = "netflix" and keyword_0.id = tags_0.kid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid and made_by_1.msid = tv_series_0.sid and made_by_1.pid = producer_0.pid and tags_0.msid = tv_series_0.sid
TOT: 0.6202131384814477; TR: 0.8662391053409028; QF: 0.06098876096682153; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, cast as cast_1, keyword as keyword_0, movie as movie_0, tags as tags_0, tv_series as tv_series_0 where keyword_0.keyword = "netflix" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and keyword_0.id = tags_0.kid and tags_0.msid = tv_series_0.sid
TOT: 0.6199728037946013; TR: 0.8662391053409028; QF: 0.05948666917403205; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, cast as cast_1, company as company_0, copyright as copyright_0, movie as movie_0, tv_series as tv_series_0 where company_0.name = "Netflix" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = tv_series_0.sid and cast_1.msid = movie_0.mid and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid
TOT: 0.6195025557743753; TR: 0.8662391053409028; QF: 0.05654761904761905; select count(distinct(movie_0.title)) from company as company_0, copyright as copyright_0, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0, written_by as written_by_1 where company_0.name = "Netflix" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and movie_0.mid = written_by_1.msid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid and writer_0.wid = written_by_1.wid
TOT: 0.6195025557743753; TR: 0.8662391053409028; QF: 0.05654761904761905; select count(distinct(movie_0.title)) from company as company_0, copyright as copyright_0, keyword as keyword_0, movie as movie_0, tags as tags_0, tags as tags_1, tv_series as tv_series_0 where company_0.name = "Netflix" and company_0.id = copyright_0.cid and copyright_0.msid = tv_series_0.sid and keyword_0.id = tags_0.kid and keyword_0.id = tags_1.kid and movie_0.mid = tags_1.msid and tags_0.msid = tv_series_0.sid


04:57  INFO: ================
04:57  INFO: QUERY 97: What is the number of movies in which "Tom Cruise" acted?
04:57  INFO: ================
1187. ROOT: ROOT; NA; ; (0) 
1188. What: CMT; NA; ; (0) 
1190. number of: FT; count; ; (0) 
1192. movies: NT; NA; ; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
1194. acted: NT; NA; ; (0) movie.release_year(0.63):| tv_series.release_year(0.63):| actor.name(0.62):| actor(0.62):| genre.genre(0.62):| genre(0.62):| made_by(0.61):| 
1197. Tom Cruise: VTTEXT; NA; ; (0) director.name(1.0):Tom Cruise; Tom Cruise; Cruise; | actor.name(1.0):Tom Cruise; Tom Cruise; Tom Cruiso; | producer.name(1.0):Tom Cruise; Tom Cruise; Cruise; | writer.name(1.0):Tom Cruise; Tom Cruise; Cruise; | cast.role(0.95):'Tom Cruise'; 'Tom Cruise'; 'Tom Cruise'; | movie.title(0.88):Tom Cruise On: Tom C; Tom Cruise On: Tom C; Cruise; | tv_series.title(0.75):Cruise; The Cruise; Inside Cruise; | 
What, WP
is, VBZ
the, DT
number, NN
of, IN
movies, NNS
in, IN
which, WDT
Tom Cruise, NNP
acted, VBD
root(ROOT-0, What-1)
cop(What-1, is-2)
det(number-4, the-3)
nsubj(What-1, number-4)
case(movies-6, of-5)
nmod(number-4, movies-6)
case(which-8, in-7)
nmod(acted-10, which-8)
nsubj(acted-10, Tom Cruise-9)
acl:relcl(movies-6, acted-10)

PARSE TREE:(1187) ROOT ROOT
    (1188) What CMT
        (1190) number of FT
            (1192) movies NT
                (1194) acted NT
                    (1197) Tom Cruise VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(movie_0.title))]; preds: [director_0.name = "Tom Cruise"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(movie_0.title))]; preds: [actor_0.name = "Tom Cruise"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(movie_0.title))]; preds: [producer_0.name = "Tom Cruise"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9623803610291506; NL+QF: 0.8662391053409028; rels: []; projs: [count(distinct(movie_0.title))]; preds: [writer_0.name = "Tom Cruise"]; havings: []; superlative: []; blanks: 1
TOT: 0.8511606491570143; NL: 0.8511606491570143; NL+AG: 0.9550159970562051; NL+QF: 0.8511606491570143; rels: []; projs: [count(distinct(movie_0.title))]; preds: [cast_0.role = "'Tom Cruise'"]; havings: []; superlative: []; blanks: 1
TOT: 0.828587847371172; NL: 0.828587847371172; NL+AG: 0.9444691039097105; NL+QF: 0.828587847371172; rels: []; projs: [count(distinct(movie_0.title))]; preds: [movie_0.title = "Tom Cruise On: Tom Cruise, Jew"]; havings: []; superlative: []; blanks: 1
TOT: 0.7912922821972069; NL: 0.7912922821972069; NL+AG: 0.9334884919988383; NL+QF: 0.7912922821972069; rels: []; projs: [count(distinct(actor_0.name))]; preds: [director_0.name = "Tom Cruise"]; havings: []; superlative: []; blanks: 1
TOT: 0.7912922821972069; NL: 0.7912922821972069; NL+AG: 0.9334884919988383; NL+QF: 0.7912922821972069; rels: []; projs: [count(distinct(actor_0.name))]; preds: [actor_0.name = "Tom Cruise"]; havings: []; superlative: []; blanks: 1
TOT: 0.7912922821972069; NL: 0.7912922821972069; NL+AG: 0.9334884919988383; NL+QF: 0.7912922821972069; rels: []; projs: [count(distinct(actor_0.name))]; preds: [producer_0.name = "Tom Cruise"]; havings: []; superlative: []; blanks: 1
TOT: 0.7912922821972069; NL: 0.7912922821972069; NL+AG: 0.9334884919988383; NL+QF: 0.7912922821972069; rels: []; projs: [count(distinct(actor_0.name))]; preds: [writer_0.name = "Tom Cruise"]; havings: []; superlative: []; blanks: 1
TOT: 0.7854026604085581; NL: 0.7854026604085581; NL+AG: 0.9336787348794631; NL+QF: 0.7854026604085581; rels: []; projs: [count(distinct(movie_0.title))]; preds: [tv_series_0.title = "Cruise"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.7292909058678689; TR: 0.8511606491570143; QF: 0.3055555555555556; select count(distinct(movie_0.title)) from cast as cast_0, movie as movie_0 where cast_0.role = "'Tom Cruise'" and cast_0.msid = movie_0.mid
TOT: 0.696929405501697; TR: 0.8662391053409028; QF: 0.24138673557278212; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Tom Cruise" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.696194762123403; TR: 0.8662391053409028; QF: 0.23679521445844473; select count(distinct(movie_0.title)) from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Tom Cruise" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6871075278100518; TR: 0.8662391053409028; QF: 0.18000000000000002; select count(distinct(movie_0.title)) from movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Tom Cruise" and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6870794576346133; TR: 0.8662391053409028; QF: 0.17982456140350878; select count(distinct(movie_0.title)) from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Tom Cruise" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6243834749700317; TR: 0.828587847371172; QF: 0.12437189767086673; select count(distinct(movie_0.title)) from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, movie as movie_1 where movie_1.title = "Tom Cruise On: Tom Cruise, Jew" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = movie_1.mid
TOT: 0.6209057791740884; TR: 0.8662391053409028; QF: 0.06531776529582585; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, cast as cast_1, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Tom Cruise" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6206235315276534; TR: 0.8662391053409028; QF: 0.06355371750560754; select count(distinct(movie_0.title)) from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Tom Cruise" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6202131384814477; TR: 0.8662391053409028; QF: 0.06098876096682153; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, cast as cast_1, movie as movie_0, tv_series as tv_series_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Tom Cruise" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and tv_series_0.sid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6201690467706893; TR: 0.8662391053409028; QF: 0.06071318777458167; select count(distinct(movie_0.title)) from actor as actor_0, cast as cast_0, cast as cast_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where director_0.name = "Tom Cruise" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid


04:59  INFO: ================
04:59  INFO: QUERY 89: How many movies did "Alfred Hitchcock" direct?
04:59  INFO: ================
04:59  INFO: ================
04:59  INFO: QUERY 6: Find all actors who were born in 1984
04:59  INFO: ================
05:00  INFO: ================
05:00  INFO: QUERY 31: Find all movies by directors born in "Los Angeles"
05:00  INFO: ================
05:01  INFO: ================
05:01  INFO: QUERY 126: Find all movies featuring "Jason Robards" and "Woody Strode"
05:01  INFO: ================
05:03  INFO: ================
05:03  INFO: QUERY 94: How many actors were born in "Los Angeles" after 2000?
05:03  INFO: ================
05:04  INFO: ================
05:04  INFO: QUERY 44: What are all the movies directed by "Quentin Tarantino" featuring "Christoph Waltz"?
05:04  INFO: ================
1247. ROOT: ROOT; NA; ; (0) 
1248. What: CMT; NA; ; (0) 
1250. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
1253. directed: NT; NA; ; (0) directed_by(1.0):| director.name(0.72):| director(0.72):| written_by(0.68):| cast.role(0.67):| cast(0.67):| made_by(0.67):| 
1254. Christoph Waltz: VTTEXT; NA; ; (0) director.name(1.0):Christoph Waltz; Christoph Waltz; Christoph Walther; | actor.name(1.0):Christoph Waltz; Christoph Waltz; Christoph Walz; | producer.name(1.0):Christoph Waltz; Christoph Waltz; Christopher Waltz; | writer.name(1.0):Christoph Waltz; Christoph Waltz; Christoph Walz; | cast.role(0.76):Christoph Balthus; Christoph Balthus; Christoph Wenk; | movie.title(0.76):Christoph; Christoph; Christoph Columbus; | company.name(0.63):Christoph Schinko; Christoph Schinko; Christoph Kohler; | 
1256. Quentin Tarantino: VTTEXT; NA; ; (0) director.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | actor.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | producer.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | writer.name(1.0):Quentin Tarantino; Quentin Tarantino; Quentin Tarrantino; | cast.role(0.85):Quentin Tarrantino '; Quentin Tarrantino '; Quentin Tarrantino '; | movie.title(0.84):21 Years: Quentin Ta; 21 Years: Quentin Ta; Quentin Tarantino's ; | writer.birth_city(0.74):San Quentin; San Quentin; Saint-Quentin; | 
1257. featuring: VTTEXT; NA; ; (0) cast.role(1.0):Featuring; Featuring; Featuring; | tv_series.title(0.66):| tv_series(0.66):| movie.title_aka(0.64):| tv_series.title_aka(0.64):| actor.name(0.63):Coolio featuring L.V; San Jose featuring R; San Jose featuring R; | writer.name(0.63):Coolio featuring L.V; Gangstagrass featuri; San Jose featuring R; | 
What, WP
are, VBP
all, PDT
the, DT
movies, NNS
directed, VBN
by, IN
Quentin Tarantino, NNP
featuring, NNP
Christoph Waltz, NNP
root(ROOT-0, What-1)
cop(What-1, are-2)
det:predet(movies-5, all-3)
det(movies-5, the-4)
nsubj(What-1, movies-5)
acl(movies-5, directed-6)
case(Christoph Waltz-10, by-7)
compound(Christoph Waltz-10, Quentin Tarantino-8)
compound(Christoph Waltz-10, featuring-9)
nmod(directed-6, Christoph Waltz-10)

PARSE TREE:(1247) ROOT ROOT
    (1248) What CMT
        (1250) movies NT
            (1253) directed NT
                (1254) Christoph Waltz VTTEXT
                    (1256) Quentin Tarantino VTTEXT
                    (1257) featuring VTTEXT


===========
TRANSLATIONS
===========
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [director_0.name = "Christoph Waltz",director_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [director_0.name = "Christoph Waltz",actor_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [director_0.name = "Christoph Waltz",producer_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [director_0.name = "Christoph Waltz",writer_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [actor_0.name = "Christoph Waltz",director_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [actor_0.name = "Christoph Waltz",actor_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [actor_0.name = "Christoph Waltz",producer_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [actor_0.name = "Christoph Waltz",writer_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [producer_0.name = "Christoph Waltz",director_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [producer_0.name = "Christoph Waltz",actor_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [producer_0.name = "Christoph Waltz",producer_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [producer_0.name = "Christoph Waltz",writer_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [writer_0.name = "Christoph Waltz",director_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [writer_0.name = "Christoph Waltz",actor_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [writer_0.name = "Christoph Waltz",producer_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0
TOT: 1.0; NL: 1.0; NL+AG: 1.0; NL+QF: 1.0; rels: [directed_by]; projs: [movie_0.title]; preds: [writer_0.name = "Christoph Waltz",writer_0.name = "Quentin Tarantino",cast_0.role = "Featuring"]; havings: []; superlative: []; blanks: 0

===========
RESULTS
===========
TOT: 0.7302839965214888; TR: 1.0; QF: 0.14345458500936806; select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.name = "Quentin Tarantino" and cast_0.role = "Featuring" and director_0.name = "Christoph Waltz" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.7302839965214888; TR: 1.0; QF: 0.14345458500936806; select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0 where actor_0.name = "Christoph Waltz" and cast_0.role = "Featuring" and director_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.7145762958332567; TR: 1.0; QF: 0.10372941326205931; select movie_0.title from cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where cast_0.role = "Featuring" and director_0.name = "Christoph Waltz" and writer_0.name = "Quentin Tarantino" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.7145762958332567; TR: 1.0; QF: 0.10372941326205931; select movie_0.title from cast as cast_0, directed_by as directed_by_0, director as director_0, movie as movie_0, writer as writer_0, written_by as written_by_0 where cast_0.role = "Featuring" and director_0.name = "Quentin Tarantino" and writer_0.name = "Christoph Waltz" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.7145706817981688; TR: 1.0; QF: 0.10369432554276108; select movie_0.title from cast as cast_0, directed_by as directed_by_0, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where cast_0.role = "Featuring" and director_0.name = "Christoph Waltz" and producer_0.name = "Quentin Tarantino" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.7145706817981688; TR: 1.0; QF: 0.10369432554276108; select movie_0.title from cast as cast_0, directed_by as directed_by_0, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0 where cast_0.role = "Featuring" and director_0.name = "Quentin Tarantino" and producer_0.name = "Christoph Waltz" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.7089624145547178; TR: 1.0; QF: 0.06864265527119175; select movie_0.title from cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, director as director_1, movie as movie_0 where cast_0.role = "Featuring" and director_0.name = "Christoph Waltz" and director_1.name = "Quentin Tarantino" and cast_0.msid = movie_0.mid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_1.did and directed_by_1.msid = movie_0.mid
TOT: 0.7004255835661476; TR: 1.0; QF: 0.06071318777458167; select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Quentin Tarantino" and cast_0.role = "Featuring" and director_0.name = "Christoph Waltz" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.7004255835661476; TR: 1.0; QF: 0.06071318777458167; select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, directed_by as directed_by_0, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Christoph Waltz" and cast_0.role = "Featuring" and director_0.name = "Quentin Tarantino" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = tv_series_0.sid
TOT: 0.699921646899574; TR: 1.0; QF: 0.0575635836084969; select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Quentin Tarantino" and cast_0.role = "Featuring" and director_0.name = "Christoph Waltz" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid


05:08  INFO: ================
05:08  INFO: QUERY 8: What is the nationality of the actor "Christoph Waltz"?
05:08  INFO: ================
05:08  INFO: ================
05:08  INFO: QUERY 90: How many movies were produced in the year 2012?
05:08  INFO: ================
05:11  INFO: ================
05:11  INFO: QUERY 63: Find all the female actors born in "New York City" after 1980
05:11  INFO: ================
05:29  INFO: ================
05:29  INFO: QUERY 48: What are all the movies featuring "Kerry Washington"?
05:29  INFO: ================
1292. ROOT: ROOT; NA; ; (0) 
1293. What: CMT; NA; ; (0) 
1295. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
1298. featuring: NT; NA; ; (0) tv_series.title(0.69):| tv_series(0.69):| movie.release_year(0.64):| tv_series.release_year(0.64):| made_by(0.64):| movie.title_aka(0.62):| tv_series.title_aka(0.62):| 
1299. Kerry Washington: VTTEXT; NA; ; (0) actor.name(1.0):Kerry Washington; Kerry Washington; Jerry Washington; | producer.name(1.0):Kerry Washington; Kerry Washington; Terry Washington; | director.name(0.93):Jerry Washington; Leroy Washington; Tony Washington; | writer.name(0.93):Jerry Washington; Ellery Washington; Leroy Washington; | cast.role(0.91):Sherry Washington; Roy Washington; Amy Washington; | director.birth_city(0.77):Washington; Washington; Washington; | actor.birth_city(0.77):Washington; Washington; Washington; | 
What, WP
are, VBP
all, PDT
the, DT
movies, NNS
featuring, VBG
Kerry Washington, NNP
root(ROOT-0, What-1)
cop(What-1, are-2)
det:predet(movies-5, all-3)
det(movies-5, the-4)
nsubj(What-1, movies-5)
dep(movies-5, featuring-6)
dobj(featuring-6, Kerry Washington-7)

PARSE TREE:(1292) ROOT ROOT
    (1293) What CMT
        (1295) movies NT
            (1298) featuring NT
                (1299) Kerry Washington VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Kerry Washington"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Kerry Washington"]; havings: []; superlative: []; blanks: 1
TOT: 0.8510005731813209; NL: 0.846544991160274; NL+AG: 0.9549358938904248; NL+QF: 0.8510005731813209; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Jerry Washington"]; havings: []; superlative: []; blanks: 1
TOT: 0.8500359378349628; NL: 0.846544991160274; NL+AG: 0.9549358938904248; NL+QF: 0.8500359378349628; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Jerry Washington"]; havings: []; superlative: []; blanks: 1
TOT: 0.8421524022958734; NL: 0.8403126689217164; NL+AG: 0.952518382610044; NL+QF: 0.8421524022958734; rels: []; projs: [movie_0.title]; preds: [cast_0.role = "Sherry Washington"]; havings: []; superlative: []; blanks: 1
TOT: 0.8134424197183193; NL: 0.7676089955424154; NL+AG: 0.929131132718334; NL+QF: 0.8134424197183193; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Sherry Washington"]; havings: []; superlative: []; blanks: 1
TOT: 0.798089516719733; NL: 0.7912922821972069; NL+AG: 0.9394249139348947; NL+QF: 0.798089516719733; rels: []; projs: [actor_0.name]; preds: [actor_0.name = "Kerry Washington"]; havings: []; superlative: []; blanks: 1
TOT: 0.7955417822520919; NL: 0.7955417822520919; NL+AG: 0.9391833540180654; NL+QF: 0.7955417822520919; rels: []; projs: [movie_0.title]; preds: [director_0.birth_city = "Washington"]; havings: []; superlative: []; blanks: 1
TOT: 0.7955417822520919; NL: 0.7955417822520919; NL+AG: 0.9391833540180654; NL+QF: 0.7955417822520919; rels: []; projs: [movie_0.title]; preds: [actor_0.birth_city = "Washington"]; havings: []; superlative: []; blanks: 1
TOT: 0.7912922821972069; NL: 0.7912922821972069; NL+AG: 0.9394249139348947; NL+QF: 0.7912922821972069; rels: []; projs: [actor_0.name]; preds: [producer_0.name = "Kerry Washington"]; havings: []; superlative: []; blanks: 1
TOT: 0.7840107772655208; NL: 0.7267116764646099; NL+AG: 0.9157961041263555; NL+QF: 0.7840107772655208; rels: []; projs: [actor_0.name]; preds: [actor_0.birth_city = "Washington"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.8704064663593125; TR: 0.7840107772655208; QF: 1.0; select actor_0.name from actor as actor_0 where actor_0.birth_city = "Washington"
TOT: 0.7247478235018096; TR: 0.8134424197183193; QF: 0.4186046511627907; select actor_0.name from actor as actor_0, cast as cast_0 where cast_0.role = "Sherry Washington" and actor_0.aid = cast_0.aid
TOT: 0.7238859577511844; TR: 0.8421524022958734; QF: 0.3055555555555556; select movie_0.title from cast as cast_0, movie as movie_0 where cast_0.role = "Sherry Washington" and cast_0.msid = movie_0.mid
TOT: 0.696929405501697; TR: 0.8662391053409028; QF: 0.24138673557278212; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Kerry Washington" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6870794576346133; TR: 0.8662391053409028; QF: 0.17982456140350878; select movie_0.title from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Kerry Washington" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6870516428276539; TR: 0.8510005731813209; QF: 0.23679521445844473; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Jerry Washington" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6773856273064878; TR: 0.8500359378349628; QF: 0.18000000000000002; select movie_0.title from movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Jerry Washington" and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6545110116484104; TR: 0.7955417822520919; QF: 0.24138673557278212; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.birth_city = "Washington" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6537763682701164; TR: 0.7955417822520919; QF: 0.23679521445844473; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.birth_city = "Washington" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6209057791740884; TR: 0.8662391053409028; QF: 0.06531776529582585; select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Kerry Washington" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid


05:30  INFO: ================
05:30  INFO: QUERY 38: Find all movies featuring "Benedict Cumberbatch"
05:30  INFO: ================
1301. ROOT: ROOT; NA; ; (0) 
1302. Find: CMT; NA; ; (0) 
1303. featuring: NT; NA; ; (0) tv_series.title(0.69):| tv_series(0.69):| movie.release_year(0.64):| tv_series.release_year(0.64):| made_by(0.64):| movie.title_aka(0.62):| tv_series.title_aka(0.62):| 
1304. movies: NT; NA; all; (0) movie.title(1.0):| movie(1.0):| cast.role(0.95):Movie; Movie F; Movie AD; | company.name(0.95):Movies; Movie; Movie Movie; | tv_series.title(0.84):Movies, Movies, Movi; Movie Mob; Moon Movies; | keyword.keyword(0.83):movie-in-movie; movies-about-movies; b-movie; | actor.name(0.76):| 
1306. Benedict Cumberbatch: VTTEXT; NA; ; (0) actor.name(1.0):Benedict Cumberbatch; Benedict Cumberbatch; Benedict Timothy Car; | producer.name(1.0):Benedict Cumberbatch; Benedict Cumberbatch; Benedict Timothy Car; | cast.role(0.7):Tom Cumberbatch; Bert Benedict; Bert Benedict; | director.name(0.68):Jill Cumberbatch; Benedict Coen; Benedict Coen; | writer.name(0.67):Benedict Berenberg; Benedict Berenberg; Carol Cumberbatch; | movie.title(0.66):Benedict; Benedict; My Tribute, Eddie Cu; | company.name(0.59):St. Benedict Center; St. Benedict Center; Yerden-Cumberbatch M; | 
Find, VB
all, DT
movies, NNS
featuring, VBG
Benedict Cumberbatch, NNP
root(ROOT-0, Find-1)
det(movies-3, all-2)
nsubj(featuring-4, movies-3)
dep(Find-1, featuring-4)
dobj(featuring-4, Benedict Cumberbatch-5)

PARSE TREE:(1301) ROOT ROOT
    (1302) Find CMT
        (1304) movies NT
            (1303) featuring NT
                (1306) Benedict Cumberbatch VTTEXT


===========
TRANSLATIONS
===========
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [actor_0.name = "Benedict Cumberbatch"]; havings: []; superlative: []; blanks: 1
TOT: 0.8662391053409028; NL: 0.8662391053409028; NL+AG: 0.9628121638266046; NL+QF: 0.8662391053409028; rels: []; projs: [movie_0.title]; preds: [producer_0.name = "Benedict Cumberbatch"]; havings: []; superlative: []; blanks: 1
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [actor_0.name = "Benedict Cumberbatch"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [producer_0.name = "Benedict Cumberbatch"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [actor_0.name = "Benedict Cumberbatch"]; havings: []; superlative: []; blanks: 0
TOT: 0.82915619758885; NL: 0.82915619758885; NL+AG: 0.9889432485322897; NL+QF: 0.82915619758885; rels: []; projs: [tv_series_0.title]; preds: [producer_0.name = "Benedict Cumberbatch"]; havings: []; superlative: []; blanks: 0
TOT: 0.798089516719733; NL: 0.7912922821972069; NL+AG: 0.9394249139348947; NL+QF: 0.798089516719733; rels: []; projs: [actor_0.name]; preds: [actor_0.name = "Benedict Cumberbatch"]; havings: []; superlative: []; blanks: 1
TOT: 0.7912922821972069; NL: 0.7912922821972069; NL+AG: 0.9394249139348947; NL+QF: 0.7912922821972069; rels: []; projs: [actor_0.name]; preds: [producer_0.name = "Benedict Cumberbatch"]; havings: []; superlative: []; blanks: 1
TOT: 0.7863638845144357; NL: 0.76029086999885; NL+AG: 0.9391833540180654; NL+QF: 0.7863638845144357; rels: []; projs: [movie_0.title]; preds: [director_0.name = "Jill Cumberbatch"]; havings: []; superlative: []; blanks: 1
TOT: 0.7796120946411328; NL: 0.7587183769981746; NL+AG: 0.9391833540180654; NL+QF: 0.7796120946411328; rels: []; projs: [movie_0.title]; preds: [writer_0.name = "Benedict Berenberg"]; havings: []; superlative: []; blanks: 1
TOT: 0.7787175392213697; NL: 0.7025428046840954; NL+AG: 0.9157961041263555; NL+QF: 0.7787175392213697; rels: []; projs: [actor_0.name]; preds: [cast_0.role = "Tom Cumberbatch"]; havings: []; superlative: []; blanks: 1

===========
RESULTS
===========
TOT: 0.7039128952036398; TR: 0.7787175392213697; QF: 0.4186046511627907; select actor_0.name from actor as actor_0, cast as cast_0 where cast_0.role = "Tom Cumberbatch" and actor_0.aid = cast_0.aid
TOT: 0.696929405501697; TR: 0.8662391053409028; QF: 0.24138673557278212; select movie_0.title from actor as actor_0, cast as cast_0, movie as movie_0 where actor_0.name = "Benedict Cumberbatch" and actor_0.aid = cast_0.aid and cast_0.msid = movie_0.mid
TOT: 0.6870794576346133; TR: 0.8662391053409028; QF: 0.17982456140350878; select movie_0.title from made_by as made_by_0, movie as movie_0, producer as producer_0 where producer_0.name = "Benedict Cumberbatch" and made_by_0.msid = movie_0.mid and made_by_0.pid = producer_0.pid
TOT: 0.6675729346739716; TR: 0.82915619758885; QF: 0.196969696969697; select tv_series_0.title from made_by as made_by_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Benedict Cumberbatch" and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6608639847092077; TR: 0.82915619758885; QF: 0.1550387596899225; select tv_series_0.title from actor as actor_0, cast as cast_0, tv_series as tv_series_0 where actor_0.name = "Benedict Cumberbatch" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid
TOT: 0.6482696296275228; TR: 0.7863638845144357; QF: 0.23679521445844473; select movie_0.title from directed_by as directed_by_0, director as director_0, movie as movie_0 where director_0.name = "Jill Cumberbatch" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid
TOT: 0.6351313213901899; TR: 0.7796120946411328; QF: 0.18000000000000002; select movie_0.title from movie as movie_0, writer as writer_0, written_by as written_by_0 where writer_0.name = "Benedict Berenberg" and movie_0.mid = written_by_0.msid and writer_0.wid = written_by_0.wid
TOT: 0.6209057791740884; TR: 0.8662391053409028; QF: 0.06531776529582585; select movie_0.title from actor as actor_0, cast as cast_0, cast as cast_1, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Benedict Cumberbatch" and actor_0.aid = cast_0.aid and actor_0.aid = cast_1.aid and cast_0.msid = movie_0.mid and cast_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6206235315276534; TR: 0.8662391053409028; QF: 0.06355371750560754; select movie_0.title from directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, made_by as made_by_0, movie as movie_0, producer as producer_0, tv_series as tv_series_0 where producer_0.name = "Benedict Cumberbatch" and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid and made_by_0.msid = tv_series_0.sid and made_by_0.pid = producer_0.pid
TOT: 0.6196651101041157; TR: 0.8662391053409028; QF: 0.0575635836084969; select movie_0.title from actor as actor_0, cast as cast_0, directed_by as directed_by_0, directed_by as directed_by_1, director as director_0, movie as movie_0, tv_series as tv_series_0 where actor_0.name = "Benedict Cumberbatch" and actor_0.aid = cast_0.aid and cast_0.msid = tv_series_0.sid and directed_by_0.did = director_0.did and directed_by_0.msid = movie_0.mid and directed_by_1.did = director_0.did and directed_by_1.msid = tv_series_0.sid


05:30  INFO: ================
05:30  INFO: QUERY 1: What year was "Ellen Page" born?
05:30  INFO: ================
05:31  INFO: ================
05:31  INFO: QUERY 30: Find all actors born in "Los Angeles" after 1980
05:31  INFO: ================
05:33  INFO: ====== RANKS ======
05:33  INFO: QUERY 0: 1
05:33  INFO: QUERY 1: 1
05:33  INFO: QUERY 2: 1
05:33  INFO: QUERY 3: 1
05:33  INFO: QUERY 4: 1
05:33  INFO: QUERY 5: 1
05:33  INFO: QUERY 6: 1
05:33  INFO: QUERY 7: 1
05:33  INFO: QUERY 8: 1
05:33  INFO: QUERY 9: 1
05:33  INFO: QUERY 10: 1
05:33  INFO: QUERY 11: 1
05:33  INFO: QUERY 12: 1
05:33  INFO: QUERY 13: 1
05:33  INFO: QUERY 14: 1
05:33  INFO: QUERY 15: 1
05:33  INFO: QUERY 16: 1
05:33  INFO: QUERY 17: 1
05:33  INFO: QUERY 18: 1
05:33  INFO: QUERY 19: 1
05:33  INFO: QUERY 20: 1
05:33  INFO: QUERY 21: 1
05:33  INFO: QUERY 22: -1
05:33  INFO: QUERY 23: 1
05:33  INFO: QUERY 24: 1
05:33  INFO: QUERY 25: -1
05:33  INFO: QUERY 26: 3
05:33  INFO: QUERY 27: 1
05:33  INFO: QUERY 28: 1
05:33  INFO: QUERY 29: 1
05:33  INFO: QUERY 30: 1
05:33  INFO: QUERY 31: 1
05:33  INFO: QUERY 32: 1
05:33  INFO: QUERY 33: 1
05:33  INFO: QUERY 34: 1
05:33  INFO: QUERY 35: 3
05:33  INFO: QUERY 36: 1
05:33  INFO: QUERY 37: 4
05:33  INFO: QUERY 38: 2
05:33  INFO: QUERY 39: 2
05:33  INFO: QUERY 40: 4
05:33  INFO: QUERY 41: 1
05:33  INFO: QUERY 42: 1
05:33  INFO: QUERY 43: 1
05:33  INFO: QUERY 44: -1
05:33  INFO: QUERY 45: 1
05:33  INFO: QUERY 46: 1
05:33  INFO: QUERY 47: 2
05:33  INFO: QUERY 48: 4
05:33  INFO: QUERY 49: 2
05:33  INFO: QUERY 50: 1
05:33  INFO: QUERY 51: 1
05:33  INFO: QUERY 52: 2
05:33  INFO: QUERY 53: 1
05:33  INFO: QUERY 54: 2
05:33  INFO: QUERY 55: 2
05:33  INFO: QUERY 56: 1
05:33  INFO: QUERY 57: 1
05:33  INFO: QUERY 58: 3
05:33  INFO: QUERY 59: 1
05:33  INFO: QUERY 60: 1
05:33  INFO: QUERY 61: -1
05:33  INFO: QUERY 62: 1
05:33  INFO: QUERY 63: 1
05:33  INFO: QUERY 64: 1
05:33  INFO: QUERY 65: 1
05:33  INFO: QUERY 66: 3
05:33  INFO: QUERY 67: -1
05:33  INFO: QUERY 68: -1
05:33  INFO: QUERY 69: 1
05:33  INFO: QUERY 70: 1
05:33  INFO: QUERY 71: 2
05:33  INFO: QUERY 72: 2
05:33  INFO: QUERY 73: 1
05:33  INFO: QUERY 74: 1
05:33  INFO: QUERY 75: 1
05:33  INFO: QUERY 76: 1
05:33  INFO: QUERY 77: 1
05:33  INFO: QUERY 78: 4
05:33  INFO: QUERY 79: 1
05:33  INFO: QUERY 80: 2
05:33  INFO: QUERY 81: 4
05:33  INFO: QUERY 82: 1
05:33  INFO: QUERY 83: -1
05:33  INFO: QUERY 84: 4
05:33  INFO: QUERY 85: -1
05:33  INFO: QUERY 86: -1
05:33  INFO: QUERY 87: 3
05:33  INFO: QUERY 88: 1
05:33  INFO: QUERY 89: 1
05:33  INFO: QUERY 90: 1
05:33  INFO: QUERY 91: 1
05:33  INFO: QUERY 92: 1
05:33  INFO: QUERY 93: 2
05:33  INFO: QUERY 94: 1
05:33  INFO: QUERY 95: 1
05:33  INFO: QUERY 96: 2
05:33  INFO: QUERY 97: 2
05:33  INFO: QUERY 98: -1
05:33  INFO: QUERY 99: 2
05:33  INFO: QUERY 100: 1
05:33  INFO: QUERY 101: 1
05:33  INFO: QUERY 102: 1
05:33  INFO: QUERY 103: -1
05:33  INFO: QUERY 104: 3
05:33  INFO: QUERY 105: 1
05:33  INFO: QUERY 106: 2
05:33  INFO: QUERY 107: 1
05:33  INFO: QUERY 108: 2
05:33  INFO: QUERY 109: 2
05:33  INFO: QUERY 110: -1
05:33  INFO: QUERY 111: 1
05:33  INFO: QUERY 112: 5
05:33  INFO: QUERY 113: 3
05:33  INFO: QUERY 114: 8
05:33  INFO: QUERY 115: 7
05:33  INFO: QUERY 116: 1
05:33  INFO: QUERY 117: 1
05:33  INFO: QUERY 118: 5
05:33  INFO: QUERY 119: -1
05:33  INFO: QUERY 120: 1
05:33  INFO: QUERY 121: -1
05:33  INFO: QUERY 122: 1
05:33  INFO: QUERY 123: 1
05:33  INFO: QUERY 124: -1
05:33  INFO: QUERY 125: -1
05:33  INFO: QUERY 126: 1
05:33  INFO: QUERY 127: -1
05:33  INFO: QUERY 128: -1
05:33  INFO: QUERY 129: 1
05:33  INFO: QUERY 130: -1
05:33  INFO: ==============
05:33  INFO: SUMMARY
05:33  INFO: ==============
05:33  INFO: Total queries: 131
05:33  INFO: Top 1: 78
05:33  INFO: Top 3: 102
05:33  INFO: Top 5: 110
